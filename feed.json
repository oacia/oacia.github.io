{
    "version": "https://jsonfeed.org/version/1",
    "title": "oaciaのBbBlog~",
    "subtitle": "DEVIL or SWEET",
    "icon": "https://oacia.dev/images/favicon.ico",
    "description": "月遇从云 花遇和风",
    "home_page_url": "https://oacia.dev",
    "items": [
        {
            "id": "https://oacia.dev/unidbg-anti-br/",
            "url": "https://oacia.dev/unidbg-anti-br/",
            "title": "dexguard反混淆-unidbg去除BR寄存器跳转",
            "date_published": "2024-09-08T10:14:21.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>这几天一直在和 so 层的强混淆对抗，前几天有朋友问我有没有试过 <code>IL</code>  层面的反混淆，正好这个月遇到了一个 dexguard 的强混淆样本，所以就想试试 <code>IL</code>  层面的反混淆，ida 中最为出名的应该就是 <code>ida microcode</code>  了，但即使在两年前曾经为了研究区块链合约的字节码而学习过李樾和谭添老师的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWI3NDExSzdQNA==\">静态分析</span>，然而并没有什么太大的进展… 果然 static analysis 是一门大学问呐   ref <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXgtcmF5cy5jb20vYmxvZy9oZXgtcmF5cy1taWNyb2NvZGUtYXBpLXZzLW9iZnVzY2F0aW5nLWNvbXBpbGVyLw==\">Hex-Rays Microcode API vs. Obfuscating Compiler</span></p>\n<p>之后又去试了试 <code>Binary Ninja</code> , 现在它的 <code>medium IL</code>  从编译器层面已经优化已经棒了，甚至有些 br 跳转的地址都可以自动在 IL 中体现出来</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908134728273.png\" alt=\"image-20240908134728273\" style=\"aspect-ratio:556 / 264;\"></p>\n<p>不过还是没有办法直接去操作 IL, 所以最终回归到了 aarch64 汇编层面的 patch, 只是倘若遇到不透明谓词和指令替换的话，bninja 就没有办法自动计算出来这个这个自动计算的地址了</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908134636750.png\" alt=\"image-20240908134636750\" style=\"aspect-ratio:721 / 679;\"></p>\n<p>所以为了可以完整的去除 br 寄存器跳转，还得是 unidbg 呀！</p>\n<p>关于 unidbg 的基本用法，可以参考<a href=\"https://oacia.dev/unidbg-usage/\"> unidbg 学习笔记</a></p>\n<p>一篇非常好的文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjc3MDg2Lmh0bQ==\"> [原创] 记一次基于 unidbg 模拟执行的去除 ollvm 混淆</span></p>\n<h1 id=\"unidug环境搭建\"><a class=\"anchor\" href=\"#unidug环境搭建\">#</a> unidug 环境搭建</h1>\n<p>首先在 <code>unidbg-android/src/test/java</code>  新建一个我们自己的 package 和类，然后初始化一下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">antibr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        instructions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        patch_list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        emulator <span class=\"token operator\">=</span> <span class=\"token class-name\">AndroidEmulatorBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">for64Bit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setProcessName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.test.antibr\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">//.addBackendFactory(new Unicorn2Factory(true))</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建模拟器实例，要模拟 32 位或者 64 位，在这里区分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Memory</span> memory <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟器的内存操作接口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        memory<span class=\"token punctuation\">.</span><span class=\"token function\">setLibraryResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AndroidResolver</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置系统类库解析</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        vm <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">createDalvikVM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 Android 虚拟机</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        vm<span class=\"token punctuation\">.</span><span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置是否打印 Jni 调用细节</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">DalvikModule</span> dm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unidbg-android/src/test/resources/test/libbdae.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加载 libttEncrypt.so 到 unicorn 虚拟内存，加载成功以后会默认调用 init_array 等函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> dm<span class=\"token punctuation\">.</span><span class=\"token function\">getModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">code_walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        dm<span class=\"token punctuation\">.</span><span class=\"token function\">callJNI_OnLoad</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 手动执行 JNI_OnLoad 函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">doPatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来，我们将对每一条运行过的指令利用 unidbg 的 unicorn 引擎进行 hook, 基本用法如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">code_walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hook_add_new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CodeHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Backend</span> backend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> user<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Capstone</span> capstone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CS_ARCH_ARM64</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CS_MODE_ARM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mem_read</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Instruction</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> disasm <span class=\"token operator\">=</span> capstone<span class=\"token punctuation\">.</span><span class=\"token function\">disasm</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x:%s %s %s\\n\"</span><span class=\"token punctuation\">,</span>address<span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base <span class=\"token punctuation\">,</span>disasm<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>disasm<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>disasm<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOperands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAttach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnHook</span> unHook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token operator\">+</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"寄存器跳转基本类型\"><a class=\"anchor\" href=\"#寄存器跳转基本类型\">#</a> 寄存器跳转基本类型</h1>\n<p>接下来我们考虑寄存器跳转混淆的基本类型，总体可以分为直接跳转和分支跳转这两种类型</p>\n<h2 id=\"直接跳转\"><a class=\"anchor\" href=\"#直接跳转\">#</a> 直接跳转</h2>\n<p>对于直接跳转来说，我们只需要在 <code>BR</code>  或 <code>BLR</code>  跳转的地方直接 patch 这一行汇编即可完成去混淆</p>\n<p><strong>BR 直接跳转</strong></p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908155626078.png\" alt=\"image-20240908155626078\" style=\"aspect-ratio:844 / 387;\"></p>\n<p><strong>BLR 直接跳转</strong></p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908160041474.png\" alt=\"image-20240908160041474\" style=\"aspect-ratio:898 / 243;\"></p>\n<h2 id=\"分支跳转\"><a class=\"anchor\" href=\"#分支跳转\">#</a> 分支跳转</h2>\n<p>一个标准的分支跳转由下面的四行指令构成，依次为比较 ( <code>CMP</code>  或 <code>TST</code> ), 条件赋值 ( <code>CSEL</code> ), 地址取值 ( <code>LDR</code> ), 跳转 ( <code>BR</code> )</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908160322876.png\" alt=\"image-20240908160322876\" style=\"aspect-ratio:433 / 120;\"></p>\n<p>假设条件 <code>EQ</code>  满足时赋值为 <code>[X12]</code> , 所跳转的地址为 <code>loc_a</code> ; 条件 <code>EQ</code>  不满足时赋值为 <code>[X9]</code> , 所跳转的地址为 <code>loc_b</code></p>\n<p>由此我们可以将一个分支跳转还原成如下的指令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NOP <span class=\"token comment\">#原 CMP 或 TST 需要被 NOP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NOP <span class=\"token comment\">#原 CSEL 需要被 NOP</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B.EQ loc_a <span class=\"token comment\">#LDR 指令 patch 为 B.EQ 条件满足时的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>B loc_b <span class=\"token comment\">#BR 指令 patch 为 B 条件不满足时跳转的地址</span></pre></td></tr></table></figure><p>这样即可完成一次分支跳转的修复</p>\n<p>当然我们需要考虑到一些特殊的情况，例如下图所示</p>\n<p>在 <code>LDR</code>  指令和 <code>BR</code>  指令间包含了其他的运行相关的指令，此时假如我们将 <code>LDR</code>  指令 patch 为分支跳转，将会导致参数的丢失，所以我们需要进行指令移动，将 LDR 指令下移到 BR 指令的上一行，同时将 <code>BR</code>  和 <code>LDR</code>  之间的指令上移一行</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908161340563.png\" alt=\"image-20240908161340563\" style=\"aspect-ratio:452 / 178;\"></p>\n<p>这一种情况经过修复之后的汇编应如下所示</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NOP</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NOP</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MOV W19, <span class=\"token comment\">#0x5D1D8BC9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>MOV X20, XZR</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>B.NE loc_a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>B loc_b</pre></td></tr></table></figure><h1 id=\"unidbg反混淆\"><a class=\"anchor\" href=\"#unidbg反混淆\">#</a> unidbg 反混淆</h1>\n<p>要想对寄存器跳转去混淆，我们首先需要去辩别这个 BR 跳转究竟有没有分支，即判断之前运行过的指令中有没有 <code>CSEL</code>  相关的指令，为了实现指令和寄存器的回溯，我们必须要去维护一个数据结构去保存他们，倘若使用 Stack 这种后进先出的模式，那么随着指令的不断运行，这个 stack 会变地越来越大，这其实是我们不希望看到的。而 Queue 这种先进先出的模式，确实可以让我们维护一个最近运行的十条指令的循环队列，但是这也会带来一个问题就是当我们想进行指令回溯的时候，获取到的第一条指令并非 <code>BR</code>  跳转指令的上一条指令，所以这里的数据结构我们可以选择 Deque 这种双端队列的结构，来方便的去实现 <code>添加元素到队尾</code> ， <code>取队尾元素并删除</code> 以及当队列长度达到设定的阈值时，进行 <code>取队首元素并删除</code> 的操作</p>\n<p>首先定义一个指令类 <code>InsAndCtx</code> ，在这个类定义了每运行一条指令后，需要记录的地址，汇编以及寄存器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 保存指令和寄存器环境类：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">InsAndCtx</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Instruction</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addr <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instruction</span> ins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ins <span class=\"token operator\">=</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Instruction</span> <span class=\"token function\">getIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> regs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>regs <span class=\"token operator\">=</span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后在 <code>code_walk</code>  中维护一个大小为 10 的循环双端队列</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">code_walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hook_add_new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CodeHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Backend</span> backend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> user<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">Capstone</span> capstone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CS_ARCH_ARM64</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CS_MODE_ARM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mem_read</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">Instruction</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> disasm <span class=\"token operator\">=</span> capstone<span class=\"token punctuation\">.</span><span class=\"token function\">disasm</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">InsAndCtx</span> iac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InsAndCtx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                iac<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span>disasm<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                iac<span class=\"token punctuation\">.</span><span class=\"token function\">setRegs</span><span class=\"token punctuation\">(</span><span class=\"token function\">saveRegs</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                iac<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 可以当作一个队列去理解，当队列的大小超过 10 时，就删除队首的元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instructions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    instructions<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 向队列的队尾添加元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                instructions<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>iac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAttach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnHook</span> unHook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token operator\">+</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而在 br 寄存器跳转去混淆之前，因为所有的 patch 都是在 unidbg 运行结束后进行 patch 的，所以我们需要定义一个 patch 类，用来记录 patch 相关的信息</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">></span></span> patch_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//patch 类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">;</span><span class=\"token comment\">//patch 地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> ins<span class=\"token punctuation\">;</span><span class=\"token comment\">//patch 的指令</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addr <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ins <span class=\"token operator\">=</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">enum</span> br_type</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    direct_br<span class=\"token punctuation\">,</span>direct_blr<span class=\"token punctuation\">,</span>indirect_br<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">enum</span> error_type<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ok<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    conflict_br_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    conflict_b_jump_address</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">></span></span> patchs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> br_jump_to<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">long</span> br_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    br_type type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    error_type errorno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">String</span> error_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        patchs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        br_jump_to <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        errorno <span class=\"token operator\">=</span> error_type<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后便是寄存器跳转核心识别代码的编写了，主要就是将前面找出的基本类型所对应的情况一一判断过去</p>\n<p>而 dexguard 的 <code>BLR</code>  寄存器跳转，是会跳转到外部的导入函数中去执行的，对于这种情况跳转，待跳转的地址在混淆库的外部，符号是不可知的，具体形如这种样子</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908225151439.png\" alt=\"image-20240908225151439\" style=\"aspect-ratio:820 / 289;\"></p>\n<p>在这种情况下，我们可以使用 unidbg 提供的 <code>findClosestSymbolByAddress</code>  函数来找到对应的符号</p>\n<details class=\"info\"><summary>unidbg自实现地址反推符号 findHookedSymbol</summary><div>\n<div class=\"note warning\">\n<p>自实现地址反推符号被确认其实是非必要的，此处仅作记录用</p>\n</div>\n<p>首先在 <code>unidbg-api/src/main/java/com/github/unidbg/spi/</code>  下增加一个 <code>HookedSymbol</code>  类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>spi</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HookedSymbol</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> library<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HookedSymbol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> address<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> library<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>library <span class=\"token operator\">=</span> library<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLibrary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> library<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后修改 <code>unidbg-api/src/main/java/com/github/unidbg/spi/AbstractLoader.java</code> , 修改的部分如图所示</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908230357126.png\" alt=\"image-20240908230357126\" style=\"aspect-ratio:2158 / 1228;\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HookedSymbol</span><span class=\"token punctuation\">></span></span> hookedSymbolMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HookedSymbol</span> <span class=\"token function\">findHookedSymbol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> hookedSymbolMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addHookListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HookListener</span> listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//hookListeners.add(listener);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    hookListeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>svcMemory<span class=\"token punctuation\">,</span> libraryName<span class=\"token punctuation\">,</span> symbolName<span class=\"token punctuation\">,</span> old<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">long</span> addr <span class=\"token operator\">=</span> listener<span class=\"token punctuation\">.</span><span class=\"token function\">hook</span><span class=\"token punctuation\">(</span>svcMemory<span class=\"token punctuation\">,</span> libraryName<span class=\"token punctuation\">,</span> symbolName<span class=\"token punctuation\">,</span> old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            hookedSymbolMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HookedSymbol</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> libraryName<span class=\"token punctuation\">,</span> symbolName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后在 <code>unidbg-api/src/main/java/com/github/unidbg/spi/Loader.java</code>  中加上先前添加的函数 <code>findHookedSymbol</code></p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908230519111.png\" alt=\"image-20240908230519111\" style=\"aspect-ratio:1643 / 1084;\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HookedSymbol</span> <span class=\"token function\">findHookedSymbol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>随后来到 <code>unidbg-android/src/main/java/com/github/unidbg/linux/LinuxModule.java</code> , 在此处重载 <code>findClosestSymbolByAddress</code>  函数</p>\n<p><img data-src=\"/unidbg-anti-br/image-20240908231130325.png\" alt=\"image-20240908231130325\" style=\"aspect-ratio:2276 / 1204;\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Symbol</span> <span class=\"token function\">findClosestSymbolByAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mutable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Symbol</span> bestSymbol <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Mutable</span> mutable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mutable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    symbols<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>peer <span class=\"token operator\">></span> address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutable<span class=\"token punctuation\">.</span>bestSymbol <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> mutable<span class=\"token punctuation\">.</span>bestSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>peer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            mutable<span class=\"token punctuation\">.</span>bestSymbol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VirtualSymbol</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>peer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> mutable<span class=\"token punctuation\">.</span>bestSymbol<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<p>通过地址寻找符号的代码如下，但是需要注意的是，其实 JNI 函数的调用也会用到 BLR 寄存器跳转，所以说如果我们发现一个非法地址无法找到对应的符号，那么保留这个 <code>BLR</code>  的寄存器跳转就可以啦</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">long</span> debug_addr <span class=\"token operator\">=</span> <span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>blr<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>blr<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Module</span> module2 <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByAddress</span><span class=\"token punctuation\">(</span>debug_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Symbol</span> symbol <span class=\"token operator\">=</span> module2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> module2<span class=\"token punctuation\">.</span><span class=\"token function\">findClosestSymbolByAddress</span><span class=\"token punctuation\">(</span>debug_addr<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> moduleName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        moduleName <span class=\"token operator\">=</span> module2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> symbolName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symbol <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        symbolName <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">long</span> symbolAddr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symbol <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        symbolAddr <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[debug] try to resolve symbol: \"</span><span class=\"token operator\">+</span>moduleName<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>symbolName<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>symbolAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以说最终的 br 反混淆代码如下～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>antibr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">capstone<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Capstone</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">capstone<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Instruction</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOUtils</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AndroidEmulator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Module</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Symbol</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>arm<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Backend</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>arm<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CodeHook</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>arm<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnHook</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>arm<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Unicorn2Factory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AndroidEmulatorBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AndroidResolver</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dvm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DalvikModule</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>linux<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dvm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">VM</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Memory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HookedSymbol</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LibraryFile</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>unidbg<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inspector</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">keystone<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Keystone</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">keystone<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeystoneArchitecture</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">keystone<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeystoneEncoded</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">keystone<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeystoneMode</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">unicorn<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arm64Const</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> antibr <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AndroidEmulator</span> emulator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">VM</span> vm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Module</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InsAndCtx</span><span class=\"token punctuation\">></span></span> instructions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">></span></span> patch_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> inName <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\work\\\\test\\\\aiti-br\\\\libbdae.so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outName <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\work\\\\test\\\\aiti-br\\\\libbdae_fix.so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 保存指令和寄存器环境类：</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsAndCtx</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Instruction</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addr <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instruction</span> ins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ins <span class=\"token operator\">=</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Instruction</span> <span class=\"token function\">getIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> regs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>regs <span class=\"token operator\">=</span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">return</span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">//patch 类</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">;</span><span class=\"token comment\">//patch 地址</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token class-name\">String</span> ins<span class=\"token punctuation\">;</span><span class=\"token comment\">//patch 的指令</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addr <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">return</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ins <span class=\"token operator\">=</span> ins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">enum</span> br_type</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        direct_br<span class=\"token punctuation\">,</span>direct_blr<span class=\"token punctuation\">,</span>indirect_br<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">enum</span> error_type<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        ok<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        conflict_br_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        conflict_b_jump_address</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">></span></span> patchs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> br_jump_to<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">long</span> br_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        br_type type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        error_type errorno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token class-name\">String</span> error_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            patchs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            br_jump_to <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            errorno <span class=\"token operator\">=</span> error_type<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">saveRegs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Backend</span> bk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> nb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            nb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bk<span class=\"token punctuation\">.</span><span class=\"token function\">reg_read</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span> <span class=\"token class-name\">Arm64Const</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UC_ARM64_REG_X0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        nb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bk<span class=\"token punctuation\">.</span><span class=\"token function\">reg_read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arm64Const</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UC_ARM64_REG_FP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        nb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bk<span class=\"token punctuation\">.</span><span class=\"token function\">reg_read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arm64Const</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UC_ARM64_REG_LR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">return</span> nb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Number</span> <span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> reg<span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> regsaved<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xzr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">return</span> regsaved<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validBRPatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PatchBR</span> pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PatchBR</span> _pb <span class=\"token operator\">:</span> patch_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr <span class=\"token operator\">==</span> _pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token operator\">!=</span>_pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>errorno <span class=\"token operator\">=</span> error_type<span class=\"token punctuation\">.</span>conflict_br_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>error_info <span class=\"token operator\">=</span> <span class=\"token string\">\"[error]confict br jump type at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"type->\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>_pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token operator\">!=</span>_pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>errorno <span class=\"token operator\">=</span> error_type<span class=\"token punctuation\">.</span>conflict_b_jump_address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>error_info <span class=\"token operator\">=</span> <span class=\"token string\">\"[error]confict b jump address at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"addr->\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>_pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">readInt64</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Backend</span> bk<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> bk<span class=\"token punctuation\">.</span><span class=\"token function\">mem_read</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">long</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            res <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0</span>xffL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token function\">antibr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        instructions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        patch_list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        emulator <span class=\"token operator\">=</span> <span class=\"token class-name\">AndroidEmulatorBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">for64Bit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setProcessName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.test.antibr\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                <span class=\"token comment\">//.addBackendFactory(new Unicorn2Factory(true))</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建模拟器实例，要模拟 32 位或者 64 位，在这里区分</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Memory</span> memory <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟器的内存操作接口</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        memory<span class=\"token punctuation\">.</span><span class=\"token function\">setLibraryResolver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AndroidResolver</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置系统类库解析</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        vm <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">createDalvikVM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 Android 虚拟机</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        vm<span class=\"token punctuation\">.</span><span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置是否打印 Jni 调用细节</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token class-name\">DalvikModule</span> dm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unidbg-android/src/test/resources/test/libbdae.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加载 libttEncrypt.so 到 unicorn 虚拟内存，加载成功以后会默认调用 init_array 等函数</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> dm<span class=\"token punctuation\">.</span><span class=\"token function\">getModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token function\">code_walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        dm<span class=\"token punctuation\">.</span><span class=\"token function\">callJNI_OnLoad</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 手动执行 JNI_OnLoad 函数</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token function\">doPatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        antibr test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">antibr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        test<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">code_walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hook_add_new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CodeHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Backend</span> backend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> user<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>                <span class=\"token class-name\">Capstone</span> capstone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CS_ARCH_ARM64</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Capstone</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CS_MODE_ARM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mem_read</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>                <span class=\"token class-name\">Instruction</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> disasm <span class=\"token operator\">=</span> capstone<span class=\"token punctuation\">.</span><span class=\"token function\">disasm</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>                <span class=\"token class-name\">InsAndCtx</span> iac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InsAndCtx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>                iac<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span>disasm<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>                iac<span class=\"token punctuation\">.</span><span class=\"token function\">setRegs</span><span class=\"token punctuation\">(</span><span class=\"token function\">saveRegs</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>                iac<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                <span class=\"token comment\">// 可以当作一个队列去理解，当队列的大小超过 10 时，就删除队首的元素</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instructions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>                    instructions<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>                <span class=\"token comment\">// 向队列的队尾添加元素</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>                instructions<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>iac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>                <span class=\"token function\">do_processbr</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>                <span class=\"token comment\">//System.out.printf(\"%x:%s %s %s\\n\",address-module.base ,disasm[0].getMnemonic(),disasm[0].getOpStr(),disasm[0].getOperands());</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAttach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UnHook</span> unHook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token operator\">+</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>            <span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>inName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>            <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>            fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>            fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PatchBR</span> pb<span class=\"token operator\">:</span>patch_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>errorno<span class=\"token operator\">==</span>error_type<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PatchIns</span> pi<span class=\"token operator\">:</span>pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"procrss addr: 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> pi<span class=\"token punctuation\">.</span>addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",code: \"</span><span class=\"token operator\">+</span>pi<span class=\"token punctuation\">.</span><span class=\"token function\">getIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>                        <span class=\"token class-name\">Keystone</span> ks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keystone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeystoneArchitecture<span class=\"token punctuation\">.</span>Arm64</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeystoneMode<span class=\"token punctuation\">.</span>LittleEndian</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>                        <span class=\"token class-name\">KeystoneEncoded</span> assemble <span class=\"token operator\">=</span> ks<span class=\"token punctuation\">.</span><span class=\"token function\">assemble</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span><span class=\"token function\">getIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>pi<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>assemble<span class=\"token punctuation\">.</span><span class=\"token function\">getMachineCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>                            data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> pi<span class=\"token punctuation\">.</span>addr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> assemble<span class=\"token punctuation\">.</span><span class=\"token function\">getMachineCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error] unable to patch at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>error_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>            <span class=\"token class-name\">File</span> fo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>            <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>fo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>            fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>            fos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>            fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">do_processbr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Backend</span> backend<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token class-name\">InsAndCtx</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>ldr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>csel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>cmp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InsAndCtx</span><span class=\"token punctuation\">></span></span> others <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token class-name\">InsAndCtx</span> blr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token class-name\">InsAndCtx</span> iac <span class=\"token operator\">=</span> instructions<span class=\"token punctuation\">.</span><span class=\"token function\">peekLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"br\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            br <span class=\"token operator\">=</span> iac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            instructions<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instructions<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>                    iac <span class=\"token operator\">=</span> instructions<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>                    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ldr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ldr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>                            ldr <span class=\"token operator\">=</span> iac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>csel<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"csel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>                        csel <span class=\"token operator\">=</span> iac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmp<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> csel<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tst\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>                        cmp <span class=\"token operator\">=</span> iac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>                        others<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>iac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>                <span class=\"token comment\">//br 直接跳转</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>csel<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>                    <span class=\"token class-name\">PatchBR</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> br_type<span class=\"token punctuation\">.</span>direct_br<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>br_addr <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>                    <span class=\"token keyword\">long</span> pi1_addr <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>                    <span class=\"token class-name\">String</span> pi1_ins <span class=\"token operator\">=</span> <span class=\"token string\">\"b 0x\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>                    <span class=\"token class-name\">PatchIns</span> pi1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>                    pi1<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>pi1_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>                    pi1<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span>pi1_ins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">validBRPatch</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[info] find br jump at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>                        patch_list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>                    <span class=\"token comment\">//System.out.println(\"0x\"+Integer.toHexString((int)(pi1_addr)) +\"  \"+pi1_ins);</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>                <span class=\"token comment\">//csel br 间接跳转</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>                    <span class=\"token class-name\">PatchBR</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> br_type<span class=\"token punctuation\">.</span>indirect_br<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>br_addr <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>                    <span class=\"token comment\">//System.out.println(\"[debug] found cesl-br at 0x\"+Integer.toHexString((int)(pb.br_addr))+\" type:\"+pb.type);</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmp<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>                        <span class=\"token class-name\">PatchIns</span> pi1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>                        pi1<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>                        pi1<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>                        pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[warn] cmp/tst not found at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>                    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sp <span class=\"token operator\">=</span> csel<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>                    <span class=\"token class-name\">String</span> reg1 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>                    <span class=\"token class-name\">String</span> reg2 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>                    <span class=\"token class-name\">String</span> cond <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>                    <span class=\"token keyword\">long</span> branch1 <span class=\"token operator\">=</span> <span class=\"token function\">readInt64</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">,</span><span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">,</span>csel<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>                    <span class=\"token keyword\">long</span> branch2 <span class=\"token operator\">=</span> <span class=\"token function\">readInt64</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">,</span><span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">,</span>csel<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>                    <span class=\"token class-name\">PatchIns</span> pi2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>                    pi2<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>csel<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>                    pi2<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>                    pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ldr<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>                        <span class=\"token comment\">// 需要进行指令上移</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ldr<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>                            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InsAndCtx</span> _iac<span class=\"token operator\">:</span> others<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_iac<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span> ldr<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _iac<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>br<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>                                    <span class=\"token class-name\">PatchIns</span> _pi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>                                    _pi<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>_iac<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>                                    _pi<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span>_iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>                                    pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>_pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>                        <span class=\"token keyword\">long</span> current_br_jump_to <span class=\"token operator\">=</span> <span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>current_br_jump_to<span class=\"token operator\">==</span>branch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>current_br_jump_to<span class=\"token operator\">==</span>branch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error] wrong jump address at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>                        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>                            <span class=\"token class-name\">PatchIns</span> pi3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>                            pi3<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>                            pi3<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token operator\">+</span>cond<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 0x\"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>                            pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>                            pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>                            <span class=\"token class-name\">PatchIns</span> pi4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>                            pi4<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>                            pi4<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 0x\"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>branch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>                            pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>branch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>                            pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">validBRPatch</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[info] find br jump at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>                            patch_list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error] ldr not found at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre></pre></td></tr><tr><td data-num=\"385\"></td><td><pre></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre></pre></td></tr><tr><td data-num=\"388\"></td><td><pre></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>            instructions<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>        <span class=\"token comment\">//blr 直接跳转</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iac<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>            blr <span class=\"token operator\">=</span> iac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>            instructions<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>            <span class=\"token class-name\">PatchBR</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchBR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>            pb<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> br_type<span class=\"token punctuation\">.</span>direct_blr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>            pb<span class=\"token punctuation\">.</span>br_addr <span class=\"token operator\">=</span> blr<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>            <span class=\"token keyword\">long</span> pi1_addr <span class=\"token operator\">=</span> blr<span class=\"token punctuation\">.</span><span class=\"token function\">getAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>            <span class=\"token class-name\">String</span> pi1_ins <span class=\"token operator\">=</span> <span class=\"token string\">\"bl 0x\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>blr<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>blr<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>            pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>blr<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>blr<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>            <span class=\"token class-name\">PatchIns</span> pi1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatchIns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>            pi1<span class=\"token punctuation\">.</span><span class=\"token function\">setAddr</span><span class=\"token punctuation\">(</span>pi1_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>            pi1<span class=\"token punctuation\">.</span><span class=\"token function\">setIns</span><span class=\"token punctuation\">(</span>pi1_ins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>            pb<span class=\"token punctuation\">.</span>patchs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">validBRPatch</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre></pre></td></tr><tr><td data-num=\"416\"></td><td><pre></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>pb<span class=\"token punctuation\">.</span>br_jump_to<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>                    <span class=\"token keyword\">long</span> debug_addr <span class=\"token operator\">=</span> <span class=\"token function\">getRegValue</span><span class=\"token punctuation\">(</span>blr<span class=\"token punctuation\">.</span>ins<span class=\"token punctuation\">.</span><span class=\"token function\">getOpStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>blr<span class=\"token punctuation\">.</span><span class=\"token function\">getRegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>                    <span class=\"token class-name\">Module</span> module2 <span class=\"token operator\">=</span> emulator<span class=\"token punctuation\">.</span><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByAddress</span><span class=\"token punctuation\">(</span>debug_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>                    <span class=\"token class-name\">Symbol</span> symbol <span class=\"token operator\">=</span> module2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> module2<span class=\"token punctuation\">.</span><span class=\"token function\">findClosestSymbolByAddress</span><span class=\"token punctuation\">(</span>debug_addr<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>                    <span class=\"token class-name\">String</span> moduleName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>                        moduleName <span class=\"token operator\">=</span> module2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>                    <span class=\"token class-name\">String</span> symbolName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>                    <span class=\"token keyword\">long</span> symbolAddr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symbol <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>                        symbolName <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre>                        symbolAddr <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[symbol] resolve symbol ok: \"</span><span class=\"token operator\">+</span>moduleName<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>symbolName<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>symbolAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[info] find br jump at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>                        patch_list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[info] find br jump at 0x\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">.</span>br_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" type:\"</span><span class=\"token operator\">+</span>pb<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>                    patch_list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre></pre></td></tr><tr><td data-num=\"442\"></td><td><pre></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>            instructions<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre></pre></td></tr><tr><td data-num=\"447\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>        <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>emulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjc3MDg2Lmh0bQ==\">[原创] 记一次基于 unidbg 模拟执行的去除 ollvm 混淆</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTg5Nzk3NS0xLTEuaHRtbA==\">吾爱破解 2024 春节红包活动 WP (全，含 Android 高级题) </span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/dexguard-java-str-dec/",
            "url": "https://oacia.dev/dexguard-java-str-dec/",
            "title": "DexGuard java字符串反混淆",
            "date_published": "2024-09-03T10:14:21.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近分析的 app 发现加了 <code>DexGuard</code> , 所以在 java 层遇到了非常强力的字符串混淆，甚至 jeb 这么强大的 java 反混淆工具都不能把字符串解密出来，所以本文是对 java 字符串反混淆的过程记录，通过 frida 的 RPC 调用，利用 python flask 搭建一个主动调用 java 字符串解密函数的 GET 接口，随后编写 jeb 脚本访问这个本地端口，并传入字符串解密函数的参数，获取字符串解密后的结果后替换 Element, 实现基于 frida RPC 主动调用的 java 字符串的反混淆</p>\n<h1 id=\"神奇的防hook手段\"><a class=\"anchor\" href=\"#神奇的防hook手段\">#</a> 神奇的防 hook 手段</h1>\n<p><code>DexGuard</code>  有一个非常神奇的地方就是这个混淆的字符串解密函数竟然没有办法 hook 到返回值？！</p>\n<p>将核心的部分提取出来之后写个 demo, 其 Java 代码如下，逻辑很简单，就是在调用 <code>get_helloworld</code>  获取拼接的字符串之前，先定义了一个 <code>arr_object</code>  对象数组并作为参数传入 <code>get_helloworld</code>  中，随后在 <code>get_helloworld</code>  中经过一顿拼接操作，将最终的返回值赋值给传入参数中的 <code>arr_object</code> , 随后调用 <code> Toast.makeText</code>  打印拼接后的字符串</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get_helloworld</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> hello<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> world<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> ret_value <span class=\"token operator\">=</span> hello<span class=\"token operator\">+</span>world<span class=\"token operator\">+</span><span class=\"token string\">\"get!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arr_object<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ret_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr_object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">get_helloworld</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span>arr_object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>global_context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>arr_object<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LENGTH_SHORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过这种方式进行函数返回值的传递，被证实确实是可行的，我们看到弹窗弹出的内容也符合 <code>get_helloworld</code>  函数执行完后的预期</p>\n<p><img data-src=\"/dexguard-java-str-dec/image-20240903163315465.png\" alt=\"image-20240903163315465\" style=\"aspect-ratio:334 / 133;\"></p>\n<p>然而当我们尝试用的 frida 代码去 hook  <code>get_helloworld</code> , 想要读取通过对象数组传递的返回值之后却发现</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start hook'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.mytest.MainActivity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        app<span class=\"token punctuation\">.</span>get_helloworld<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span>arr_object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before call get_helloworld: str1='</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">,</span><span class=\"token string\">'str2='</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span><span class=\"token string\">'arr_object='</span><span class=\"token punctuation\">,</span>arr_object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_helloworld</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span>arr_object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after call get_helloworld:  str1='</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">,</span><span class=\"token string\">'str2='</span><span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span><span class=\"token string\">'arr_object='</span><span class=\"token punctuation\">,</span>arr_object<span class=\"token punctuation\">,</span><span class=\"token string\">',ret='</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>nothing happened… 打印调用原函数前后的 <code>arr_object</code> , 发现都是空值</p>\n<p><img data-src=\"/dexguard-java-str-dec/image-20240903163916328.png\" alt=\"image-20240903163916328\" style=\"aspect-ratio:1478 / 75;\"></p>\n<p>在这个地方纠结了好几天之后我就在想，究竟是什么原因导致 hook 这个对象的返回值失败了呢？难道是 frida 有 bug, 所以我就去看了 frida art hook 的源码和原理，感觉也没啥问题呀，还是说我的 frida 的打开方式有问题呢</p>\n<p>那来看看这个对象有哪些属性吧</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr_object has those properties->'</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>arr_object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/dexguard-java-str-dec/image-20240905224052091.png\" alt=\"image-20240905224052091\" style=\"aspect-ratio:1204 / 85;\"></p>\n<p>欸打印看看这个 <code>$w</code> , 没想到竟然可以成功的打印出 <code>Object</code>  来？！</p>\n<p><img data-src=\"/dexguard-java-str-dec/image-20240905230310808.png\" alt=\"image-20240905230310808\" style=\"aspect-ratio:1209 / 125;\"></p>\n<p>这个 <code>$w</code>  是什么东西，为什么 <code>arr_object</code>  用 <code>$w</code>  属性就可以拿到正确的对象，但是打印原始的 <code>arr_object</code>  却一直是空？</p>\n<p>进到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZyaWRhL2ZyaWRhLWphdmEtYnJpZGdl\"> frida-java-bridge</span> 里面去看看是什么情况</p>\n<p>首先找到 <code>$w</code>  定义的地方，这个 <code>this[Symbol.for('w')]</code>  是什么呢？</p>\n<p><img data-src=\"/dexguard-java-str-dec/image-20240905230602898.png\" alt=\"image-20240905230602898\" style=\"aspect-ratio:1012 / 536;\"></p>\n<p>向下翻翻源码后我们发现，没想到 <code>$w</code>  是 <code>classWrapper</code> , 拿到这个 <code>classWrapper</code>  之后才算是拿到了最初的值，amazing~</p>\n<p><img data-src=\"/dexguard-java-str-dec/image-20240905230659556.png\" alt=\"image-20240905230659556\" style=\"aspect-ratio:678 / 143;\"></p>\n<h1 id=\"frida-rpc调用\"><a class=\"anchor\" href=\"#frida-rpc调用\">#</a> frida RPC 调用</h1>\n<p>在字符串解密函数的返回值可以被成功的 hook 到之后，接下来我们便开始正式的字符串反混淆，这里需要用到 frida RPC 来主动调用字符串的解密函数，因为对于字符串混淆来说，不论解密的过程多么的复杂，我们只需要调用一下解密函数拿到解密后的结果就足够了</p>\n<p>frida 的 rpc 调用代码如下，需要注意的是函数传入的是什么类型的数组，我们在构造函数的入参的时候也要用 <code>Java.array</code>  转换成对应类型的数组</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">string_decrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">,</span>a3<span class=\"token punctuation\">,</span>a4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.test.Activity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            a1 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            a1 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>a1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a2<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            a2 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'char'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            a2 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'char'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>a2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        a4 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'byte'</span><span class=\"token punctuation\">,</span>a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">var</span> obj_cls <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Ljava.lang.Object;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ret <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ljava.lang.Object;'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        app<span class=\"token punctuation\">.</span><span class=\"token function\">bc</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">,</span>a3<span class=\"token punctuation\">,</span>a4<span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">var</span> objArr <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>$w<span class=\"token punctuation\">,</span> obj_cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">var</span> ArrayClz <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.reflect.Array\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> ArrayClz<span class=\"token punctuation\">.</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>objArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">!==</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ArrayClz<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>objArr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hook return value123->'</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>rpc<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 如果 js 导出函数中包含驼峰命名，则 python 需要将大写替换成_小写，如 getUser => get_user</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token literal-property property\">stringdecrypt</span><span class=\"token operator\">:</span>string_decrypt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同时因为 dexguard 是有 frida 检测的，一旦检测到 frida 进程就会闪退，所以我们可以在 frida 的检测点之前找个点去 hook, 例如可以 hook  <code>Activity</code>  的 <code>attachBaseContext</code> , 然后通过 <code>Thread.sleep(9999);</code>  让进程永久的暂停下去，虽然 Thread 已经 sleep 了，但是我们的 RPC 主动调用解密函数这个过程依然可以正常进行</p>\n<p><img data-src=\"/dexguard-java-str-dec/image-20240906132356027.png\" alt=\"image-20240906132356027\" style=\"aspect-ratio:1508 / 272;\"></p>\n<h1 id=\"flask搭个本地服务器\"><a class=\"anchor\" href=\"#flask搭个本地服务器\">#</a> flask 搭个本地服务器</h1>\n<p>接下来我们用 flask 去搭一个本地的接口，来让 jeb 脚本可以访问到啦，这里我使用的是 <code>flask</code> , 由于 flask 支持的是 <code>wsgi</code>  协议，而 <code>uvicorn</code>  只能用 <code>asgi</code>  协议，所以我们需要用 <code>asgiref</code>  中的 <code>WsgiToAsgi</code>  将 <code>asgi</code>  转换成 <code>wsgi</code> , 代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> codecs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> frida</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> asgiref<span class=\"token punctuation\">.</span>wsgi <span class=\"token keyword\">import</span> WsgiToAsgi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> uvicorn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">#print(message)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'send'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u\"[*] &#123;0&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>import_name<span class=\"token operator\">=</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>asgi_app <span class=\"token operator\">=</span> WsgiToAsgi<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>device <span class=\"token operator\">=</span> frida<span class=\"token punctuation\">.</span>get_device_manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add_remote_device<span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:1234\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>pkg <span class=\"token operator\">=</span> <span class=\"token string\">\"com.test.activ\"</span>  <span class=\"token comment\">#包名</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>pid <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pkg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>session <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">with</span> codecs<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./str_dec.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    source <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>script <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>create_script<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>script<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> onMessage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>script<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#注入脚本</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>device<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#这里得 sleep 1 秒，来让脚本加载完成</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>rpc <span class=\"token operator\">=</span> script<span class=\"token punctuation\">.</span>exports_sync</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 通过 methods 设置 GET 请求</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/strdec'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">json_request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 接收处理 json 数据请求</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'[*] receive </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    method <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"bc\"</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#处理函数名为 bc 的字符串加密函数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        argv1 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'argv1'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        argv2 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'argv2'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        argv3 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'argv3'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        argv4 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'argv4'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        result <span class=\"token operator\">=</span> rpc<span class=\"token punctuation\">.</span>stringDecrypt<span class=\"token punctuation\">(</span>argv1<span class=\"token punctuation\">,</span>argv2<span class=\"token punctuation\">,</span>argv3<span class=\"token punctuation\">,</span>argv4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>uvicorn<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>asgi_app<span class=\"token punctuation\">,</span>host<span class=\"token operator\">=</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"jeb-script反混淆\"><a class=\"anchor\" href=\"#jeb-script反混淆\">#</a> Jeb Script 反混淆</h1>\n<p>这里字符串混淆的代码和之前用过的差不多，只是字符串解密函数 <code>bc_decryptstring</code>  这里，需要注意用 jeb 自带的网络库 <code>Net().query</code>  和先前 flask 创建的接口交互，到了这里基于主动调用的字符串反混淆就基本上完成了</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding=utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> IScript<span class=\"token punctuation\">,</span> IconType<span class=\"token punctuation\">,</span> ButtonGroupType</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> RuntimeProjectUtil</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>java <span class=\"token keyword\">import</span> IJavaSourceUnit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>code <span class=\"token keyword\">import</span> ICodeUnit<span class=\"token punctuation\">,</span> ICodeItem</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> ITextDocument</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>java <span class=\"token keyword\">import</span> IJavaAssignment<span class=\"token punctuation\">,</span> IJavaSourceUnit<span class=\"token punctuation\">,</span> IJavaStaticField<span class=\"token punctuation\">,</span> IJavaNewArray<span class=\"token punctuation\">,</span> IJavaConstant<span class=\"token punctuation\">,</span> IJavaCall<span class=\"token punctuation\">,</span> IJavaField<span class=\"token punctuation\">,</span> IJavaMethod<span class=\"token punctuation\">,</span> IJavaClass</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>events <span class=\"token keyword\">import</span> JebEvent<span class=\"token punctuation\">,</span> J</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>util <span class=\"token keyword\">import</span> DecompilerHelper</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>net <span class=\"token keyword\">import</span> Net</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 解密字符串函数的类名以及方法名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>methodName <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Lcom/test/Activity;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bc'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">dec_str_test</span><span class=\"token punctuation\">(</span>IScript<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start deal with strings'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> ctx</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        engctx <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>getEnginesContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> engctx<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Back-end engines not initialized'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        projects <span class=\"token operator\">=</span> engctx<span class=\"token punctuation\">.</span>getProjects<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> projects<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There is no opened project'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        units <span class=\"token operator\">=</span> RuntimeProjectUtil<span class=\"token punctuation\">.</span>findUnitsByType<span class=\"token punctuation\">(</span>projects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IJavaSourceUnit<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> unit <span class=\"token keyword\">in</span> units<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            javaClass <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span>getClassElement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[+] decrypt:'</span> <span class=\"token operator\">+</span> javaClass<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            self<span class=\"token punctuation\">.</span>cstbuilder <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span>getFactories<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getConstantFactory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">#self.elebuilder = unit.getFactories().getElementFactory()</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            self<span class=\"token punctuation\">.</span>processClass<span class=\"token punctuation\">(</span>javaClass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            unit<span class=\"token punctuation\">.</span>notifyListeners<span class=\"token punctuation\">(</span>JebEvent<span class=\"token punctuation\">(</span>J<span class=\"token punctuation\">.</span>UnitChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">processClass</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> javaClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\"># if javaClass.getName() == methodName[0]:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">#     return</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> method <span class=\"token keyword\">in</span> javaClass<span class=\"token punctuation\">.</span>getMethods<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            block <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span>getBody<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> block<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                stm <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                self<span class=\"token punctuation\">.</span>checkElement<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> stm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">checkElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> IJavaCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                mmethod <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>getMethod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                mname <span class=\"token operator\">=</span> mmethod<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                msig <span class=\"token operator\">=</span> mmethod<span class=\"token punctuation\">.</span>getSignature<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">if</span> mname <span class=\"token operator\">==</span> methodName<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> methodName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> msig<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    args <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>getArguments<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    decstr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bc_decryptstring<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">if</span> decstr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decrypt bc->\"</span><span class=\"token punctuation\">,</span>decstr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        parent<span class=\"token punctuation\">.</span>replaceSubElement<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>cstbuilder<span class=\"token punctuation\">.</span>createString<span class=\"token punctuation\">(</span>decstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">for</span> subelt <span class=\"token keyword\">in</span> e<span class=\"token punctuation\">.</span>getSubElements<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>subelt<span class=\"token punctuation\">,</span> IJavaClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>subelt<span class=\"token punctuation\">,</span> IJavaField<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>subelt<span class=\"token punctuation\">,</span> IJavaMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                self<span class=\"token punctuation\">.</span>checkElement<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> subelt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">read_array</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">.</span>getType<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>getInitialValues<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>getByte<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">bc_decryptstring</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args1<span class=\"token punctuation\">,</span>args2<span class=\"token punctuation\">,</span>args3<span class=\"token punctuation\">,</span>args4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        argv1<span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>read_array<span class=\"token punctuation\">(</span>args1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        argv2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>read_array<span class=\"token punctuation\">(</span>args2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        argv3 <span class=\"token operator\">=</span> args3<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        argv4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>read_array<span class=\"token punctuation\">(</span>args4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token string\">'method'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'bc'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token string\">'argv1'</span><span class=\"token punctuation\">:</span>argv1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token string\">'argv2'</span><span class=\"token punctuation\">:</span>argv2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token string\">'argv3'</span><span class=\"token punctuation\">:</span>argv3<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token string\">'argv4'</span><span class=\"token punctuation\">:</span>argv4</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        r <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:8080/strdec\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> r</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://oacia.dev/douyin-6shen-init/",
            "url": "https://oacia.dev/douyin-6shen-init/",
            "title": "初探抖音六神之字符串解密算法分析",
            "date_published": "2024-08-20T13:52:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>抖音六神算法，一听这名字就超 cooool 的，正好最近也没有什么别的事情，于是就趁着周末来逆一逆抖音 APP, 在分析六神算法的过程中，它的 java 层的字符串加密算法我感觉很有意思，于是就写了这篇文章来记录一下～</p>\n<p>本文所分析的抖音版本为 <code>300600</code></p>\n<h1 id=\"ssl-pinning绕过\"><a class=\"anchor\" href=\"#ssl-pinning绕过\">#</a> ssl pinning 绕过</h1>\n<p>打开 app 之后用 repable 抓包，抖音直接显示无网络，所以想都不用想，肯定是有 ssl pinning，但是常规的过 ssl pinning 的代码没有用，因为抖音和其他 app 不一样，它的 ssl 校验是在 native 层的</p>\n<p>hook apk 打开的 so 库，一般网络库的加载都是在最前面的，在 <code>libsscronet.so</code>  找到 ssl 相关的函数</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240801003621820.png\" alt=\"image-20240801003621820\" style=\"aspect-ratio:2066 / 1065;\"></p>\n<p>这一块应该是在 so 中用自定义的函数去进行 ssl 的验证</p>\n<p>搜索字符串发现有很多 <code>certificate</code> , 那大概率就是在这个 so 里面进行 <code>ssl pinning</code>  的</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240801004717078.png\" alt=\"image-20240801004717078\" style=\"aspect-ratio:1149 / 949;\"></p>\n<p>看了一下导入函数，感觉 <code>SSL_CTX_set_custom_verify</code>  有点像校验的样子</p>\n<blockquote>\n<p>SSL_CTX_set_custom_verify 证书校验异步操作，<strong>相比 OpenSSL，BoringSSL 单独将认证证书的流程拿出来从而提供更详细的认证控制</strong></p>\n</blockquote>\n<p><img data-src=\"/douyin-6shen-init/image-20240801004045357.png\" alt=\"image-20240801004045357\" style=\"aspect-ratio:906 / 880;\"></p>\n<p>再细看一下这个函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SSL_CTX_set_custom_verify</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SSL_CTX <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ssl_verify_result_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SSL <span class=\"token operator\">*</span>ssl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>out_alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ctx<span class=\"token operator\">-></span>verify_mode <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ctx<span class=\"token operator\">-></span>custom_verify_callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中的 mode 用来验证客户端，mode 的值为 1 进行验证，但是如果取 0 就是不验证</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// SSL_VERIFY_NONE, on a client, verifies the server certificate but does not</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// make errors fatal. The result may be checked with |SSL_get_verify_result|. On</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// a server it does not request a client certificate. This is the default.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SSL_VERIFY_NONE</span> <span class=\"token expression\"><span class=\"token number\">0x00</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// SSL_VERIFY_PEER, on a client, makes server certificate errors fatal. On a</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// server it requests a client certificate and makes errors fatal. However,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// anonymous clients are still allowed. See</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// |SSL_VERIFY_FAIL_IF_NO_PEER_CERT|.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SSL_VERIFY_PEER</span> <span class=\"token expression\"><span class=\"token number\">0x01</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// SSL_VERIFY_FAIL_IF_NO_PEER_CERT configures a server to reject connections if</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// the client declines to send a certificate. This flag must be used together</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// with |SSL_VERIFY_PEER|, otherwise it won't work.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SSL_VERIFY_FAIL_IF_NO_PEER_CERT</span> <span class=\"token expression\"><span class=\"token number\">0x02</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// SSL_VERIFY_PEER_IF_NO_OBC configures a server to request a client certificate</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// if and only if Channel ID is not negotiated.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SSL_VERIFY_PEER_IF_NO_OBC</span> <span class=\"token expression\"><span class=\"token number\">0x04</span></span></span></pre></td></tr></table></figure><p>所以我们可以直接用 frida patch 第二个参数的值为 0</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dlopen</span><span class=\"token punctuation\">(</span>soName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token comment\">//console.log('load ',path);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>soName<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token function\">ssl_bypass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">//do your own code</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ssl_bypass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">let</span> SSL_CTX_set_custom_verify <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">getExportByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libsscronet.so'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SSL_CTX_set_custom_verify'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start hook SSL_CTX_set_custom_verify'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SSL_CTX_set_custom_verify <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>SSL_CTX_set_custom_verify<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SSL_CTX_set_custom_verify mode: '</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'patch mode from 1 to 0 to bypass ssl'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//frida -H 127.0.0.1:1234 -l .\\douyin\\hook.js -f com.ss.android.ugc.aweme</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_dlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"libsscronet.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>抓到包啦</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240801010106216.png\" alt=\"image-20240801010106216\" style=\"aspect-ratio:3840 / 2159;\"></p>\n<p>在请求头中出现的六个 <code>x-</code>  带头的参数就是六神算法</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818142610556.png\" alt=\"image-20240818142610556\" style=\"aspect-ratio:161 / 336;\"></p>\n<h1 id=\"定位参数位置\"><a class=\"anchor\" href=\"#定位参数位置\">#</a> 定位参数位置</h1>\n<p>接下来就是去定位这些参数的位置咯，该怎么定位呢？</p>\n<p>其实很简单，按照正向安全开发的经验来说，对于大型的 APP, 这种关键参数所涉及的算法基本上是不可能在 java 层中出现的，他们通常极大概率是把加密算法下沉到 native 层中去调用，所以说，我们就只需要找 so 就可以啦，而这种含有关键算法的 so 一般都有一个共性，就是 so 中不会出现静态注册的 java 方法，并且 so 被混淆的非常滴厉害，各种花指令寄存器跳转啥的通通来一遍让我们一打开 IDA 反编译连伪代码都看不了，找到这类 so，那就离关键算法不远了，而其他无关紧要的 so 基本不会做防护，要是也加上高强度的混淆，可能会出 bug 不说，还会拖慢 APP 启动速度影响用户体验</p>\n<p>而小型的 APP, 由于很少会在安全上花功夫，所以说我们在 java 层中搜索参数名称，一般就可以找到参数所在的位置了</p>\n<p>而在之前我们已经知道进行 <code>ssl pinning</code>  的 so 库的名称是 <code>libsscronet.so</code> , 那对参数进行加密的 so 库一般就在网络库的附近加载，感觉 <code>libmetasec_ml.so</code>  这个 so 挺像的</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818142932419.png\" alt=\"image-20240818142932419\" style=\"aspect-ratio:2357 / 528;\"></p>\n<p>一用 IDA 反编译 so 之后引入眼帘的就是让人感到亲切的 <code>BR</code>  寄存器跳转！</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818143106335.png\" alt=\"image-20240818143106335\" style=\"aspect-ratio:1096 / 297;\"></p>\n<p>接下来看看这个 so 动态注册了什么方法咯</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getModuleInfoByPtr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnPtr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> modules <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">var</span> modname <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      base <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  modules<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>base <span class=\"token operator\">&lt;=</span> fnPtr <span class=\"token operator\">&amp;&amp;</span> fnPtr<span class=\"token punctuation\">.</span><span class=\"token function\">toInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> mod<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">toInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      modname <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      base <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>modname<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_registNatives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">var</span> env <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">getEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">var</span> handlePointer <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">.</span><span class=\"token function\">readPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle: \"</span> <span class=\"token operator\">+</span> handlePointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">var</span> nativePointer <span class=\"token operator\">=</span> handlePointer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">215</span> <span class=\"token operator\">*</span> Process<span class=\"token punctuation\">.</span>pointerSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"register: \"</span> <span class=\"token operator\">+</span> nativePointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   typedef struct &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      const char* name;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      const char* signature;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      void* fnPtr;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   &#125; JNINativeMethod;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   jint RegisterNatives(JNIEnv* env, jclass clazz, const JNINativeMethod* methods, jint nMethods)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>nativePointer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">var</span> env <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">getEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">var</span> p_size <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span>pointerSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">var</span> methods <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">var</span> methodcount <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==== class: \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" ====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==== methods: \"</span> <span class=\"token operator\">+</span> methods <span class=\"token operator\">+</span> <span class=\"token string\">\" nMethods: \"</span> <span class=\"token operator\">+</span> methodcount <span class=\"token operator\">+</span> <span class=\"token string\">\" ====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> methodcount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">var</span> idx <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> p_size <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">var</span> fnPtr <span class=\"token operator\">=</span> methods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> p_size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">var</span> infoArr <span class=\"token operator\">=</span> <span class=\"token function\">getModuleInfoByPtr</span><span class=\"token punctuation\">(</span>fnPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">var</span> modulename <span class=\"token operator\">=</span> infoArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">var</span> modulebase <span class=\"token operator\">=</span> infoArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">var</span> logstr <span class=\"token operator\">=</span> <span class=\"token string\">\"name: \"</span> <span class=\"token operator\">+</span> methods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", signature: \"</span> <span class=\"token operator\">+</span> methods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> p_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", fnPtr: \"</span> <span class=\"token operator\">+</span> fnPtr <span class=\"token operator\">+</span> <span class=\"token string\">\", modulename: \"</span> <span class=\"token operator\">+</span> modulename <span class=\"token operator\">+</span> <span class=\"token string\">\" -> base: \"</span> <span class=\"token operator\">+</span> modulebase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> modulebase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          logstr <span class=\"token operator\">+=</span> <span class=\"token string\">\", offset: \"</span> <span class=\"token operator\">+</span> fnPtr<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>modulebase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里注册了 <code>ms.bd.c.l.a</code> , 它的方法签名是 <code>(IIJLjava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;</code> , 并且在 so 中的偏移是 <code>0x126e30</code></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818143547405.png\" alt=\"image-20240818143547405\" style=\"aspect-ratio:1885 / 161;\"></p>\n<p>直接对偏移 <code>0x126e30</code>  的传入传出参数进行 hook, 发现就是六神算法的生成位置～</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818144352514.png\" alt=\"image-20240818144352514\" style=\"aspect-ratio:2442 / 744;\"></p>\n<p>而在对 <code>ms.bd.c.l.a</code>  进行交叉引用后发现，这个 native 函数还有一个字符串加密的功能如图所示，通过调用 <code>l.a</code>  函数，并传入 code 为 <code>0x1000001</code>  来实现 java 层的字符串加密，接下来我们来对这个字符串加密算法进行更加深入的研究</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818162150793.png\" alt=\"image-20240818162150793\" style=\"aspect-ratio:1607 / 151;\"></p>\n<h1 id=\"libmetasec_mlso反混淆\"><a class=\"anchor\" href=\"#libmetasec_mlso反混淆\">#</a> libmetasec_ml.so 反混淆</h1>\n<p>这个 so 的花指令主要有五类 (其实还有一类是 <code>CSEL-BR</code>  寄存器跳转混淆，但是由于字符串解密算法不涉及 <code>CSEL-BR</code>  混淆，所以此处没有给出相关的示例)</p>\n<ol>\n<li>\n<p><code>BL-BR</code>  寄存器跳转<br>\n这个寄存器跳转简单读一下汇编就可以很清楚的知道是怎么实现的啦，主要是通过一个函数获取到了当前 BL 指令下一行的内存地址，然后通过加上一个偏移使用 BR 寄存器跳转的形式跳过去，所以我们只要把中间越过的指令直接 NOP 掉就好啦</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240817210246836.png\" alt=\"image-20240817210246836\" style=\"aspect-ratio:2300 / 1313;\"></p>\n</li>\n<li>\n<p><code>B.GT-CBNZ</code>  垃圾指令<br>\n这里出现了一大段 IDA 无法解析的指令</p>\n</li>\n</ol>\n<p><img data-src=\"/douyin-6shen-init/image-20240805011945451.png\" alt=\"image-20240805011945451\" style=\"aspect-ratio:1783 / 1132;\"></p>\n<p>其实对于此处的汇编来说，它执行后最终的值是固定的</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MOV             W8, <span class=\"token comment\">#0x1B5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MOV             W9, <span class=\"token comment\">#0x16F</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>STR             W8, <span class=\"token punctuation\">[</span>SP,<span class=\"token comment\">#0x4C]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>STR             W9, <span class=\"token punctuation\">[</span>SP,<span class=\"token comment\">#0x48]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LDR             W8, <span class=\"token punctuation\">[</span>SP,<span class=\"token comment\">#0x4C]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LDR             W9, <span class=\"token punctuation\">[</span>SP,<span class=\"token comment\">#0x48]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CMP             W9, <span class=\"token comment\">#0x4C ; 'L'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>B.GT          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MOV             W9, <span class=\"token comment\">#1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>MADD            W8, W8, W8, W9</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>MOV             W9, <span class=\"token comment\">#7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>UDIV            W9, W8, W9</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SUB             W9, W9, W9,LSL<span class=\"token comment\">#3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ADD             W8, W8, W9</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CBNZ            W8, loc_55318</pre></td></tr></table></figure><p>我们可以使用 unicorn 将这段汇编运行一下看看具体的值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># code for test-fla.elf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> unicorn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> unicorn<span class=\"token punctuation\">.</span>arm64_const <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> keystone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># pip install keystone-engine</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> capstone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># pip install capstone</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>BASE <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CODE <span class=\"token operator\">=</span> BASE <span class=\"token operator\">+</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CODE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x100000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>STACK <span class=\"token operator\">=</span> <span class=\"token number\">0x7F00000000</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>STACK_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x100000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>FS <span class=\"token operator\">=</span> <span class=\"token number\">0x7FF0000000</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>FS_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x100000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ks <span class=\"token operator\">=</span> Ks<span class=\"token punctuation\">(</span>KS_ARCH_ARM64<span class=\"token punctuation\">,</span> KS_MODE_LITTLE_ENDIAN<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 汇编引擎</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>uc <span class=\"token operator\">=</span> Uc<span class=\"token punctuation\">(</span>UC_ARCH_ARM64<span class=\"token punctuation\">,</span> UC_MODE_LITTLE_ENDIAN<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 模拟执行引擎</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cs <span class=\"token operator\">=</span> Cs<span class=\"token punctuation\">(</span>CS_ARCH_ARM64<span class=\"token punctuation\">,</span> CS_MODE_LITTLE_ENDIAN<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 反汇编引擎</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hook_code</span><span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">:</span> unicorn<span class=\"token punctuation\">.</span>Uc<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> user_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># print(hex(address))</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> cs<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>CODE_DATA<span class=\"token punctuation\">[</span>address <span class=\"token operator\">-</span> BASE<span class=\"token punctuation\">:</span>address <span class=\"token operator\">-</span> BASE <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\"># arm 架构是 NZCV 寄存器，32 位的寄存器最左边开始的四位依次存储 N,Z,C,V 标志</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ZF_flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_ARM64_REG_NZCV<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"b.gt\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"0x</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>mnemonic<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> ; ZF = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ZF_flag<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            uc<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_ARM64_REG_PC<span class=\"token punctuation\">,</span> address <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">elif</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            w9 <span class=\"token operator\">=</span> uc<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_ARM64_REG_W9<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"0x</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>mnemonic<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> ; ZF = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ZF_flag<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, w9 = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>w9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">elif</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"cbnz\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            w8 <span class=\"token operator\">=</span> uc<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_ARM64_REG_W8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"0x</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>mnemonic<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> ; ZF = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ZF_flag<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, w8 = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>w8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            uc<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_ARM64_REG_PC<span class=\"token punctuation\">,</span> address <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"0x</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>mnemonic<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> ; ZF = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ZF_flag<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hook_mem_access</span><span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">:</span> unicorn<span class=\"token punctuation\">.</span>Uc<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    pc <span class=\"token operator\">=</span> uc<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_ARM64_REG_PC<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># UC_ARM64_REG_PC</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pc:%x type:%d addr:%x size:%x'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># uc.emu_stop()</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inituc</span><span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>mem_map<span class=\"token punctuation\">(</span>CODE<span class=\"token punctuation\">,</span> CODE_SIZE<span class=\"token punctuation\">,</span> UC_PROT_ALL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>mem_map<span class=\"token punctuation\">(</span>STACK<span class=\"token punctuation\">,</span> STACK_SIZE<span class=\"token punctuation\">,</span> UC_PROT_ALL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>mem_write<span class=\"token punctuation\">(</span>CODE<span class=\"token punctuation\">,</span> CODE_DATA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_ARM64_REG_SP<span class=\"token punctuation\">,</span> STACK <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_CODE<span class=\"token punctuation\">,</span> hook_code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_MEM_UNMAPPED <span class=\"token operator\">|</span> UC_HOOK_INTR<span class=\"token punctuation\">,</span> hook_mem_access<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>shellcode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>MOV W8, #0x1B5</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>MOV W9, #0x16F</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>STR W8, [SP,#0x4C]</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>STR W9, [SP,#0x48]</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>LDR W8, [SP,#0x4C]</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>LDR W9, [SP,#0x48]</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>CMP W9, #0x4C</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>B.GT #0x55318</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>MOV W9, #1</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>MADD W8, W8, W8, W9</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>MOV W9, #7</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>UDIV W9, W8, W9</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>SUB W9, W9, W9,LSL#3</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>ADD W8, W8, W9</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>CBNZ W8, #0x55318</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>CODE_DATA<span class=\"token punctuation\">,</span>count <span class=\"token operator\">=</span> ks<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>CODE_DATA <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>CODE_DATA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>inituc<span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>emu_start<span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>CODE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下，可以发现 <code>cmp w9, #0x4c</code>  将 ZF 标志位置为 1, <code> b.gt</code>  大于跳转永远成立， <code>cbnz</code>  跳转也永远成立，也就是不管怎么样，最终都会越过中间这段无用的指令，而跳转到 <code>0x55318</code>  的位置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0x0: mov w8, <span class=\"token comment\">#0x1b5 ; ZF = 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0x4: mov w9, <span class=\"token comment\">#0x16f ; ZF = 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0x8: str w8, <span class=\"token punctuation\">[</span>sp, <span class=\"token comment\">#0x4c] ; ZF = 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0x12: str w9, <span class=\"token punctuation\">[</span>sp, <span class=\"token comment\">#0x48] ; ZF = 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0x16: ldr w8, <span class=\"token punctuation\">[</span>sp, <span class=\"token comment\">#0x4c] ; ZF = 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>0x20: ldr w9, <span class=\"token punctuation\">[</span>sp, <span class=\"token comment\">#0x48] ; ZF = 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>0x24: <span class=\"token function\">cmp</span> w9, <span class=\"token comment\">#0x4c ; ZF = 1, w9 = 0x16f</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>0x28: b.gt <span class=\"token comment\">#0x55318 ; ZF = 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>0x32: mov w9, <span class=\"token comment\">#1 ; ZF = 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>0x36: madd w8, w8, w8, w9 <span class=\"token punctuation\">;</span> ZF <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>0x40: mov w9, <span class=\"token comment\">#7 ; ZF = 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>0x44: udiv w9, w8, w9 <span class=\"token punctuation\">;</span> ZF <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>0x48: sub w9, w9, w9, lsl <span class=\"token comment\">#3 ; ZF = 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>0x52: <span class=\"token function\">add</span> w8, w8, w9 <span class=\"token punctuation\">;</span> ZF <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>0x56: cbnz w8, <span class=\"token comment\">#0x55318 ; ZF = 0, w8 = 0x3</span></pre></td></tr></table></figure><p>所以对于这种 ida 无法识别的无用指令，我们直接 nop 掉即可</p>\n<ol start=\"3\">\n<li><code>F1 F6 77 FF 1F 20 03 D5 1F 20 03 D5 1F 20 03 D5</code> , 这个花指令主要是用来进行 so 完整性校验的，但是我们主要是进行静态分析，所以对于影响我们看汇编的指令，直接 nop 掉</li>\n</ol>\n<p><img data-src=\"/douyin-6shen-init/image-20240805010232627.png\" alt=\"image-20240805010232627\" style=\"aspect-ratio:1265 / 545;\"></p>\n<ol start=\"4\">\n<li><code>EB FF 1F D6 01 00 00 D4</code> , 这个被 ida 解析成了 svc 调用，实际上看看上下文根本没有给 x8 赋值的语句，所以这八字节也是花指令</li>\n</ol>\n<p><img data-src=\"/douyin-6shen-init/image-20240805010341218.png\" alt=\"image-20240805010341218\" style=\"aspect-ratio:1211 / 431;\"></p>\n<ol start=\"5\">\n<li><code>01 00 00 D4 DE 01 70 47</code> , 同样的，这里出现的 svc 也不是真的 svc, 是花指令，直接 patch 掉就好啦</li>\n</ol>\n<p><img data-src=\"/douyin-6shen-init/image-20240805010451682.png\" alt=\"image-20240805010451682\" style=\"aspect-ratio:1284 / 339;\"></p>\n<p>所以最终的去花代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ida_segment</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> idautils</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> keystone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">patch_nop</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># arm64 中的 NOP 指令是 b'\\x1F\\x20\\x03\\xD5'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> end <span class=\"token operator\">></span> begin<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ida_bytes<span class=\"token punctuation\">.</span>patch_bytes<span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\x1F\\x20\\x03\\xD5'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        begin <span class=\"token operator\">=</span> begin <span class=\"token operator\">+</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 获取 text 段的起始地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>text_seg <span class=\"token operator\">=</span> ida_segment<span class=\"token punctuation\">.</span>get_segm_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">\".text\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> text_seg<span class=\"token punctuation\">.</span>start_ea<span class=\"token punctuation\">,</span> text_seg<span class=\"token punctuation\">.</span>end_ea</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#start,end = 0x533A4,0x533E0#BL-BR 结构寄存器跳转单个情况测试</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#start,end = 0x55288,0x55318#B.GT-CBNZ 跳转 垃圾指令测试</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#start,end = 0x94048,0x94070#B.GT-CBNZ 跳转 垃圾指令测试 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#去除花指令</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>pattern <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"01 00 00 D4 DE 01 70 47\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           <span class=\"token string\">\"EB FF 1F D6 01 00 00 D4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>           <span class=\"token string\">\"F1 F6 77 FF 1F 20 03 D5 1F 20 03 D5 1F 20 03 D5\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cur_addr <span class=\"token operator\">=</span> start</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    end_addr <span class=\"token operator\">=</span> end</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">while</span> cur_addr <span class=\"token operator\">&lt;</span> end_addr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cur_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>find_binary<span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">,</span> idc<span class=\"token punctuation\">.</span>SEARCH_DOWN<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> cur_addr <span class=\"token operator\">==</span> idc<span class=\"token punctuation\">.</span>BADADDR<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"patch flower code: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打印提示信息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">#patch_nop(cur_addr, cur_addr + len(pattern[i].split(' ')))</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cur_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>current_addr <span class=\"token operator\">=</span> start</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">while</span> current_addr <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># BL-BR 结构寄存器跳转</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"BR\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        BR_addr <span class=\"token operator\">=</span> current_addr</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        BL_addr<span class=\"token punctuation\">,</span>nop_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        temp_addr <span class=\"token operator\">=</span> current_addr</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"BL\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                BL_addr <span class=\"token operator\">=</span> temp_addr</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">elif</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"ADD\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                nop_count <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>get_operand_value<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            temp_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>prev_head<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> BL_addr <span class=\"token keyword\">and</span> nop_count<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"patch BL-BR from </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>BL_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>BL_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>nop_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            patch_nop<span class=\"token punctuation\">(</span>BL_addr<span class=\"token punctuation\">,</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>BL_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nop_count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">#B.GT-CBNZ 跳转</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">elif</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"CBNZ\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        CBNZ_addr <span class=\"token operator\">=</span> current_addr</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        CBNZ_jmp_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>get_operand_value<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        BGT_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        temp_addr <span class=\"token operator\">=</span> current_addr</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"B.GT\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                BGT_jmp_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>get_operand_value<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">if</span> CBNZ_jmp_addr<span class=\"token operator\">==</span>BGT_jmp_addr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"patch B.GT-CBNZ junk code from </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>CBNZ_addr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>CBNZ_jmp_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    patch_nop<span class=\"token punctuation\">(</span>CBNZ_addr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> CBNZ_jmp_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            temp_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>prev_head<span class=\"token punctuation\">(</span>temp_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    current_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"自加载libmetasec_mlso\"><a class=\"anchor\" href=\"#自加载libmetasec_mlso\">#</a> 自加载 libmetasec_ml.so</h1>\n<p>为了防止其他的 so 对我们的干扰，所以可以写个 demo 加载这个 so，但一加载这个 so 的时候程序就崩溃了并留下了下面这一串报错，既然调用了这个类 <code>com.bytedance.mobsec.metasec.ml.MS</code> ，那肯定和算法有些许的联系</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240814001314102.png\" alt=\"image-20240814001314102\" style=\"aspect-ratio:3181 / 451;\"></p>\n<p>而这个 <code>MS</code>  类，他继承了 <code>e0</code>  类</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240814001439387.png\" alt=\"image-20240814001439387\" style=\"aspect-ratio:655 / 253;\"></p>\n<p>而这个 e0 类，他又继承了 <code>ms.bd.c.l</code>  这个类，这个类就是 <code>libmetasec_ml.so</code>  唯一动态注册的函数 <code>a</code>  所在的类，在 <code>e0</code>  中，又定义了四个函数，但是他们的函数竟然啥内容都没有</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">ms<span class=\"token punctuation\">.</span>bd<span class=\"token punctuation\">.</span>c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bytedance<span class=\"token punctuation\">.</span>covode<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Covode</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> e0 <span class=\"token keyword\">extends</span> l <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Covode</span><span class=\"token punctuation\">.</span><span class=\"token function\">recordClassIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1018605</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Bill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">strictfp</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Francies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Louis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Zeoy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把缺少的类补上去之后，随便调用一个字符串加密的函数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TAG</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1000001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d8044a\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>没想到竟然输出了乱码</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240814211204858.png\" alt=\"image-20240814211204858\" style=\"aspect-ratio:357 / 39;\"></p>\n<p>为什么调用本来的字符串加密算法不能正常输出解密之后的字符串呢？</p>\n<p>我思考了一下有以下几种可能的情况存在</p>\n<ol>\n<li>包名 / 签名校验：然而我 hook 了一圈都没找到相关的函数，包名改成和抖音一样的还是不行</li>\n<li>异常环境检测：但是我放到正常的手机上，log 输出的还是同样的结果</li>\n<li>检查 / 读取特定的文件：难道是检查 app 私有目录下有没有特定的文件，如果有特定的文件，就给解密的算法赋值正确的密钥？</li>\n<li>利用 binder 或者 socket 和其他的进程通讯来获取初始密钥？</li>\n</ol>\n<p>下面是我对第三种情况读取文件的排查过程，因为考虑到最安全的调用系统函数的方式是 svc 调用</p>\n<h2 id=\"svc调用\"><a class=\"anchor\" href=\"#svc调用\">#</a> SVC 调用</h2>\n<p>svc 的各个 code 对应的含义可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcy5hbmRyb2lkLmNvbS9hbmRyb2lkL3BsYXRmb3JtL3N1cGVycHJvamVjdC8rL21hc3RlcjpiaW9uaWMvbGliYy9rZXJuZWwvdWFwaS9hc20tZ2VuZXJpYy91bmlzdGQuaA==\">此处</span>找到</p>\n<p>ida 搜索 svc 特征汇编 <code>01 00 00 D4</code>  找到如下位置，在 <code>sub_13E274</code>  中</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240815220549586.png\" alt=\"image-20240815220549586\" style=\"aspect-ratio:2063 / 858;\"></p>\n<p>对这个函数 hook 一下</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_svc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libmetasec_ml.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x13E274</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hook svc code->'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x8<span class=\"token punctuation\">.</span><span class=\"token function\">toInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是却崩溃了？</p>\n<p>用 frida 打个内存读写的断点看看</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">memory_read_hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libmetasec_ml.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    MemoryAccessMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x13E274</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span><span class=\"token number\">48</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token function-variable function\">onAccess</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>operation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_addr_in_so</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get_addr_in_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">var</span> process_Obj_Module_Arr <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> process_Obj_Module_Arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">></span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">&amp;&amp;</span> addr<span class=\"token operator\">&lt;</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" is in \"</span><span class=\"token operator\">+</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" offset: 0x\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">-</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是我们需要在对 svc 的 hook 完成之后，延迟三秒在打内存读写断点</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240815230204317.png\" alt=\"image-20240815230204317\" style=\"aspect-ratio:412 / 126;\"></p>\n<p>frida 打印出了如下日志随后进程退出</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240815230400591.png\" alt=\"image-20240815230400591\" style=\"aspect-ratio:921 / 79;\"></p>\n<p>跳转到 <code>0x13e030</code>  看看，看来是对 svc 函数的完整性做了校验来防 hook</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240815230857961.png\" alt=\"image-20240815230857961\" style=\"aspect-ratio:1548 / 625;\"></p>\n<p>那就对这个函数进行 hook 把校验的值强制改成 <code>0x312768B</code> , 没想到又崩溃了，但是打印的地址还是和先前相同，因为 frida  <code>MemoryAccessMonitor</code>  自身的限制，只在第一次访问内存页的时候产生回调，后续的访问就不显示了，这个特性在 frida 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mcmlkYS5yZS9kb2NzL2phdmFzY3JpcHQtYXBpLyNtZW1vcnlhY2Nlc3Ntb25pdG9y\">官方文档</span>中有所提及</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816200219287.png\" alt=\"image-20240816200219287\" style=\"aspect-ratio:1088 / 408;\"></p>\n<p>接下来考虑打个硬件断点看看</p>\n<details class=\"info\"><summary>stackplz 打硬件断点</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./stackplz <span class=\"token parameter variable\">--rpc</span> <span class=\"token parameter variable\">--stack</span></pre></td></tr></table></figure><p>hook 代码如下</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>msg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">SetHWBrk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brk_addr<span class=\"token punctuation\">,</span> brk_type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> size_len <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> brk_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// brk_pid: Process.id,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token literal-property property\">brk_pid</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token literal-property property\">brk_len</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token literal-property property\">brk_type</span><span class=\"token operator\">:</span> brk_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token literal-property property\">brk_addr</span><span class=\"token operator\">:</span> brk_addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// open conn</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SetHWBrk] open conn</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// stackplz --rpc-path</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Socket<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ipv4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">41718</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">let</span> payload <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>brk_options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">brk_options -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>payload<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">let</span> msg_len <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// send payload size</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">let</span> size_buffer <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span>size_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        size_buffer<span class=\"token punctuation\">.</span><span class=\"token function\">writeU32</span><span class=\"token punctuation\">(</span>msg_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">await</span> conn<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">writeAll</span><span class=\"token punctuation\">(</span>size_buffer<span class=\"token punctuation\">.</span><span class=\"token function\">readByteArray</span><span class=\"token punctuation\">(</span>size_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// send payload</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">let</span> payload_buffer <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        payload_buffer<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8String</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">await</span> conn<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">writeAll</span><span class=\"token punctuation\">(</span>payload_buffer<span class=\"token punctuation\">.</span><span class=\"token function\">readByteArray</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// try read resp size</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">let</span> resp_size_buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> conn<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span>size_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">let</span> resp_size <span class=\"token operator\">=</span> resp_size_buffer<span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readU32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">let</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> conn<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span>resp_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">resp -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// close conn</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">await</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SetHWBrk] error </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>error<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">do_hw_brk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// modify here</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">let</span> lib <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libmetasec_ml.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">SetHWBrk</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x13E274</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">error </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>error<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>遇到这个 <code>unable to create socket: Operation not permitted</code> , 这是由于测试的 demo 没有给网络权限所以不能建立 socket</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816201801046.png\" alt=\"image-20240816201801046\" style=\"aspect-ratio:1333 / 90;\"></p>\n<p>在 <code>AndroidManifest.xml</code>  里面加上这个权限就可以了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>uses-permission android:name<span class=\"token operator\">=</span><span class=\"token string\">\"android.permission.INTERNET\"</span>/<span class=\"token operator\">></span></pre></td></tr></table></figure><p>但是貌似 hit 不到， <code>0x23c00</code>  跳转过去是空的并没有代码</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816205135003.png\" alt=\"image-20240816205135003\" style=\"aspect-ratio:1739 / 412;\"></p>\n</div></details>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FiY3ozMTYvcndQcm9jTWVtMzM=\"> rwprocmem33</span> 打硬件断点，发现硬件断点命中了上千万次，而检测点的偏移计算出来是 <code>0x13e0e8</code></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816213750249.png\" alt=\"image-20240816213750249\" style=\"aspect-ratio:1332 / 1238;\"></p>\n<p>这个检测点就是我们先前去除垃圾指令后看到的这个函数</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816214140057.png\" alt=\"image-20240816214140057\" style=\"aspect-ratio:1562 / 630;\"></p>\n<p>这不是和我们之前用 frida 的 <code>MemoryAccessMonitor</code>  找到的监测点一模一样吗，那为啥下面这个脚本没办法过检测呢？直接把 checksum 修改成和正确的值 <code>0x312768B</code>  一样不应该行得通的嘛</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bypass_svc_func_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libmetasec_ml.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x13E10C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'internal svc func check bypass, x8 '</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x8<span class=\"token punctuation\">,</span><span class=\"token string\">'-> 0x312768B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x8 <span class=\"token operator\">=</span> <span class=\"token number\">0x312768B</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是我们想想，rwprocmem33 打印出来的硬件断点，命中次数达到了上千万次，那么这绝对是另外起了一个线程来专门对这个地方做检测的</p>\n<p>所以这个检测线程既然如此暴力，那么我们索性也一不做二不休，直接把检测的汇编暴力 patch 了不就好了！</p>\n<p>具体代码如下，使用 <code>Memory.protect</code>  将这个 so 设为 <code>rwx</code> , 然后直接修改内存，把 <code>B.NE</code>  跳转改为 <code>B</code>  跳转</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816215710033.png\" alt=\"image-20240816215710033\" style=\"aspect-ratio:1454 / 302;\"></p>\n<p>这样这个 so 不管起多少线程，其内部线程的执行逻辑都将以我们期望的方式运行</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bypass_svc_func_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> libso <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libmetasec_ml.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[name]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[base]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[size]:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[path]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span><span class=\"token function\">protect</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token string\">'rwx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span><span class=\"token function\">writeByteArray</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x13E110</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0X03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0X00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0X00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0X14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>终于我们也是成功的 hook 到了 svc 的调用码</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816215930992.png\" alt=\"image-20240816215930992\" style=\"aspect-ratio:439 / 369;\"></p>\n<p>各个 svc code 的含义如下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span>__NR_openat<span class=\"token punctuation\">)</span> <span class=\"token function\">open</span> /proc/self/exe</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">62</span><span class=\"token punctuation\">(</span>__NR3264_lseek<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">63</span><span class=\"token punctuation\">(</span>__NR_read<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">57</span><span class=\"token punctuation\">(</span>__NR_close<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">135</span><span class=\"token punctuation\">(</span>__NR_rt_sigprocmask<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">172</span><span class=\"token punctuation\">(</span>__NR_getpid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">178</span><span class=\"token punctuation\">(</span>__NR_gettid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hook svc code-<span class=\"token operator\">></span> <span class=\"token number\">135</span><span class=\"token punctuation\">(</span>__NR_rt_sigprocmask<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是感觉没有 open 什么有意义的文件的样子…</p>\n<h2 id=\"svc函数hook检测的bug\"><a class=\"anchor\" href=\"#svc函数hook检测的bug\">#</a> svc 函数 hook 检测的 bug</h2>\n<p>但是这个检测是有 bug 的，其实这个点我其实在最初就发现了，但是本着严谨的态度于是就顺着这段检测代码想要的方式去过检测</p>\n<p>回到检测函数我们看到这个检测函数对 <code>sub_13E274</code>  的 12 行汇编进行完整性检测</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816221230480.png\" alt=\"image-20240816221230480\" style=\"aspect-ratio:1349 / 633;\"></p>\n<p>但是被检查的函数，可是有 13 行的，所以我们直接对 <code>RET</code>  这行所在的地址进行 hook, 别的什么都不用做就可以成功的绕过完整性检测～</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240816222440542.png\" alt=\"image-20240816222440542\" style=\"aspect-ratio:1269 / 904;\"></p>\n<h1 id=\"字符串解密算法分析\"><a class=\"anchor\" href=\"#字符串解密算法分析\">#</a> 字符串解密算法分析</h1>\n<p>那么如何才能成功的输出解密后的字符串呢？我又回去看了看 hook  <code>ms.bd.c.l.a</code>  函数之后打印出来的日志，于是想着去调用最初的几个字符串参数去看看情况</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818165242631.png\" alt=\"image-20240818165242631\" style=\"aspect-ratio:2356 / 235;\"></p>\n<p>没想到 <code>.ms</code>  和 <code>.md</code>  一起调用的时候， <code>com.bytedance.ttnet.TTNetInit</code>  可以正常输出</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818165608816.png\" alt=\"image-20240818165608816\" style=\"aspect-ratio:1512 / 110;\"></p>\n<p>而单独调用 <code>com.bytedance.ttnet.TTNetInit</code>  输出的却是乱码</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818165636201.png\" alt=\"image-20240818165636201\" style=\"aspect-ratio:1475 / 46;\"></p>\n<p>那先调用 <code>.ms</code>  和 <code>.md</code> , 再调用之前解密出乱码的那个密文？</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818165937173.png\" alt=\"image-20240818165937173\" style=\"aspect-ratio:1510 / 309;\"></p>\n<p>这次字符串被成功的解密出来了！</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818165957226.png\" alt=\"image-20240818165957226\" style=\"aspect-ratio:1374 / 112;\"></p>\n<p>所以这个加密算法也很明了了，前两次被解密的字符串初始化了密钥，他们和后续字符串解密算法所使用的密钥有所关联的</p>\n<p>现在我们用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYW1lMWVvbi9qbml0cmFjZQ==\"> jnitrace</span> 去 trace 一下解密 <code>.ms</code>  时的 JNI 调用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jnitrace <span class=\"token parameter variable\">-l</span> libmetasec_ml.so <span class=\"token parameter variable\">-b</span> fuzzy com.ss.android.ugc.awemea</pre></td></tr></table></figure><p>在 <code>0x128b24</code>  的位置读取了传入的字符串密钥和密文，它所在的函数名为 <code>sub_128AAC</code></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818172219054.png\" alt=\"image-20240818172219054\" style=\"aspect-ratio:1631 / 488;\"></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818172227363.png\" alt=\"image-20240818172227363\" style=\"aspect-ratio:1654 / 495;\"></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240820010529912.png\" alt=\"image-20240820010529912\" style=\"aspect-ratio:1566 / 763;\"></p>\n<p>在 <code>0x5664c</code>  的位置是出现了被解密的字符串，它所在的函数名为 <code>sub_5611C</code></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240818172235640.png\" alt=\"image-20240818172235640\" style=\"aspect-ratio:1628 / 406;\"></p>\n<p>进入 <code>sub_128B88</code>  后我们发现，实际上在 <code>sub_5611C</code>  最后调用的 <code>sub_128B88</code>  才是 <code>NewStringUTF</code>  的位置</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240820010457580.png\" alt=\"image-20240820010457580\" style=\"aspect-ratio:1121 / 248;\"></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240820010508273.png\" alt=\"image-20240820010508273\" style=\"aspect-ratio:941 / 204;\"></p>\n<p>接下来我们在读取输入的函数 <code>sub_128AAC</code>  打印一下堆栈，来看看究竟是什么函数调用了他们</p>\n<p>结果如下，堆栈回溯的地址都指向了 <code>sub_5611C</code></p>\n<p><img data-src=\"/douyin-6shen-init/image-20240820014135813.png\" alt=\"image-20240820014135813\" style=\"aspect-ratio:1577 / 1391;\"></p>\n<p>在这个函数中，初始密钥为 <code>0x71,0x62,0x13,0x14,0x5f,0x77,0x63,0x41,0x31,0x30</code> , 随后做了读取 str 密钥，密文的操作，并将初始密钥与传入的密钥循环异或生成二次密钥</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240820021932419.png\" alt=\"image-20240820021932419\" style=\"aspect-ratio:1532 / 381;\"></p>\n<p>随后二次密钥与密文循环异或实现解密，但是如果没有没有实现字符串解密的两次初始化 <code>.ms</code>  和 <code>.md</code>  的话，将会对解密后的数组再次异或密钥，并异或 0x55, 通过这种方式来隐去密钥的相关特征</p>\n<p><img data-src=\"/douyin-6shen-init/image-20240820022014949.png\" alt=\"image-20240820022014949\" style=\"aspect-ratio:1619 / 1415;\"></p>\n<p>所以最终的字符串解密算法如下～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#code: 0x1000001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">douyin_str_dec</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    init_key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> init_key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>init_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>enc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># com.bytedance.ttnet.TTNetInit</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>douyin_str_dec<span class=\"token punctuation\">(</span><span class=\"token string\">\"976bf9\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                     <span class=\"token punctuation\">[</span><span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">124</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">107</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://oacia.dev/frida-inline-hook/",
            "url": "https://oacia.dev/frida-inline-hook/",
            "title": "frida inline hook原理分析及实践",
            "date_published": "2024-08-12T19:11:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近需要对一个固件的 arm64 linux 系统中的一个进程进行 inline hook, 然而当把 <code>frida-inject</code>  上传上去之后运行却发现，由于 linux 版本为 4.4 有些古老了，并且比正常的 linux 缺了一些文件，导致 frida 一运行就报错退出，所以就想着能不能自己去实现一个 inline hook. 但在这之前我们得先知道原理才行～如果想知道 inline hook 的原理是什么样子的，我认为最好的办法就是直接去看看 hook 之后的代码变成了什么样子，用调试的方法研究 frida 实现 inline hook 的具体实现</p>\n<p>首先我们对一个测试 apk 注入下面的脚本实现 hook</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dlopen</span><span class=\"token punctuation\">(</span>soName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>soName<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">//do your own code</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token function\">hook_native</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_native</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liboacia.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10B0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hook test apk at \"</span><span class=\"token punctuation\">,</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10B0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid = \"</span><span class=\"token punctuation\">,</span>Process<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_dlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"liboacia.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oriole:/ <span class=\"token comment\"># /data/local/tmp/fs16.3.3 &amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>frida <span class=\"token parameter variable\">-U</span> <span class=\"token parameter variable\">-l</span> .<span class=\"token punctuation\">\\</span>hook.js <span class=\"token parameter variable\">-f</span> com.oacia.apk_protect</pre></td></tr></table></figure><p>被 hook 的代码如图所示</p>\n<p><img data-src=\"/frida-inline-hook/image-20240723231240202.png\" alt=\"image-20240723231240202\" style=\"aspect-ratio:1533 / 588;\"></p>\n<p>注入完成之后，我们使用 lldb 去调试看看</p>\n<h1 id=\"lldb动态调试\"><a class=\"anchor\" href=\"#lldb动态调试\">#</a> lldb 动态调试</h1>\n<p>先到 <code>ndk\\26.1.10909125\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\clang\\17\\lib\\linux\\aarch64</code>  把 <code>lldb-server</code>  推送到手机上</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb push .<span class=\"token punctuation\">\\</span>lldb-server /data/local/tmp</pre></td></tr></table></figure><p>随后在手机上启动 <code>lldb-server</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./lldb-server platform <span class=\"token parameter variable\">--server</span> <span class=\"token parameter variable\">--listen</span> unix-abstract:///data/local/tmp/debug.sock <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>然后找到 <code>ndk\\26.1.10909125\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\lldb.cmd</code> , 运行这个 cmd</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.<span class=\"token punctuation\">\\</span>lldb.cmd</pre></td></tr></table></figure><p>进入后设置要连接的类型为 <code>remote-android</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>platform <span class=\"token keyword\">select</span> remote-android</pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240723150910476.png\" alt=\"image-20240723150910476\" style=\"aspect-ratio:585 / 103;\"></p>\n<p>然后连接安卓中的 <code>lldb-server</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>platform connect unix-abstract-connect:///data/local/tmp/debug.sock</pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240723151030760.png\" alt=\"image-20240723151030760\" style=\"aspect-ratio:1270 / 266;\"></p>\n<p>使用 <code>platform status</code>  查看是否已经连接</p>\n<p><img data-src=\"/frida-inline-hook/image-20240723151113720.png\" alt=\"image-20240723151113720\" style=\"aspect-ratio:1061 / 197;\"></p>\n<p>之后 attach 到指定的包名上</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>process attach <span class=\"token parameter variable\">-p</span> <span class=\"token punctuation\">[</span>pid<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><details class=\"info\"><summary>error: attach failed: Connection shut down...</summary><div>\n<p>我在使用 lldb 的过程中出现了这个报错</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> process attach <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32883</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>error: attach failed: Connection shut down by remote side <span class=\"token keyword\">while</span> waiting <span class=\"token keyword\">for</span> reply to initial handshake packet</pre></td></tr></table></figure><p>网上都说是开了 SELinux 的问题，我把 SELinux 临时设置为 0 还是没有解决这个 error</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oriole:/data/local/tmp <span class=\"token comment\"># setenforce 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>oriole:/data/local/tmp <span class=\"token comment\"># getenforce                                             Permissive</span></pre></td></tr></table></figure><p>没办法，只能用 logcat 看看日志了，随后发现了这条日志，但是木有作用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>E adbd: failed to connect to socket <span class=\"token string\">'localabstract:'</span><span class=\"token builtin class-name\">:</span> could not connect to localabstract address <span class=\"token string\">'localabstract:'</span></pre></td></tr></table></figure><p>后来排查了一下午，原来是我为了防止进程名检测，保留了过去 ida-server 和 frida-server push 到手机里面之后<strong>修改文件名</strong>的习惯，把 <code>llbd-server</code>  的名字改成了 <code>lldb26</code> , 然后…attach 的时候就报错了（改个文件名都不行 <code>-,-</code></p>\n</div></details>\n<p>随后打个断点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>lldb<span class=\"token punctuation\">)</span> breakpoint <span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-s</span> liboacia.so <span class=\"token parameter variable\">-a</span> 0x10B0</pre></td></tr></table></figure><p>通过对 hook 地址的反编译，发现了很有意思的点就是从 hook 地址开始的后 16 个字节的汇编都和原来不一样了，但是 lldb 的汇编看起来很奇怪</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0x6e84a900b0: 0x58000050   ldr    x16, <span class=\"token comment\">#0x8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    0x6e84a900b4: 0xd61f0200   br     x16</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    0x6e84a900b8: 0xb092a400   adrp   x0, <span class=\"token parameter variable\">-895871</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    0x6e84a900bc: 0x00000071   udf    <span class=\"token comment\">#0x71</span></pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240723232420799.png\" alt=\"image-20240723232420799\" style=\"aspect-ratio:1663 / 748;\"></p>\n<p>这段汇编给 x16 寄存器赋值为相对偏移 #0x8 位置的值，然后再去进行 BR 跳转，这后两行的指令 <code>adrp x0, -895871</code>  和 <code>udf #0x71</code>  压根就不是指令，而是一个八字节的一级跳板要跳往的地址</p>\n<p>不得不说 lldb 确实是一个非常强大的动调工具，我觉得使用 lldb 的 python API 直接用脚本和汇编交互的样子一定非常的厉害，等之后分析抖音的 vmp 的时候在用它吧</p>\n<p>想看正确的汇编怎么办呢，上 IDA!</p>\n<h1 id=\"ida动态调试分析hook跳板\"><a class=\"anchor\" href=\"#ida动态调试分析hook跳板\">#</a> IDA 动态调试分析 hook 跳板</h1>\n<p>IDA 直接附加的话是附加不上的，原因在于 apk 设置了 <code>android:extractNativeLibs=&quot;false&quot;</code>  导致 so 不会被解压到 <code>/data/app/...com.oacia.apk_protect/lib/arm64</code>  文件夹中，而是直接从 apk 中加载，所以 IDA 也就找不到这个 so 加载的时候了，这种情况下我们把要调试的 <code>liboacia.so</code>  用 MT 管理器直接复制到 <code>/data/app/...com.oacia.apk_protect/lib/arm64</code>  里面去就可以了，同时注意需要给这个 so  <code>rwx</code>  的运行权限</p>\n<h2 id=\"一级跳板\"><a class=\"anchor\" href=\"#一级跳板\">#</a> 一级跳板</h2>\n<p>有了 IDA 强大的反编译功能，这里的汇编也是显示了出来，从 hook 点开始的 16 个字节全部被一级跳板的字节码覆盖了，前 8 字节是两行汇编，用来实现跳板的跳转，后八字节存储了跳板要跳往的地址</p>\n<p><img data-src=\"/frida-inline-hook/image-20240724005026756.png\" alt=\"image-20240724005026756\" style=\"aspect-ratio:2083 / 277;\"></p>\n<p>这里使用的是 x16 和 x17 寄存器，那为什么使用这两个寄存器呢？</p>\n<p>根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb2N1bWVudGF0aW9uL2RlbjAwMjQvYS9UaGUtQUJJLWZvci1BUk0tNjQtYml0LUFyY2hpdGVjdHVyZS9SZWdpc3Rlci11c2UtaW4tdGhlLUFBcmNoNjQtUHJvY2VkdXJlLUNhbGwtU3RhbmRhcmQvUGFyYW1ldGVycy1pbi1nZW5lcmFsLXB1cnBvc2UtcmVnaXN0ZXJz\"> arm64 官网描述</span>，x16 和 x17 是程序内调用临时寄存器，也就是平时根本不会用他们，所以把这两个寄存器用作跳板是再合适不过的</p>\n<blockquote>\n<p>X16 and X17 are IP0 and IP1, intra-procedure-call temporary registers. These can be used by call veneers and similar code, or as temporary registers for intermediate values between subroutine calls. They are corruptible by a function. Veneers are small pieces of code which are automatically inserted by the linker, for example when the branch target is out of range of the branch instruction.</p>\n</blockquote>\n<p>那顺便也记一下其他寄存器的作用好了</p>\n<ul>\n<li>X0-X7: 参数寄存器，用于传递函数参数和返回结果，要是参数比八个多的话就会用堆栈去传递</li>\n<li>X8: 用来存放函数返回值的，不过这个寄存器比较特殊一点，只有当返回值是大型结构体的时候才会用 x8 去返回，其余情况都是用 x0 去返回的</li>\n<li>X9-X15: 临时寄存器，这 7 个寄存器是用来存储临时数据的</li>\n<li>X16-X17: 他们是给编译器使用的，正常的程序都不会使用他们，所以当作跳板是相当的合适</li>\n<li>X18: 平台寄存器，基本是不用的</li>\n<li>X19-X28: 保存寄存器，这 10 个寄存器用来保存函数调用上下文</li>\n<li>X29: FP 寄存器，用于连接栈帧</li>\n<li>X30: 也叫 LR 寄存器，用于保存子程序的返回地址</li>\n<li>X31: SP 寄存器，用于指向每个函数的栈顶</li>\n<li>SP： <code>SP</code>  是栈顶指针寄存器，类似 <code>Intel 64</code>  中的 <code>RSP</code>  寄存器</li>\n<li>PC： <code>PC</code>  寄存器存储当前要执行的指令地址，类似 <code>Intel 64</code>  中的 <code>RIP</code>  寄存器</li>\n</ul>\n<h2 id=\"二级跳板\"><a class=\"anchor\" href=\"#二级跳板\">#</a> 二级跳板</h2>\n<p>二级跳板中 X17 保存了返回地址，也就是我们本身的 hook 地址的值，而 X16 则保存了三级跳版的位置，而在二级跳板的下方，竟然还有一个跳板，不过现在还没有看到它的用途所在</p>\n<p><img data-src=\"/frida-inline-hook/image-20240724012046288.png\" alt=\"image-20240724012046288\" style=\"aspect-ratio:1793 / 552;\"></p>\n<blockquote>\n<p>这里二级跳板有啥用？为啥不直接跳到三级跳板？</p>\n</blockquote>\n<h2 id=\"三级跳板\"><a class=\"anchor\" href=\"#三级跳板\">#</a> 三级跳板</h2>\n<p>这三级跳板总共干了三件事情</p>\n<h3 id=\"保存寄存器环境\"><a class=\"anchor\" href=\"#保存寄存器环境\">#</a> 保存寄存器环境</h3>\n<p><img data-src=\"/frida-inline-hook/image-20240827140044091.png\" alt=\"image-20240827140044091\" style=\"aspect-ratio:1640 / 1078;\"></p>\n<h3 id=\"跳转到核心代码\"><a class=\"anchor\" href=\"#跳转到核心代码\">#</a> 跳转到核心代码</h3>\n<p><img data-src=\"/frida-inline-hook/image-20240724013031337.png\" alt=\"image-20240724013031337\" style=\"aspect-ratio:1925 / 91;\"></p>\n<p>经过三个跳板的层层跳转，我们也是终于来到了 <code>frida_agent_64.so</code>  中执行我们编写的 hook 逻辑比如打印寄存器，读取内存等操作了</p>\n<p><img data-src=\"/frida-inline-hook/image-20240724013427577.png\" alt=\"image-20240724013427577\" style=\"aspect-ratio:1590 / 1285;\"></p>\n<h3 id=\"恢复寄存器环境\"><a class=\"anchor\" href=\"#恢复寄存器环境\">#</a> 恢复寄存器环境</h3>\n<p>使用 <code>LDP</code>  加载栈中保存的寄存器环境</p>\n<p><img data-src=\"/frida-inline-hook/image-20240724013125866.png\" alt=\"image-20240724013125866\" style=\"aspect-ratio:1789 / 1010;\"></p>\n<h2 id=\"恢复执行流\"><a class=\"anchor\" href=\"#恢复执行流\">#</a> 恢复执行流</h2>\n<p>由于 hook 所生成的跳板函数会对 hook 位置的 16 字节汇编进行覆盖，所以必须要对被覆盖的那 16 字节汇编再次执行，否则将会对执行流产生影响。在三级跳板的最后 <code>RET X16</code> , 将会来到跳转到此处执行先前未完成的汇编</p>\n<p><img data-src=\"/frida-inline-hook/image-20240816101950696.png\" alt=\"image-20240816101950696\" style=\"aspect-ratio:1437 / 267;\"></p>\n<h1 id=\"自实现inline-hook\"><a class=\"anchor\" href=\"#自实现inline-hook\">#</a> 自实现 inline hook</h1>\n<p>虽说要 hook 的目标是 arm64 linux, 但是本人对于安卓更为熟悉一些，所以这里的示例也使用的是 android (毕竟都是 arm64 架构，hook 肯定是通用的)</p>\n<p>先写个一键编译的 <code>run.bat</code>  脚本，这样运行一下连带编译传输到手机上的步骤都一步到位了～</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"E:\\Program Files\\CLion 2024.1<span class=\"token entity\" title=\"\\b\">\\b</span>in<span class=\"token entity\" title=\"\\c\">\\c</span>make\\win<span class=\"token entity\" title=\"\\x64\">\\x64</span><span class=\"token entity\" title=\"\\b\">\\b</span>in<span class=\"token entity\" title=\"\\c\">\\c</span>make.exe\"</span> <span class=\"token parameter variable\">--build</span> E:<span class=\"token punctuation\">\\</span>analysis<span class=\"token punctuation\">\\</span>frida-inline-hook<span class=\"token punctuation\">\\</span>self_hook<span class=\"token punctuation\">\\</span>cmake-build-android <span class=\"token parameter variable\">--target</span> hook-server <span class=\"token parameter variable\">-j</span> <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>adb push .<span class=\"token punctuation\">\\</span>cmake-build-android<span class=\"token punctuation\">\\</span>hook-server /data/local/tmp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>adb shell <span class=\"token string\">\"chmod 777 /data/local/tmp/hook-server\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>adb shell <span class=\"token function\">su</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"/data/local/tmp/hook-server\"</span></pre></td></tr></table></figure><h2 id=\"ptrace注入\"><a class=\"anchor\" href=\"#ptrace注入\">#</a> ptrace 注入</h2>\n<p>如果我们要自己去实现对进程的注入，那么首先要做的就是使用 ptrace 的 <code>PTRACE_ATTACH</code>  附加到这个进程上面去</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ptraceAttach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_ATTACH<span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ptrace] Failed to attach:%d\\n\"</span><span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ptrace] Attach to pid %d\\n\"</span><span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> stat<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*  在用 ptrace 去 attach 一个进程之后，那个被 attach 的进程某种意义上说可以算作那个 attach</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     *  进程的子进程，这种情况下，就可以通过 waitpid 这个函数来知道被调试的进程何时停止运行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     *  @param option->WUNTRACED: 如果子进程进入暂停状态，则马上返回。*/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>stat<span class=\"token punctuation\">,</span>WUNTRACED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240819152115591.png\" alt=\"image-20240819152115591\" style=\"aspect-ratio:1183 / 67;\"></p>\n<p>一旦我们使用 ptrace 附加了上去，这就意味着我们有了对这个进程空间中的内存进行操作的权力，现在我们需要知道的是目标 so 库的基址在什么地方，这样我们才可以通过在 ida 中静态分析找到的 hook 点的偏移，来找到 hook 点的虚拟内存地址，而这可以通过遍历 maps 来实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> libname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取 hook-server 的 pid, 这样可以通过本地 libc 库函数地址 - 本地 libc 基址 + 远程 libc 基址 得到远程 libc 库函数地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        pid<span class=\"token operator\">=</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> maps<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> base_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">,</span>MAX_PATH<span class=\"token punctuation\">,</span><span class=\"token string\">\"/proc/%d/maps\"</span><span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    FILE <span class=\"token operator\">*</span>f <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>maps<span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> line<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span>MAX_PATH<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//printf(\"%s\\n\",line);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 查找指定模块是否在某行出现</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span>libname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//maps 形式: base-end [rwxsp] offset dev inode pathname</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//eg. 6f1305e000-6f13060000 r-xp 00000000 fe:2e 90655 /lib/arm64/liboacia.so</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             * https://man7.org/linux/man-pages/man5/proc_pid_maps.5.html</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             * The [offset] field is the offset into the file/whatever;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             * [dev] is the device (major:minor);</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             * [inode] is the inode on that device.  0 indicates that no inode is associated with the memory</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             * region, as would be the case with BSS (uninitialized data).</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             * If  the [pathname] field is blank, this is an anonymous mapping as obtained</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             * via the mmap(2) function.  There is no easy way to coordinate this back to</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             * a process's source, short of running it through gdb(1), strace(1), or similar.*/</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            base <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以 `-` 为分隔符，读取基址</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            base_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[maps] find module [%s] base at 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span>libname<span class=\"token punctuation\">,</span>base_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> base_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240819160333432.png\" alt=\"image-20240819160333432\" style=\"aspect-ratio:737 / 62;\"></p>\n<p>现在我们尝试去读取一下 hook 点的汇编，来看看 ptrace 究竟有没有生效，这可以通过 <code>PTRACE_PEEKTEXT</code>  来实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ptraceReadData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">size_t</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        rdata<span class=\"token operator\">=</span><span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKTEXT<span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>addr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>rdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240819162616719.png\" alt=\"image-20240819162616719\" style=\"aspect-ratio:794 / 280;\"></p>\n<p>nice, 将通过 ptrace 读取的汇编和 ida 中反编译出来的汇编对比一下，简直就是一模一样～</p>\n<p><img data-src=\"/frida-inline-hook/image-20240819162708924.png\" alt=\"image-20240819162708924\" style=\"aspect-ratio:1194 / 240;\"></p>\n<h2 id=\"为字符串分配内存\"><a class=\"anchor\" href=\"#为字符串分配内存\">#</a> 为字符串分配内存</h2>\n<p>接下来我们需要通过 <code>dlopen</code>  加载我们的功能库 so, 而这必定会涉及到字符串相关的内存，为了让目标字符串可以被远程的进程访问到，所以我们必须要通过 <code>mmap</code>  在远程的进程空间中分配一块属于我们自己的，可以自由操控的内存</p>\n<p>在这之前，我们先对当前的寄存器环境进行保存，以便之后可以还原寄存器的环境</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ptraceGetRegs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_pt_regs</span> <span class=\"token operator\">*</span>regs_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">iovec</span> io<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    io<span class=\"token punctuation\">.</span>iov_base <span class=\"token operator\">=</span> regs_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    io<span class=\"token punctuation\">.</span>iov_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_pt_regs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//NT_PRSTATUS: general-purpose registers, 定义在 elf.h 中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * PTRACE_GETREGSET</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 读取被追踪者寄存器。addr 参数决定读取寄存器的类型。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 如果 addr 是 NT_PRSTATUS，则读取通用寄存器。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 如果 addr 是 NT_foo，则读取浮点或向量寄存器（如果有的话)。data 参数指向 iovec 类型：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_GETREGSET<span class=\"token punctuation\">,</span>pid<span class=\"token punctuation\">,</span>NT_PRSTATUS<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>io<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get regs failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_pt_regs</span> oldRegs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_pt_regs</span> regs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 保存寄存器环境</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">ptraceGetRegs</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>oldRegs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>oldRegs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_pt_regs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来我们去获取一下 <code>mmap</code>  在远程空间中的位置，在 <code>android</code>  中， <code>mmap</code>  是在 libc 库中被定义的，具体的位置是在 <code>/apex/com.android.runtime/lib64/bionic/libc.so</code> , 由于 mmap 在 <code>libc.so</code>  中的相对偏移是固定的，而我们可以在 <code>hook-server</code>  内部直接获取到 mmap 函数的本地地址 (利用 <code>*mmap</code>  获取函数指针即可实现), 所以我们再读取一下 <code>hook-server</code>  中的 <code>libc.so</code>  的基址，相减即可得到 mmap 函数的相对偏移，把这个相对偏移再加上被 hook 的进程中的 <code>libc.so</code>  的基址，不就可以得到 mmap 函数在远程进程中的地址咯</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">getRemoteLibFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> libname<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> LocalFuncAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>LocalLibBase<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>RemoteLibBase<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>RemoteFuncAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LocalLibBase <span class=\"token operator\">=</span> <span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>libname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-1 表示在当前 hook-server 的 maps 中寻找库的基址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    RemoteLibBase <span class=\"token operator\">=</span> <span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>libname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    RemoteFuncAddr <span class=\"token operator\">=</span> LocalFuncAddr<span class=\"token operator\">-</span>LocalLibBase<span class=\"token operator\">+</span>RemoteLibBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LocalLibBase: 0x%08lx, LocalFuncAddr: 0x%08lx\\nRemoteLibBase: 0x%08lx, func offset: 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span>LocalLibBase<span class=\"token punctuation\">,</span>LocalFuncAddr<span class=\"token punctuation\">,</span>RemoteLibBase<span class=\"token punctuation\">,</span>LocalFuncAddr<span class=\"token operator\">-</span>LocalLibBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> RemoteFuncAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 通过 mmap 为跳板分配内存</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> RemoteMmapAddr <span class=\"token operator\">=</span> <span class=\"token function\">getRemoteLibFunc</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token string\">\"libc.so\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[libc] find remote mmap addr at 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>RemoteMmapAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后再去设置一下寄存器和 pc 的值，mmap 就能被我们成功的调用了，ptrace 主动调用的细节可以看我写的注释↓</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CPSR_T_MASK</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1u</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ARM_lr</span> <span class=\"token expression\">regs<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ptraceCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> funcaddr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_pt_regs</span> <span class=\"token operator\">*</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 比八个参数多的话，多出的参数通过栈去传参</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc<span class=\"token operator\">></span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        regs<span class=\"token operator\">-></span>sp <span class=\"token operator\">=</span>regs<span class=\"token operator\">-></span>sp <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>argc<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 申请 8 个寄存器的栈空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">ptraceWriteData</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>regs<span class=\"token operator\">-></span>sp<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>argc<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 少于 8 个参数，就通过 x0~x7 寄存器去传参</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        regs<span class=\"token operator\">-></span>regs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    regs<span class=\"token operator\">-></span>pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__u64<span class=\"token punctuation\">)</span> funcaddr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 pc 寄存器的值修改为函数地址，这样我们就可以跳转到函数的目标地址去执行 arm64 指令了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ptraceCall] funcaddr: 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span>regs<span class=\"token operator\">-></span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>regs<span class=\"token operator\">-></span>pc<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//thumb 模式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 当 pc 的最后一位为 1, 即 pc 为奇数时，设置 pstate CPSR 的 T 标志位为 1, 表示接下来的指令以 thumb 模式执行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        regs<span class=\"token operator\">-></span>pc<span class=\"token operator\">&amp;=</span><span class=\"token operator\">~</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//pstate, 这是 arm64v8a 的叫法，在 armv7a 中叫 CPSR 寄存器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//more-> https://blog.csdn.net/longwang155069/article/details/105204547</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        regs<span class=\"token operator\">-></span>pstate<span class=\"token operator\">|=</span>CPSR_T_MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//arm 模式</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 当 pc 的最后一位为 0, 即 pc 为偶数时，清除 pstate CPSR 的 T 标志位，表示接下来的指令以 arm 模式执行</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        regs<span class=\"token operator\">-></span>pstate<span class=\"token operator\">&amp;=</span><span class=\"token operator\">~</span>CPSR_T_MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    regs<span class=\"token operator\">-></span>ARM_lr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置 lr 寄存器为 0, 要是函数执行完毕之后返回 0 地址会抛出异常，这个异常在后面是有用的</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">ptraceSetRegs</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置寄存器的值，把函数的参数和地址传进寄存器里面</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> stat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * 对于使用 ptrace_cont 重新运行的进程，它会在 3 种情况下进入暂停状态</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 1. 下一次系统调用</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 2. 子进程退出</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 3. 子进程的执行发生错误</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 这里的 0xb7f 我们可以拆分成两部分来看，后 2 字节 0x7f, 表示进程进入了暂停的状态</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * (如果后两字节是 0x00 则表示子进程退出状态), 而前两字节 0xb, 表示进程发送的错误信号为 11 (SIGSEGV),</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 即内存访问异常，因为我们之前将 lr 寄存器的值设为了 0, 所以当远程函数调用完毕之后会抛出异常，</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * 当 ptrace 收到这个异常信号时，就知道远程函数调用以及完成了～</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stat<span class=\"token operator\">!=</span><span class=\"token number\">0xb7f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">ptraceContinue</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 让被 ptrace 的线程开始运行</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>stat<span class=\"token punctuation\">,</span>WUNTRACED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ptraceCall] stat: 0x%04x\\n\"</span><span class=\"token punctuation\">,</span>stat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">ptraceGetRegs</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当远程函数调用完成之后，读取寄存器获取返回值</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 调用 mmap 函数</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">long</span> paras<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    paras<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    paras<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    paras<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>PROT_READ<span class=\"token operator\">|</span>PROT_WRITE<span class=\"token operator\">|</span>PROT_EXEC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    paras<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>MAP_ANONYMOUS<span class=\"token operator\">|</span>MAP_PRIVATE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    paras<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    paras<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">ptraceCall</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>RemoteMmapAddr<span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>paras<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>RemoteMemAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>regs<span class=\"token punctuation\">.</span>regs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//mmap 返回值存储在 x0 中，从 x0 获取远程的 mmap 函数分配的内存</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[libc] mmap alloc memory at 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>RemoteMemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/frida-inline-hook/image-20240820155113179.png\" alt=\"image-20240820155113179\" style=\"aspect-ratio:780 / 252;\"></p>\n<h2 id=\"加载hook功能库so\"><a class=\"anchor\" href=\"#加载hook功能库so\">#</a> 加载 hook 功能库 so</h2>\n<p>现在我们已经通过 mmap 成功的在被 hook 进程中分配了一块内存，接下来要做的是在被 hook 进程中加载我们的 hook 功能库 so, 这个 so 是跳板最终要跳往的地方，用来执行打印或修改寄存器的操作，我们现在就把这个 so 的名称叫做 <code>libhook-agent.so</code>  吧，当前代码如下，通过远程调用 <code>work_func</code>  来观察我们的 so 是否被成功的加载进来</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//hook-agent.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/log.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LOG_TAG</span> <span class=\"token string\">\"hook-agent\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">LOGD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token function\">__android_log_print</span><span class=\"token punctuation\">(</span>ANDROID_LOG_DEBUG  <span class=\"token punctuation\">,</span> LOG_TAG<span class=\"token punctuation\">,</span> __VA_ARGS__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">work_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call work_func ok!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">777</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先我们先获取一下 <code>dlopen</code>  在远程进程中的地址，随后将要加载的 so 的绝对地址写入 mmap 分配的内存中，再去调用 ptrace 调用一下 <code>dlopen</code>  函数就可以啦</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取 dlopen 在远程进程中的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> RemoteDlopenAddr <span class=\"token operator\">=</span> <span class=\"token function\">getRemoteLibFunc</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token string\">\"libdl.so\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dlopen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[libdl] find remote dlopen addr at 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>RemoteDlopenAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * 将要加载的 so 的绝对地址写入 mmap 分配的内存中，可以把 so 放在 app 的私有目录下面，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * 要是放在 /data/local/tmp 目录下面，会遇到 avc denied, </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * 这个时候需要使用 setenforce 0 临时禁用掉 selinux 才可以</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">ptraceWriteData</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>RemoteMemAddr<span class=\"token punctuation\">,</span><span class=\"token string\">\"/data/data/com.oacia.apk_protect/libhook-agent.so\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/data/data/com.oacia.apk_protect/libhook-agent.so\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 调用 dlopen 函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>paras<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> RemoteMemAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>paras<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>RTLD_NOW<span class=\"token operator\">|</span>RTLD_GLOBAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">ptraceCall</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>RemoteDlopenAddr<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>paras<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>HookAgentAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>regs<span class=\"token punctuation\">.</span>regs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//dlopen 返回值存储在 x0 中，从 x0 获取远程的 dlopen 返回的 handle</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[libdl] dlopen libhook-agent.so addr: 0x%08lx\\n\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>HookAgentAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>HookAgentAddr</code>  的值不为空，说明 <code>libhook-agent.so</code>  被成功的加载了进来</p>\n<p><img data-src=\"/frida-inline-hook/image-20240826150146133.png\" alt=\"image-20240826150146133\" style=\"aspect-ratio:798 / 129;\"></p>\n<p>随后我们再使用远程进程的 <code>dlsym</code> , 找到 <code>libhook-agent.so</code>  功能函数的地址，并主动调用 <code>work_func</code>  来看一下情况</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//dlsym 获取调用函数的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> RemoteDlsymAddr <span class=\"token operator\">=</span> <span class=\"token function\">getRemoteLibFunc</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span><span class=\"token string\">\"libdl.so\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dlsym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[libdl] find remote dlsym addr at 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>RemoteDlsymAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将被调用函数的函数名写入 mmap 分配的内存中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ptraceWriteData</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>RemoteMemAddr<span class=\"token punctuation\">,</span><span class=\"token string\">\"work_func\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work_func\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>paras<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> HookAgentAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>paras<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> RemoteMemAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ptraceCall</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>RemoteDlsymAddr<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>paras<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> remoteFuncAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>regs<span class=\"token punctuation\">.</span>regs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[libdl] dlsym find hook-agent function addr at 0x%08lx\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>remoteFuncAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ptraceCall</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>remoteFuncAddr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>paras<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 主动调用 hook-agent 中的 work_func</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> checkOK <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>regs<span class=\"token punctuation\">.</span>regs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call wrok_func in libhook-agent.so, ret -> %d\\n\"</span><span class=\"token punctuation\">,</span>checkOK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>nice! 函数被成功的调用了，并且返回值也是和 <code>work_func</code>  中的返回值一模一样</p>\n<p><img data-src=\"/frida-inline-hook/image-20240826153126695.png\" alt=\"image-20240826153126695\" style=\"aspect-ratio:830 / 157;\"></p>\n<p>而此时的 logcat, 也有日志被正确的打印出来</p>\n<p><img data-src=\"/frida-inline-hook/image-20240826153223819.png\" alt=\"image-20240826153223819\" style=\"aspect-ratio:1089 / 36;\"></p>\n<h2 id=\"在hook点patch上跳板\"><a class=\"anchor\" href=\"#在hook点patch上跳板\">#</a> 在 hook 点 patch 上跳板</h2>\n<blockquote>\n<p>现在我们需要在 hook 点 patch 跳板，目前来看最初使用的跨进程通过 ptrace 的 <code>PTRACE_POKETEXT</code>  在进程中写入跳板的方式，似乎是存在 bug 的，写入字节的次数的过多的话被 hook 进程就会崩溃，并且跨进程通过 ptrace 调用 <code>mprotect</code>  将 hook 处的页属性改为 <code>rwx</code>  没有生效，写入时进程就会崩溃</p>\n</blockquote>\n<details class=\"info\"><summary>通过ptrace的`PTRACE_POKETEXT`进行patch</summary><div>\n<p>接下来我们使用 <code>X16</code>  寄存器，在 hook 点 patch 上一级跳板，这个一级跳板将会跳往二级跳板</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">write_trampoline_stage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> target<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> libname<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> save_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> RemoteLibBase <span class=\"token operator\">=</span> <span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>libname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> hook_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>RemoteLibBase<span class=\"token operator\">+</span>offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 生成跳板函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> trampoline<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//LDR X16,#0x8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xD6</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//BR X16</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        trampoline<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>target<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 读取即将被覆盖的指令</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">ptraceReadData</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> hook_addr<span class=\"token punctuation\">,</span> save_code<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 写入跳板</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">ptraceWriteData</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> hook_addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>trampoline<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 写入一级跳板汇编</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">char</span> save_code<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存被跳板覆盖的指令，在完成 hook 之后这 4 行汇编需要被执行</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>save_code<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">write_trampoline_stage1</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>RemoteMemAddr<span class=\"token punctuation\">,</span><span class=\"token string\">\"liboacia.so\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10B0</span><span class=\"token punctuation\">,</span>save_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在二级跳板这里，我们直接将保存寄存器环境，跳往功能函数，恢复寄存器环境，执行被跳板覆盖的汇编的这四个过程直接合在一起</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">write_trampoline_stage2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> patch_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> libname<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> save_code<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> hook_agent_func_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> RemoteLibBase <span class=\"token operator\">=</span> <span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span>libname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> hook_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>RemoteLibBase<span class=\"token operator\">+</span>offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> ret_addr <span class=\"token operator\">=</span> hook_addr<span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 生成跳板函数，trampoline bytes are from frida hook decompile</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> trampoline<span class=\"token punctuation\">[</span><span class=\"token number\">360</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 保存寄存器环境</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token number\">0xfe</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token number\">0xfc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token number\">0xfa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x67</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token number\">0xf6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x5f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token number\">0xf4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x57</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token number\">0xf2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token number\">0xee</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token number\">0xec</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x37</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token number\">0xea</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x2f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x27</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token number\">0xe6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token number\">0xe4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x17</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token number\">0xe2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token number\">0xe0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x07</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token number\">0xfd</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token number\">0xfb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token number\">0xf9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token number\">0xf7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token number\">0xf5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x5b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token number\">0xf3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x53</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token number\">0xf1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token number\">0xef</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token number\">0xed</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token number\">0xeb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x33</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token number\">0xe9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x2b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token number\">0xe7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x23</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token number\">0xe5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token number\">0xe3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x13</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token number\">0xe1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token number\">0xe1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token number\">0xe0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0c</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbf</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token number\">0xfe</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x8f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xf9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token number\">0xfd</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x8b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xf9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token number\">0xfd</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0c</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token number\">0xe1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token number\">0xe2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x23</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token number\">0xe3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0c</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 跳转到核心代码</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token number\">0xe0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x11</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd6</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 还原寄存器环境</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token number\">0xe1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token number\">0xe1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token number\">0xe3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x13</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token number\">0xe5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token number\">0xe7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x23</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token number\">0xe9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x2b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token number\">0xeb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x33</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token number\">0xed</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token number\">0xef</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token number\">0xf1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token number\">0xf3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x53</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token number\">0xf5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x5b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token number\">0xf7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token number\">0xf9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token number\">0xfb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token number\">0xfd</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token number\">0xe0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x07</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token number\">0xe2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token number\">0xe4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x17</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token number\">0xe6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x27</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token number\">0xea</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x2f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token number\">0xec</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x37</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token number\">0xee</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token number\">0xf2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token number\">0xf4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x57</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token number\">0xf6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x5f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x67</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token number\">0xfa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token number\">0xfc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token number\">0xfe</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xc1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xa8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 执行先前因 patch 跳板被覆盖的代码，16 字节占位</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xaa</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">// 返回 hook 点之后的位置继续执行逻辑</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xD6</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token comment\">//8 字节占位，存储功能函数的地址</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xbb</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token comment\">//8 字节占位，存储功能 hook 完成后返回到原来程序的地址</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xcc</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        trampoline<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">320</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> save_code<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        trampoline<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">344</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>hook_agent_func_addr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        trampoline<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">352</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ret_addr<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token function\">ptraceWriteData</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> patch_addr<span class=\"token punctuation\">,</span> trampoline<span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<p>所以可以想想换一种方法，既然 so 可以注入进去，那就直接在 so 加载的时候，通过 <code>__attribute__((constructor))</code> , 在通过这个 so 在被 hook 进程内部执行 patch 跳板的逻辑不就可以了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 完成一次完整的 hook, 需要先由 hook 点的一级跳板跳转到二级跳板的位置，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 一级跳板通过 BR X16 跳往二级跳板，二级跳板保存寄存器的环境，跳转到 hook 的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 功能函数位置，随后还原寄存器环境，并执行先前被覆盖的四条汇编</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * , 随后通过 BR X16 寄存器，跳往 hook 点之后的位置，完成一次完整的 hook</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    u_long hook_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"liboacia.so\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0x10B8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hook-agent init!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">extern</span> u_long _trampoline_<span class=\"token punctuation\">,</span>_shellcode_addr_<span class=\"token punctuation\">,</span>_shellcode_start_<span class=\"token punctuation\">,</span>_shellcode_end_<span class=\"token punctuation\">,</span>_origin_patched_code_<span class=\"token punctuation\">,</span>_hook_main_func_addr_<span class=\"token punctuation\">,</span>_hook_finish_return_addr_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    u_long total_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_end_ <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_start_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shellcode len: %lu, hook_addr: 0x%08lx,offset: 0x%04x\"</span><span class=\"token punctuation\">,</span>total_len<span class=\"token punctuation\">,</span>hook_addr<span class=\"token punctuation\">,</span><span class=\"token number\">0x10B8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 为 shellcode 分配内存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    u_long page_size <span class=\"token operator\">=</span> <span class=\"token function\">getpagesize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    u_long shellcode_mem_start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> page_size<span class=\"token punctuation\">,</span> PROT_READ <span class=\"token operator\">|</span> PROT_WRITE <span class=\"token operator\">|</span> PROT_EXEC<span class=\"token punctuation\">,</span> MAP_ANONYMOUS <span class=\"token operator\">|</span> MAP_PRIVATE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>shellcode_mem_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> page_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>shellcode_mem_start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_start_<span class=\"token punctuation\">,</span> total_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_shellcode_addr_: 0x%08lx,shellcode_mem_start: 0x%08lx\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_addr_<span class=\"token punctuation\">,</span> shellcode_mem_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 尝试了一下好像没有办法给_shellcode_addr_赋值 (很奇怪)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 所以索性直接这样赋值了 *(u_long*)(hook_addr + 8) = shellcode_mem_start;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//*(u_long*)&amp;_shellcode_addr_ = (u_long)shellcode_mem_start;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 通过相对偏移的方式，定位到需要替换的地址在 mmap 分配的内存中的地址</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    u_long mem_hook_main_func_addr_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_hook_main_func_addr_ <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_start_ <span class=\"token operator\">+</span> shellcode_mem_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    u_long mem_origin_patched_code_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_origin_patched_code_ <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_start_ <span class=\"token operator\">+</span> shellcode_mem_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    u_long mem_hook_finish_return_addr_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_hook_finish_return_addr_ <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_shellcode_start_ <span class=\"token operator\">+</span> shellcode_mem_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//hook 的功能函数的地址</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mem_hook_main_func_addr_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span>hook_main<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 被跳板覆盖前，hook 点的 16 字节</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mem_origin_patched_code_ <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>hook_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mem_origin_patched_code_ <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hook_addr <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//hook 执行完毕后的返回地址</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mem_hook_finish_return_addr_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span>hook_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//patch 上我们的跳板</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    u_long entry_page_start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u_long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hook_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>page_size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">mprotect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>entry_page_start<span class=\"token punctuation\">,</span> page_size<span class=\"token punctuation\">,</span> PROT_READ <span class=\"token operator\">|</span> PROT_WRITE <span class=\"token operator\">|</span> PROT_EXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>hook_addr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>_trampoline_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hook_addr <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> shellcode_mem_start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>相关的 shellcode 如下，在保存寄存器环境时，CPSR 寄存器也要一起保存，但是看 frida hook 之后的样子，只需要保存 NZCV 寄存器就足够了，所以这里也不对 CPSR 寄存器的其他字段作保存了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#在hook点patch上跳板<span class=\"token punctuation\">,</span>跳转到我们的shellcode</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>global _trampoline_</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">shellcode</span><span class=\"token expression\">所在的地址<span class=\"token punctuation\">,</span>跳板需要跳转到shellcode</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>global _shellcode_addr_</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">shellcode</span><span class=\"token expression\">的起始地址和结束地址<span class=\"token punctuation\">,</span>用来定位shellcode的大小以及字节</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span>global _shellcode_start_</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span>global _shellcode_end_</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#被跳板覆盖的<span class=\"token number\">16</span>字节指令<span class=\"token punctuation\">,</span>这些指令我们需要在hook完成之后再次执行<span class=\"token punctuation\">,</span>才不会影响到原本的逻辑</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span>global _origin_patched_code_</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>#跳转到hook的核心功能函数的地址去执行读取寄存器<span class=\"token operator\">/</span>修改寄存器等操作</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">.</span>global _hook_main_func_addr_</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>#当所有的hook逻辑执行完毕之后<span class=\"token punctuation\">,</span>需要返回到hook点后<span class=\"token number\">16</span>字节的位置去执行后续的指令</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">.</span>global _hook_finish_return_addr_</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>_trampoline_<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    LDR X16<span class=\"token punctuation\">,</span> SHELLCODE_ADDR</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    BR x16</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>#这里需要先声明SHELLCODE_ADDR的地址<span class=\"token punctuation\">,</span>否则会出现ld<span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> relocation R_AARCH64_LD_PREL_LO19 cannot be used against symbol <span class=\"token char\">'_shellcode_addr_'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>#就是说不能用已经声明过全局的符号来作重定位</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>SHELLCODE_ADDR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>_shellcode_addr_<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">.</span>dword <span class=\"token number\">0x1234567812345678</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>_shellcode_start_<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    #本来想参考https<span class=\"token operator\">:</span><span class=\"token comment\">//github.com/zzyccs/inlineHook/blob/master/app/src/main/cpp/inline_shellcode.S</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    #手动通过STP寄存器的大小一个一个算出存入堆栈的地址的</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    #但是看了一下frida<span class=\"token punctuation\">,</span>直接用STP Xt1<span class=\"token punctuation\">,</span> Xt2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Xn<span class=\"token operator\">|</span>SP<span class=\"token punctuation\">,</span> #imm<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span> <span class=\"token punctuation\">;</span> <span class=\"token number\">64</span><span class=\"token operator\">-</span>bit</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    #这种预索引的方式修改SP的值<span class=\"token punctuation\">,</span>这样就不需要size<span class=\"token operator\">*</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>size<span class=\"token operator\">*</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>的方式去计算寄存器存储的位置</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    #可以达到持续入栈的效果<span class=\"token punctuation\">,</span>太厉害啦</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    STP             Q30<span class=\"token punctuation\">,</span> Q31<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    STP             Q28<span class=\"token punctuation\">,</span> Q29<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    STP             Q26<span class=\"token punctuation\">,</span> Q27<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    STP             Q24<span class=\"token punctuation\">,</span> Q25<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    STP             Q22<span class=\"token punctuation\">,</span> Q23<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    STP             Q20<span class=\"token punctuation\">,</span> Q21<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    STP             Q18<span class=\"token punctuation\">,</span> Q19<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    STP             Q16<span class=\"token punctuation\">,</span> Q17<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    STP             Q14<span class=\"token punctuation\">,</span> Q15<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    STP             Q12<span class=\"token punctuation\">,</span> Q13<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    STP             Q10<span class=\"token punctuation\">,</span> Q11<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    STP             Q8<span class=\"token punctuation\">,</span> Q9<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    STP             Q6<span class=\"token punctuation\">,</span> Q7<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    STP             Q4<span class=\"token punctuation\">,</span> Q5<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    STP             Q2<span class=\"token punctuation\">,</span> Q3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    STP             Q0<span class=\"token punctuation\">,</span> Q1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    STP             X30<span class=\"token punctuation\">,</span> X31<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    STP             X28<span class=\"token punctuation\">,</span> X29<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    STP             X26<span class=\"token punctuation\">,</span> X27<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    STP             X24<span class=\"token punctuation\">,</span> X25<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    STP             X22<span class=\"token punctuation\">,</span> X23<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    STP             X20<span class=\"token punctuation\">,</span> X21<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    STP             X18<span class=\"token punctuation\">,</span> X19<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    STP             X16<span class=\"token punctuation\">,</span> X17<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    STP             X14<span class=\"token punctuation\">,</span> X15<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    STP             X12<span class=\"token punctuation\">,</span> X13<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    STP             X10<span class=\"token punctuation\">,</span> X11<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    STP             X8<span class=\"token punctuation\">,</span> X9<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    STP             X6<span class=\"token punctuation\">,</span> X7<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    STP             X4<span class=\"token punctuation\">,</span> X5<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    STP             X2<span class=\"token punctuation\">,</span> X3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    STP             X0<span class=\"token punctuation\">,</span> X1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    #特别注意<span class=\"token punctuation\">,</span>CPSR寄存器也要保存<span class=\"token punctuation\">,</span>不然只能打印一次值然后就崩溃了<span class=\"token operator\">-</span>m<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">aarch</span><span class=\"token expression\"><span class=\"token number\">64</span>不能和aarch32一样<span class=\"token punctuation\">,</span>直接访问CPSR得到所有的值<span class=\"token punctuation\">,</span>所以得分开来访问</span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    #看frida的hook之后的样子<span class=\"token punctuation\">,</span>看上去只需要保存NZCV寄存器就足够了</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    MRS             X1<span class=\"token punctuation\">,</span> NZCV</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">MRS             X0<span class=\"token punctuation\">,</span> DAIF</span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    STP             X0<span class=\"token punctuation\">,</span> X1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">,</span>#<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    MOV             X0<span class=\"token punctuation\">,</span> SP</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    LDR             X16<span class=\"token punctuation\">,</span> HOOK_MAIN_FUNC_ADDR</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    BLR             X16</pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    #恢复CPSR寄存器</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    LDP             X0<span class=\"token punctuation\">,</span> X1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    MSR             NZCV<span class=\"token punctuation\">,</span> X1</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">MSR             DAIF<span class=\"token punctuation\">,</span> X0</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    #恢复X0<span class=\"token operator\">-</span>X31<span class=\"token punctuation\">,</span>Q0<span class=\"token operator\">-</span>Q31寄存器</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    LDP             X0<span class=\"token punctuation\">,</span> X1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    LDP             X2<span class=\"token punctuation\">,</span> X3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    LDP             X4<span class=\"token punctuation\">,</span> X5<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    LDP             X6<span class=\"token punctuation\">,</span> X7<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    LDP             X8<span class=\"token punctuation\">,</span> X9<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    LDP             X10<span class=\"token punctuation\">,</span> X11<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    LDP             X12<span class=\"token punctuation\">,</span> X13<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    LDP             X14<span class=\"token punctuation\">,</span> X15<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    LDP             X16<span class=\"token punctuation\">,</span> X17<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    LDP             X18<span class=\"token punctuation\">,</span> X19<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    LDP             X20<span class=\"token punctuation\">,</span> X21<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    LDP             X22<span class=\"token punctuation\">,</span> X23<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    LDP             X24<span class=\"token punctuation\">,</span> X25<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    LDP             X26<span class=\"token punctuation\">,</span> X27<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    LDP             X28<span class=\"token punctuation\">,</span> X29<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    LDP             X30<span class=\"token punctuation\">,</span> X31<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    LDP             Q0<span class=\"token punctuation\">,</span> Q1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    LDP             Q2<span class=\"token punctuation\">,</span> Q3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    LDP             Q4<span class=\"token punctuation\">,</span> Q5<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    LDP             Q6<span class=\"token punctuation\">,</span> Q7<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    LDP             Q8<span class=\"token punctuation\">,</span> Q9<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    LDP             Q10<span class=\"token punctuation\">,</span> Q11<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    LDP             Q12<span class=\"token punctuation\">,</span> Q13<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    LDP             Q14<span class=\"token punctuation\">,</span> Q15<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    LDP             Q16<span class=\"token punctuation\">,</span> Q17<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    LDP             Q18<span class=\"token punctuation\">,</span> Q19<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    LDP             Q20<span class=\"token punctuation\">,</span> Q21<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    LDP             Q22<span class=\"token punctuation\">,</span> Q23<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    LDP             Q24<span class=\"token punctuation\">,</span> Q25<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    LDP             Q26<span class=\"token punctuation\">,</span> Q27<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    LDP             Q28<span class=\"token punctuation\">,</span> Q29<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    LDP             Q30<span class=\"token punctuation\">,</span> Q31<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>SP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>#<span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>_origin_patched_code_<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">.</span>dword <span class=\"token number\">0x1234567812345678</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">.</span>dword <span class=\"token number\">0x1234567812345678</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    LDR             X16<span class=\"token punctuation\">,</span> HOOK_FINISH_RETURN_ADDR</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    BR              X16</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>HOOK_MAIN_FUNC_ADDR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>_hook_main_func_addr_<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">.</span>dword <span class=\"token number\">0x1234567812345678</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>HOOK_FINISH_RETURN_ADDR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>_hook_finish_return_addr_<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">.</span>dword <span class=\"token number\">0x1234567812345678</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>_shellcode_end_<span class=\"token operator\">:</span></pre></td></tr></table></figure><h2 id=\"执行hook逻辑\"><a class=\"anchor\" href=\"#执行hook逻辑\">#</a> 执行 hook 逻辑</h2>\n<p>这里我们的 hook 逻辑很简单，就是打印调用函数 strlen 之后 X0 的值</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">hook_main</span><span class=\"token punctuation\">(</span>u_long sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enter hook main!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//sp -- sp+0x10 存储的是 NZCV 寄存器，从 sp+0x10 开始才是 x0-x31 的位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    u_long strlen_ret_value <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>u_long<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sp<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hook done! target function strlen return value is 0x%08lx\"</span><span class=\"token punctuation\">,</span>strlen_ret_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>终于现在我们也可以自己完成一次简单的 hook 了！</p>\n<p><img data-src=\"/frida-inline-hook/image-20240829154247205.png\" alt=\"image-20240829154247205\" style=\"aspect-ratio:1238 / 375;\"></p>\n<p>完整代码已经传到 github 上面啦 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29hY2lhL2lubGluZWhvb2tfZGVtbw==\">https://github.com/oacia/inlinehook_demo</span></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rLmNyaWZhbi5vcmcvYm9va3MvYW5kcm9pZF9yZV9keW5hbWljX2RlYnVnL3dlYnNpdGUvbGxkYl9kZWJ1Z19hbmRyb2lkL2xsZGJfZGVidWdfYW5kcm9pZF9wcm9jZXNzLmh0bWw=\">Mac 中：用 lldb 调试安卓 app 进程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5aXl1bmd3L2FydGljbGUvZGV0YWlscy84MTA2OTYzMQ==\">【工具使用】Android 调试利器之 LLDB</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pcmVlLmRldi9kZXZlbG9wZXJzL2RlYnVnZ2luZy9hbmRyb2lkLXdpdGgtbGxkYi8=\">Android LLDB debugging</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnhoeWVheC5jb20vMjAyMi8wNS8wNi9kZWJ1Zy1hbmRyb2lkLWJ5LWdkYi1hbmQtbGxkYi8=\">使用 GDB、LLDB 调试安卓程序</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjczMjczLmh0bQ==\">[原创] Frida inlineHook 原理分析及简单设计一款 AArch64 inlineHook 工具</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b21xdW5jaGFvLmdpdGh1Yi5pby8yMDIxLzAxLzE5L25vdGUvcmV2L2dhbWUtMS8=\">Android 下实现 ptrace 注入 &amp; hook</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L015QXJyb3cvYXJ0aWNsZS9kZXRhaWxzLzk2MzAzNzc=\">使用 ptrace 向已运行进程中注入.so 并执行相关函数</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1llbGxvd19NYXRyaXgvYXJ0aWNsZS9kZXRhaWxzLzEwNDE2NjI1Nw==\">Android 注入要点记录</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/bilibili-get-ticket/",
            "url": "https://oacia.dev/bilibili-get-ticket/",
            "title": "b站app漫展抢票",
            "date_published": "2024-07-13T10:14:21.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近萌生了想去漫展的想法，毕竟这么久了还没有去过一次漫展嘞，听说 cp30 好像不错，不过问题就是票特别的难抢😔</p>\n<p>趁现在 cp30 买票还没开始，今天也没有什么其他的事情，所以就简单分析了一下 b 站的 app，写了个抢票脚本自娱自乐一下</p>\n<p>感觉这个 app 还是很有意思的，它把主要的 webview 业务逻辑放到子进程里运行我觉得还是很不错滴，这样 frida 注入到主进程就 hook 不到了（我就被卡了快一个小时！）</p>\n<p>但这个抢票脚本写的相当的简陋，我就不好意思放出来啦😂不过相信大家在 github 上应该可以找到更加完善的项目吧 <code>:)</code></p>\n<p>还有就是为什么不直接去 b 站会员购网页端分析呢，这样购票接口不是一下子就看到了嘛就不需要绕各种检测了</p>\n<p><strong>just for fun!</strong></p>\n<h1 id=\"基本信息\"><a class=\"anchor\" href=\"#基本信息\">#</a> 基本信息</h1>\n<p>包名:  <code>tv.danmaku.bili</code></p>\n<p>入口:  <code>tv.danmaku.bili.MainActivityV2</code></p>\n<h1 id=\"frida反调试\"><a class=\"anchor\" href=\"#frida反调试\">#</a> frida 反调试</h1>\n<p>先看看会员购页面是哪一个 <code>activity</code>  的</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS D:<span class=\"token punctuation\">\\</span>work<span class=\"token punctuation\">\\</span>analysis<span class=\"token punctuation\">\\</span>bilibili<span class=\"token operator\">></span> adb shell <span class=\"token string\">\"dumpsys activity top | grep ACTIVITY\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ACTIVITY com.google.android.apps.nexuslauncher/.NexusLauncherActivity ad36d3f <span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token number\">2139</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ACTIVITY tv.danmaku.bili/.MainActivityV2 e753a0a <span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token number\">12505</span></pre></td></tr></table></figure><p>用 frida 写个简单的 hook 脚本注入进去看看情况</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> activity <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mall.ui.page.base.MallWebFragmentLoaderActivity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        activity<span class=\"token punctuation\">.</span>onCreate<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.os.Bundle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">const</span> retv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> retv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oriole:/data/local/tmp <span class=\"token comment\"># /data/local/tmp/fs16.3.3 -l 0.0.0.0:1234</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>adb forward tcp:1234 tcp:1234</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>frida <span class=\"token parameter variable\">-H</span> <span class=\"token number\">127.0</span>.0.1:1234 <span class=\"token parameter variable\">-l</span> .<span class=\"token punctuation\">\\</span>hook.js <span class=\"token parameter variable\">-f</span> tv.danmaku.bili</pre></td></tr></table></figure><p>注入进去之后不出意料的卡在主界面不动了</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713222856973.png\" alt=\"image-20240713222856973\" style=\"aspect-ratio:408 / 908;\"></p>\n<p>去看看是在哪一个 so 卡住的</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dlopen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load \"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_dlopen<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>哈哈没想到是 <code>libmsaoaidsec.so</code> , 这个 so 我在很多的 apk 里面都看到过了，按照以前逆向的经验这个 so 里面没有任何的业务代码，在 <code>init_proc</code>  里面是纯的检测逻辑</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713222907116.png\" alt=\"image-20240713222907116\" style=\"aspect-ratio:2860 / 631;\"></p>\n<p>我对 <code>libmsaoaidsec.so</code>  里面的控制流平坦化还是很感兴趣的，之后会去专门分析一下这个 so:)</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713222916985.png\" alt=\"image-20240713222916985\" style=\"aspect-ratio:1434 / 774;\"></p>\n<p>现在我们就用最简单的方法去反调试好啦，就是不让 app 加载这个 so, 具体做法就是在打开这个 so 时，把要加载的 so 的字符串置空</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dlopen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libmsaoaidsec.so'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load \"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_dlopen_anti<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>再次注入代码之后就 hook 成功了</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713222925964.png\" alt=\"image-20240713222925964\" style=\"aspect-ratio:1348 / 497;\"></p>\n<h1 id=\"webview-chrome调试\"><a class=\"anchor\" href=\"#webview-chrome调试\">#</a> webview chrome 调试</h1>\n<p>用 <code>Device Monitor</code>  看一下购票的页面，发现是套了一个 <code>WebView</code></p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713222934485.png\" alt=\"image-20240713222934485\" style=\"aspect-ratio:2524 / 1446;\"></p>\n<p>想要在 android 中使用 chrome 的 devtool 开启 webview debug, 需要注入下面的 frida 脚本</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">webview_debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> WebView <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.webkit.WebView'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        WebView<span class=\"token punctuation\">.</span>$init<span class=\"token punctuation\">.</span>overloads<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">init</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            init<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 调用原始构造方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 打开 WebView 的调试功能</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                WebView<span class=\"token punctuation\">.</span><span class=\"token function\">setWebContentsDebuggingEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[*] WebView debug open~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 返回实例</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后使用 USB 将电脑和手机相连</p>\n<p>在电脑端的 chrome 打开 <code>chrome://inspect/#devices</code></p>\n<p>之后我们点击这个 <code>Port forwarding</code>  按钮配置端口转发</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713222956316.png\" alt=\"image-20240713222956316\" style=\"aspect-ratio:565 / 226;\"></p>\n<p>然后 选一个端口点击 <code>Done</code></p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713223022350.png\" alt=\"image-20240713223022350\" style=\"aspect-ratio:458 / 509;\"></p>\n<p>但是这样做并没有什么网页可以 <code>inspect</code></p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713223028761.png\" alt=\"image-20240713223028761\" style=\"aspect-ratio:697 / 509;\"></p>\n<p>通过 <code>device monitor</code>  来看，这个 b 站肯定是调用了 <code>Webview</code>  的，那为什么这个脚本没有 hook 到 Webview 的创建呢？我觉得可能的原因就是 webview 并不是在主进程被创建的，而是在子进程被创建的，我们打印一下 bilibili 建立的进程来看看情况</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713223040869.png\" alt=\"image-20240713223040869\" style=\"aspect-ratio:1683 / 191;\"></p>\n<p>的确，除了主进程之外，还多了其他的四个进程，感觉这个 <code>web</code>  进程很可疑呀</p>\n<p>那写个 python 脚本让 frida 也去注入这个 <code>tv.danmaku.bili:web</code>  子进程好啦</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> codecs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> frida</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>device <span class=\"token operator\">=</span> frida<span class=\"token punctuation\">.</span>get_device_manager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add_remote_device<span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:1234\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pending <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sessions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>scripts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>event <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>jscode <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./hook.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pkg <span class=\"token operator\">=</span> <span class=\"token string\">\"tv.danmaku.bili\"</span>  <span class=\"token comment\">#包名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">spawn_added</span><span class=\"token punctuation\">(</span>spawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    event<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> spawn<span class=\"token punctuation\">.</span>identifier <span class=\"token operator\">==</span> pkg <span class=\"token keyword\">or</span> spawn<span class=\"token punctuation\">.</span>identifier <span class=\"token operator\">==</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>pkg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">:web\"</span></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'spawn_added:'</span><span class=\"token punctuation\">,</span> spawn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        session <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>spawn<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        script <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>create_script<span class=\"token punctuation\">(</span>jscode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        script<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> on_message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        script<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    device<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">(</span>spawn<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">spawn_removed</span><span class=\"token punctuation\">(</span>spawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'spawn_removed:'</span><span class=\"token punctuation\">,</span> spawn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    event<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>spawn<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'on_message:'</span><span class=\"token punctuation\">,</span> spawn<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'send'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] &#123;0&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>device<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'spawn-added'</span><span class=\"token punctuation\">,</span> spawn_added<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>device<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'spawn-removed'</span><span class=\"token punctuation\">,</span> spawn_removed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>device<span class=\"token punctuation\">.</span>enable_spawn_gating<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>event <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enabled spawn gating'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>pid <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pkg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>session <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Attach Application id:\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>device<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样就 hook 到子进程啦</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713223048889.png\" alt=\"image-20240713223048889\" style=\"aspect-ratio:1856 / 2124;\"></p>\n<p>打开了 webview 的 debug 之后，终于可以 inspect 了！</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713223059764.png\" alt=\"image-20240713223059764\" style=\"aspect-ratio:3840 / 2059;\"></p>\n<p>之后的过程就很简单啦</p>\n<ol>\n<li>点击漫展详情，抓个包</li>\n<li>点击立即购票，抓个包</li>\n<li>点击提交订单，抓个包</li>\n</ol>\n<p>我写了一个小脚本还挺好用的，用这个 js 脚本可以读取剪切板里的 curl 请求并转换为 python 的 request 请求复制到剪切板上 <code>:)</code></p>\n<p>剪切板里的 curl 请求是从这里来的</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713225910636.png\" alt=\"image-20240713225910636\" style=\"aspect-ratio:664 / 810;\"></p>\n<p>记得安装一下包就好了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i curlconverter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> i copy-paste</pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> curlconverter <span class=\"token keyword\">from</span> <span class=\"token string\">'curlconverter'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ncp <span class=\"token keyword\">from</span> <span class=\"token string\">'copy-paste'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> cmd <span class=\"token operator\">=</span> ncp<span class=\"token punctuation\">.</span><span class=\"token function\">paste</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> curlconverter<span class=\"token punctuation\">.</span><span class=\"token function\">toPython</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ncp<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>分析一下接口，写一下脚本就抢票成功啦</p>\n<p><img data-src=\"/bilibili-get-ticket/image-20240713225457049.png\" alt=\"image-20240713225457049\" style=\"aspect-ratio:3435 / 1934;\"></p>\n<p><code>waiting for cp30!</code></p>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/ollvm-study/",
            "url": "https://oacia.dev/ollvm-study/",
            "title": "ollvm三种混淆模式的反混淆思路",
            "date_published": "2024-07-12T01:24:52.000Z",
            "content_html": "<blockquote>\n<p>ollvm 算是日常逆向的过程中的一个难点，试想一下当你把程序拖进 ida 后那无穷无尽的 block 出现在面前的感受，这滋味一言难尽呐…</p>\n<p>所以很有必要对 ollvm 的混淆与反混淆进行系统的学习，以便在未来实际生活中遇到时，不必慌忙的去 google 寻找答案.</p>\n</blockquote>\n<p>文中的分析所用到的附件可以点这里下载哦<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vYWNpYS5naXRodWIuaW8vb2xsdm0tc3R1ZHkvb2xsdm1fYmNmLWZsYS1zdWIuemlw\"> ollvm_bcf-fla-sub.zip</span></p>\n<h1 id=\"预备知识\"><a class=\"anchor\" href=\"#预备知识\">#</a> 预备知识</h1>\n<p>llvm 是一个完整的编译器架构，作用可以理解为制作一个编译器，llvm 先将源码生成为与目标机器无关的 LLVM IR 代码，然后把 LLVMIR 代码先优化，再向目标机器的汇编语言而努力。经典编译器都可以分为前端、中层优化和后端：</p>\n<p><img data-src=\"/ollvm-study/image-20230726095250772.png\" alt=\"image-20230726095250772\" style=\"aspect-ratio:976 / 525;\"></p>\n<p>从上图中可以看到 clang 是前端的一个套件，但在实际使用时，我们只可以感受到 clang，也只是在使用 clang，因为编译的时候，是调用 clang 或 clang++ 来编译源码。</p>\n<p>而 ollvm 是基于 LLVM 的代码分支的代码混淆，在中间表示 IR 层，通过编写 pass（遍历一遍 IR，可以同时对它做一些操作）来混淆 IR，这样目标机器的汇编语言也就被混淆了</p>\n<h1 id=\"ollvm环境搭建\"><a class=\"anchor\" href=\"#ollvm环境搭建\">#</a> ollvm 环境搭建</h1>\n<p>ollvm 搭建的环境为</p>\n<ul>\n<li>ubuntu22.04</li>\n</ul>\n<h2 id=\"下载ollvm-40源码\"><a class=\"anchor\" href=\"#下载ollvm-40源码\">#</a> 下载 ollvm 4.0 源码</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> llvm-4.0 <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/obfuscator-llvm/obfuscator.git</pre></td></tr></table></figure><h2 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 docker</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker.io</pre></td></tr></table></figure><h2 id=\"安装编译ollvm的docker环境\"><a class=\"anchor\" href=\"#安装编译ollvm的docker环境\">#</a> 安装编译 ollvm 的 docker 环境</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> pull nickdiego/ollvm-build</pre></td></tr></table></figure><h2 id=\"编译ollvm\"><a class=\"anchor\" href=\"#编译ollvm\">#</a> 编译 ollvm</h2>\n<h3 id=\"下载编译脚本\"><a class=\"anchor\" href=\"#下载编译脚本\">#</a> 下载编译脚本</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/oacia/docker-ollvm.git</pre></td></tr></table></figure><h3 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h3>\n<p><code>ollvm-build.sh</code>  后面跟的参数是 <code>ollvm的源码目录</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> docker-ollvm/ollvm-build.sh /home/oacia/Desktop/obfuscator/</pre></td></tr></table></figure><h2 id=\"创建硬链接\"><a class=\"anchor\" href=\"#创建硬链接\">#</a> 创建硬链接</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> ./obfuscator/build_release/bin/* /usr/bin/</pre></td></tr></table></figure><p>创建完成硬链接后，使用该命令来检测 <code>clang</code>  是否可用</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clang <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><h2 id=\"使用测试代码尝试编译\"><a class=\"anchor\" href=\"#使用测试代码尝试编译\">#</a> 使用测试代码尝试编译</h2>\n<p>使用一个简单的 RC4 加密来作为测试代码，<strong> 该代码将在后续 ollvm 的三种混淆中继续使用</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//test.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>RC4 初始化函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rc4_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">char</span> k<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tk<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> Len_k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\ttmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>RC4 加解密函数</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>unsigned char* Data     加解密的数据</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>unsigned long Len_D     加解密数据的长度</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>unsigned char* key      密钥</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>unsigned long Len_k     密钥长度</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RC4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> Data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_D<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_k<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加解密</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">rc4_init</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> Len_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> Len_D<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\ti <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\ttmp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tData<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> s<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RC4encrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> Data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_D<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">RC4</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> Len_D<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> Len_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RC4decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> Data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_D<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> Len_k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">RC4</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span> Len_D<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> Len_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 字符串密钥</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> key_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 字符串最后还有一个 '/0' 所以需要 - 1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 数组密钥</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">//unsigned char key[] = &#123;'s','e','c','r','e','t'&#125;;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">//unsigned long key_len = sizeof(key);</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">116</span><span class=\"token punctuation\">,</span> <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 对明文进行加密</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">RC4encrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 对密文进行解密</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">RC4encrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>153, 94, 187, 111, 162, 205, 165, 134, 96, 136, 143, 240, 156, 135, 150, 94, 204,</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>this is RC4,oacia</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>*/</pre></td></tr></table></figure><p>运行如下命令进行编译</p>\n<pre><code>clang test.c -o test\n</code></pre>\n<ul>\n<li><strong>如果提示 fatal error: ‘stdio.h’ file not found</strong></li>\n</ul>\n<p>​\t尝试下载 g++ 和 gcc</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> g++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> gcc</pre></td></tr></table></figure><ul>\n<li><strong>如果提示 fatal error: 'stddef.h’或者’stdarg.h’等 file not found</strong></li>\n</ul>\n<p>使用该命令复制 clang 所需的头文件到 <code>/usr/include/</code> ,  <code>cp -r -i</code>  后面跟的参数为 <code>ollvm的源码目录/build_release/lib/clang/4.0.1/include/.</code> , 这个文件夹内包含了 <code>clang</code>  编译器所需的头文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> <span class=\"token parameter variable\">-i</span> /home/oacia/Desktop/obfuscator/build_release/lib/clang/4.0.1/include/. /usr/include/</pre></td></tr></table></figure><p>如果提示有重名文件的话，最好先对 <code>/usr/include</code>  内的重名文件作好备份，然后去掉 <code>-i</code>  参数重新进行复制头文件操作</p>\n<h1 id=\"虚假控制流bcfbogus-control-flow\"><a class=\"anchor\" href=\"#虚假控制流bcfbogus-control-flow\">#</a> 虚假控制流 BCF (Bogus Control Flow)</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>虚假控制流混淆通过加入包含<strong>不透明谓词</strong>的条件跳转（也就是跳转与否在运行之前就已经确定的跳转，但 IDA 无法分析）和<strong>不可达的基本块</strong>，来干扰 IDA 的控制流分析和 F5 反汇编。</p>\n<p>所谓的不透明谓词，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">goto</span> Label1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于这类表达式，我们可以很明显的看到， <code>x&gt;10 &amp;&amp; x&lt;=10</code>  是永假式，所以 <code>goto Label1</code>  这个跳转永远不会被执行，但是对于 IDA 来说可不是这个样子，在静态分析的时候，IDA 并不知道 <code>x</code>  的值是多少，所以说这类虚假控制流就会干扰我们的静态分析.</p>\n<h2 id=\"ollvm的bcf混淆\"><a class=\"anchor\" href=\"#ollvm的bcf混淆\">#</a> ollvm 的 BCF 混淆</h2>\n<p>使用下列命令对代码进行 BCF 混淆</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clang <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-bcf</span> <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-bcf_loop</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-bcf_prob</span><span class=\"token operator\">=</span><span class=\"token number\">40</span> test.c <span class=\"token parameter variable\">-o</span> test-bcf</pre></td></tr></table></figure><p>可用选项：</p>\n<ul>\n<li><code>-mllvm -bcf </code> : 激活虚假控制流</li>\n<li><code>-mllvm -bcf_loop=3</code>  : 混淆次数，这里一个函数会被混淆 3 次，默认为 1</li>\n<li><code>-mllvm -bcf_prob=40</code>  : 每个基本块被混淆的概率，这里每个基本块被混淆的概率为 40%，默认为 30 %</li>\n</ul>\n<hr>\n<p>可以发现在 BCF 混淆之后，函数的控制流明显复杂了许多</p>\n<p><img data-src=\"/ollvm-study/image-20230727162443249.png\" alt=\"image-20230727162443249\" style=\"aspect-ratio:1488 / 812;\"></p>\n<p>打开 BCF 混淆之后 IDA 的伪代码，发现多了许多的 <code>while</code> , <code>if</code>  表达式，伪代码变得十分复杂，也让我们无法一眼就可以看出这是何种加密</p>\n<p><img data-src=\"/ollvm-study/image-20230727162652645.png\" alt=\"image-20230727162652645\" style=\"aspect-ratio:1286 / 684;\"></p>\n<h2 id=\"ollvm的bcf反混淆\"><a class=\"anchor\" href=\"#ollvm的bcf反混淆\">#</a> ollvm 的 BCF 反混淆</h2>\n<p>铺垫了这么长的时间，终于要来到本篇文章的第一个有趣的环节，BCF 的反混淆了</p>\n<p>我们往上看 <code>while</code>  内的表达式 <code>y_4 &gt;= 10 &amp;&amp; (((x_3 - 1) * x_3) &amp; 1) != 0</code> , 在这个式子中， <code>(x_3 - 1) * x_3)</code>  的值永远为偶数，所以 <code>(x_3 - 1) * x_3) &amp; 1</code>  永远返回 <code>0</code> , 不等号左边 <code>y_4 &gt;= 10 &amp;&amp; (((x_3 - 1) * x_3) &amp; 1)</code> , 因为是用逻辑与 <code>&amp;&amp;</code>  作为连接词，所以左侧的表达式其实为永假式， <code>y_4 &gt;= 10 &amp;&amp; (((x_3 - 1) * x_3) &amp; 1) != 0</code>  永远不成立</p>\n<p>对于 BCF, 有 3 种思路可以帮助我们去进行反混淆</p>\n<h3 id=\"思路一-将全局变量赋值并将segment设为只读\"><a class=\"anchor\" href=\"#思路一-将全局变量赋值并将segment设为只读\">#</a> 思路一 将全局变量赋值并将 segment 设为只读</h3>\n<p>IDA 其实是有死代码消除 (DCE, Dead Code Elimination) 的，但是由于 <code>y_4</code> , <code>x_3</code>  被定义为了全局变量，在静态分析时，IDA 不知道这个表达式的值是多少，所以 IDA 也不敢轻易的就把这段代码给消除了 (万一把重要的代码也给消除掉了那逆向人员真的要 *** 了)</p>\n<p>但是如果我们把这个变量的值定下来，并且将变量所在的 <code>segment</code>  设为 <code>只读</code> ，那这个变量值在没运行前也变不了，IDA 不就可以自己算出来这个表达式的值是多少了嘛，这样那些没有用的跳转 IDA 就可以自动优化了</p>\n<p>所以我们先双击 <code>x_3</code>  跳转到 <code>x_3</code>  的地址</p>\n<p><img data-src=\"/ollvm-study/image-20230727185741834.png\" alt=\"image-20230727185741834\" style=\"aspect-ratio:849 / 81;\"></p>\n<p>然后按下<span class=\"kbd\"> Alt</span>+<span class=\"kbd\">S</span> 或者 <code>Edit-&gt;Segments-&gt;Edit segment...</code>  来改变不透明谓词所在的 segment 的读写属性，如图将 <code>Write</code>  复选框取消勾选， <code>.bss段</code> 就设为只读了</p>\n<p><img data-src=\"/ollvm-study/image-20230727203726728.png\" alt=\"image-20230727203726728\" style=\"aspect-ratio:742 / 427;\"></p>\n<p>光是这样还不够，因为 <code>.bss段</code> 中的变量还没有被赋过值，所以我们还需要 patch 这个段来固定 <code>.bss段</code> 内变量的值</p>\n<p>一个变量一个变量去 patch 显然显得有些麻烦，所以我们可以直接编写 IDApython 脚本来实现一步到位的效果，并且对于常规的 ollvm 的 bcf 混淆来说，bcf 的不透明谓词都是处于 <code>.bss段</code> 中。如果不透明谓词定义在其他段中，将 IDApython 中的代码做出相对应的修改即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ida_segment</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>seg <span class=\"token operator\">=</span> ida_segment<span class=\"token punctuation\">.</span>get_segm_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.bss'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> ea <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">.</span>start_ea<span class=\"token punctuation\">,</span> seg<span class=\"token punctuation\">.</span>end_ea<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ida_bytes<span class=\"token punctuation\">.</span>patch_bytes<span class=\"token punctuation\">(</span>ea<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>seg.perm: 由三位二进制数表示,例如一个segment为可读,不可写,不可执行,则seg.perm = 0b100</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>(seg.perm >> 2)&amp;1: Read</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>(seg.perm >> 1)&amp;1: Write</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>(seg.perm >> 0)&amp;1: Execute</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>seg<span class=\"token punctuation\">.</span>perm <span class=\"token operator\">=</span> <span class=\"token number\">0b100</span></pre></td></tr></table></figure><h3 id=\"思路二-使用d810去除bcf\"><a class=\"anchor\" href=\"#思路二-使用d810去除bcf\">#</a> 思路二 使用 d810 去除 BCF</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuY29tL2VzaGFyZC9kODEw\">d810</span> 中内置了很多的不透明谓词表达式，它的匹配器也是非常的厉害完全可以做到去除虚假控制流</p>\n<p>在 <code>Edit-&gt;plugins-&gt;D-810</code>  打开之后，选择 <code>default_unflattening_switch_case.json</code>  之后点击 <code>start</code> , 即可做到对不透明谓词的去除并还原控制流</p>\n<p><img data-src=\"/ollvm-study/image-20240711153007836.png\" alt=\"image-20240711153007836\" style=\"aspect-ratio:1523 / 701;\"></p>\n<p>还原后的效果如下，可以发现和原本的代码基本是一样的了</p>\n<p><img data-src=\"/ollvm-study/image-20240711153057510.png\" alt=\"image-20240711153057510\" style=\"aspect-ratio:1034 / 646;\"></p>\n<p>当然如果发现有一些恒定值的不透明谓词表达式 d810 没有识别到无法去除的话，我们也可以手动添加规则让 D810 进行匹配来消除 BCF</p>\n<p>例如对于这个表达式 <code>((x_0&gt;=10 &amp;&amp; x_10&lt;10)==false) == True</code> , 我们可以先在 <code>\\plugins\\d810\\conf\\xxx.json</code>  里面添加我们自己的规则</p>\n<p><img data-src=\"/ollvm-study/image-20240712102230251.png\" alt=\"image-20240712102230251\" style=\"aspect-ratio:658 / 547;\"></p>\n<p>随后来到 <code>plugins\\d810\\optimizers\\instructions\\pattern_matching\\rewrite_and.py</code>  中加一个我们自己的类 <code>OaciaRule0</code> , 这样就可以完成一个自定义规则的导入啦</p>\n<p><img data-src=\"/ollvm-study/image-20240712102331669.png\" alt=\"image-20240712102331669\" style=\"aspect-ratio:1220 / 499;\"></p>\n<h3 id=\"思路三-使用idapython-patch不透明谓词\"><a class=\"anchor\" href=\"#思路三-使用idapython-patch不透明谓词\">#</a> 思路三 使用 idapython patch 不透明谓词</h3>\n<p>在思路一中，我们通过对不透明谓词变量进行交叉引用找到了它们所在的 segment, 并通过将全局变量赋值并将 segment 设为只读的方法消除了 BCF, 但是其实我们还可以用另外的一种方式去消除 bcf, 就是在汇编中将不透明谓词直接 patch 掉</p>\n<p>例如对于该不透明谓词 <code>x_9</code> , <code>y_10</code> , 它的 c 表达式为 <code>y_10 &gt;= 10 &amp;&amp; ((((_BYTE)x_9 - 1) * (_BYTE)x_9) &amp; 1) != 0</code></p>\n<p><img data-src=\"/ollvm-study/image-20240712103021119.png\" alt=\"image-20240712103021119\" style=\"aspect-ratio:945 / 482;\"></p>\n<p>我们要做的就是让 <code>mov     eax, ds:x_9</code>  改成 <code>mov     eax, 0</code> , 这样就可以做到消除 BCF 的目的</p>\n<p><img data-src=\"/ollvm-study/image-20240712103224264.png\" alt=\"image-20240712103224264\" style=\"aspect-ratio:866 / 454;\"></p>\n<p>但是这样一个一个改过去显得十分的麻烦，所以我们可以用 ida python, 通过找到不透明谓词的所有交叉引用的方式来批量修改</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 去除虚假控制流 idapython 脚本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ida_xref</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ida_idaapi</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> ida_bytes <span class=\"token keyword\">import</span> get_bytes<span class=\"token punctuation\">,</span> patch_bytes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 将 mov 寄存器，不透明谓词 修改为 mov 寄存器，0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">do_patch</span><span class=\"token punctuation\">(</span>ea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> get_bytes<span class=\"token punctuation\">(</span>ea<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">b\"\\x8B\"</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># mov eax-edi, dword</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>get_bytes<span class=\"token punctuation\">(</span>ea <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b00111000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        patch_bytes<span class=\"token punctuation\">(</span>ea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0xB8</span> <span class=\"token operator\">+</span> reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'\\x00\\x00\\x00\\x00\\x90\\x90'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 不透明谓词在.bss 段的范围</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>seg <span class=\"token operator\">=</span> ida_segment<span class=\"token punctuation\">.</span>get_segm_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.bss'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>start <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span>start_ea</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>end <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span>end_ea</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> addr <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ref <span class=\"token operator\">=</span> ida_xref<span class=\"token punctuation\">.</span>get_first_dref_to<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\"># 获取所有交叉引用</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ref <span class=\"token operator\">!=</span> ida_idaapi<span class=\"token punctuation\">.</span>BADADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        do_patch<span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'patch at '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ref <span class=\"token operator\">=</span> ida_xref<span class=\"token punctuation\">.</span>get_next_dref_to<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样 BCF 就被去掉啦</p>\n<p><img data-src=\"/ollvm-study/image-20240712104339001.png\" alt=\"image-20240712104339001\" style=\"aspect-ratio:1102 / 607;\"></p>\n<h1 id=\"指令替换sub\"><a class=\"anchor\" href=\"#指令替换sub\">#</a> 指令替换（SUB）</h1>\n<h2 id=\"原理-2\"><a class=\"anchor\" href=\"#原理-2\">#</a> 原理</h2>\n<p>指令替换（Instruction Substitution）是一种代码混淆技术，用于将程序中的原始指令替换为等效但更难理解和还原的指令序列。通过指令替换，可以增加程序的复杂性和抵抗逆向工程的能力。</p>\n<p>它的本质其实就是数学公式的简化，例如 <code>(x + y) - 2 * (x &amp; y) -&gt; x ^ y</code>  (过去学离散数学感觉做的就是这种样子的…)</p>\n<h2 id=\"ollvm的sub混淆\"><a class=\"anchor\" href=\"#ollvm的sub混淆\">#</a> ollvm 的 SUB 混淆</h2>\n<p>使用下面的命令对代码进行 SUB 混淆</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clang <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-sub</span> <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-sub_loop</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> test-sub.c <span class=\"token parameter variable\">-o</span> test-sub</pre></td></tr></table></figure><p>可用选项</p>\n<ul>\n<li><code>-mllvm -sub</code>  : 激活指令替换</li>\n<li><code>-mllvm -sub_loop=3</code> : 混淆次数，这里一个函数会被混淆 3 次，默认为 1 次</li>\n</ul>\n<p>经过指令替换后，代码明显变长了很多</p>\n<p><img data-src=\"/ollvm-study/image-20240712105930858.png\" alt=\"image-20240712105930858\" style=\"aspect-ratio:1523 / 668;\"></p>\n<h2 id=\"ollvm的sub反混淆\"><a class=\"anchor\" href=\"#ollvm的sub反混淆\">#</a> ollvm 的 SUB 反混淆</h2>\n<h3 id=\"思路一-使用d810去除sub\"><a class=\"anchor\" href=\"#思路一-使用d810去除sub\">#</a> 思路一 使用 d810 去除 SUB</h3>\n<p>D810 太猛了！这里又用到了 D810</p>\n<p>还是和去除 BCF 反混淆一样，我们直接跑一下 d810, 虽然还是有一些部分没有去掉，但是看起来已经很清晰了，因为指令替换不影响程序整体的执行逻辑，所以我想剩下的一点点 SUB 应该难不倒逆向的同学吧～</p>\n<p><img data-src=\"/ollvm-study/image-20240712110422977.png\" alt=\"image-20240712110422977\" style=\"aspect-ratio:1510 / 659;\"></p>\n<h3 id=\"思路二-使用gamba简化复杂的sub表达式\"><a class=\"anchor\" href=\"#思路二-使用gamba简化复杂的sub表达式\">#</a> 思路二 使用 GAMBA 简化复杂的 SUB 表达式</h3>\n<p>这个思路二其实就是思路一那一点点未解决的 SUB 的补充，对于一些复杂的表达式来说，github 上的开源工具<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RlbnV2b1NvZnR3YXJlU29sdXRpb25zL0dBTUJB\"> GAMBA</span> 可以很好的帮助我们简化</p>\n<p>具体可以参考<a href=\"https://oacia.dev/sec-2023/\">细品 sec2023 安卓赛题</a>中的 <code>加密三 vm 指令分析</code></p>\n<p><img data-src=\"/ollvm-study/image-20240712111021857.png\" alt=\"image-20240712111021857\" style=\"aspect-ratio:1073 / 771;\"></p>\n<h1 id=\"控制流平坦化fla\"><a class=\"anchor\" href=\"#控制流平坦化fla\">#</a> 控制流平坦化（FLA）</h1>\n<h2 id=\"原理-3\"><a class=\"anchor\" href=\"#原理-3\">#</a> 原理</h2>\n<p>控制流平坦化 (control flow flattening) 的基本思想主要是通过一个主分发器来控制程序基本块的执行流程，例如下图是正常的执行流程</p>\n<p><img data-src=\"/ollvm-study/bb352c9f40d9ae979f5ac203fc2eb835.png\" alt=\"img\" style=\"aspect-ratio:579 / 169;\"></p>\n<p>经过控制流平坦化后的执行流程就如下图</p>\n<p><img data-src=\"/ollvm-study/471ec1aa469805a15db47e130dde5485.png\" alt=\"img\" style=\"aspect-ratio:683 / 263;\"></p>\n<p>这样可以模糊基本块之间的前后关系</p>\n<p>此图是一个经典的控制流平坦化 CFG</p>\n<p><img data-src=\"/ollvm-study/b6d9662e5a216ac6e7a976dd8d814a79.png\" alt=\"img\" style=\"aspect-ratio:1125 / 1052;\"></p>\n<p>其中</p>\n<ul>\n<li>序言：函数的第一个执行的基本块</li>\n<li>主 (子) 分发器：控制程序跳转到下一个待执行的基本块</li>\n<li>retn 块：函数出口</li>\n<li>真实块：混淆前的基本块，程序真正执行工作的块</li>\n<li>预处理器：跳转到主分发器</li>\n</ul>\n<h2 id=\"ollvm的fla混淆\"><a class=\"anchor\" href=\"#ollvm的fla混淆\">#</a> ollvm 的 FLA 混淆</h2>\n<p>使用如下命令即可完成 fla 混淆</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clang <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-fla</span> <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-split</span> <span class=\"token parameter variable\">-mllvm</span> <span class=\"token parameter variable\">-split_num</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> test-fla.c <span class=\"token parameter variable\">-o</span> test-fla</pre></td></tr></table></figure><p>可用选项：</p>\n<ul>\n<li>-mllvm -fla : 激活控制流平坦化</li>\n<li>-mllvm -split : 激活基本块分割</li>\n<li>-mllvm -split_num=3 : 指定基本块分割的数目</li>\n</ul>\n<p>经过控制流平坦化之后，函数的逻辑已经很难看清楚了</p>\n<p><img data-src=\"/ollvm-study/image-20240712132834341.png\" alt=\"image-20240712132834341\" style=\"aspect-ratio:745 / 806;\"></p>\n<h2 id=\"ollvm的fla反混淆\"><a class=\"anchor\" href=\"#ollvm的fla反混淆\">#</a> ollvm 的 FLA 反混淆</h2>\n<p>想要定位各个块其实很简单，对于经典的 ollvm 来说，各个块之间有如下规则 (要是魔改的话就具体情况具体分析啦)</p>\n<ol>\n<li>找到<strong>序言块</strong>，这是整个函数的入口</li>\n<li>序言块的后继是<strong>主分发器</strong></li>\n<li>主分发器的前驱有两个，除了序言块外，另一个块就是<strong>预处理器</strong></li>\n<li>预处理器的前驱是<strong>真实块</strong></li>\n<li>除此之外的其他块是<strong>子分发器</strong></li>\n</ol>\n<p><img data-src=\"/ollvm-study/image-20240712132814751.png\" alt=\"image-20240712132814751\" style=\"aspect-ratio:990 / 856;\"></p>\n<p>想要反控制流平坦化，我们只需要做 3 步</p>\n<ol>\n<li>找到真实块。我们可以手动找真实块；可以用 idapython 通过各个块之间的联系通过一定的规则找真实块；可以用 unicorn 或 angr 得到函数的 CFG, 利用规则匹配出真实块… 方法多种多样，但是核心都是找到真实块，除真实块和序言块外，其余的块都是虚假块，我们需要 NOP 掉他们</li>\n<li>得到真实块之间的联系。我们主要想知道分支跳转的另一个分支，它究竟跳到了什么地方去的呢？所以这一步我们必须得让代码运行起来，它把控制流给混淆了，我们要是不把代码跑起来咋知道控制流嘞？可以用模拟执行，也可以在真机调试打断点 trace, 核心都是为了找到真实块之间的调用关系</li>\n<li>得到了真实块之间的联系之后，我们只需要在每个真实块的末尾，用跳转汇编指令将每个真实块像串糖葫芦一样串起来，控制流平坦化就修复好啦～</li>\n</ol>\n<p>所以开始我们的第一步找到真实块和虚假块，对于标准的 ollvm 来说，观察得知预处理器的前驱都是真实块，所以我们写出如下的 idapython 脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> idaapi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>target_func <span class=\"token operator\">=</span> <span class=\"token number\">0x401E80</span><span class=\"token comment\">#需要反控制流平坦化的函数的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Preprocessor_block <span class=\"token operator\">=</span> <span class=\"token number\">0x402697</span><span class=\"token comment\">#ollvm 中预处理器的地址，这个是通过观察 ida 中的 CFG 得到的，预处理器的前驱都是真实块</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>True_blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#真实块列表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Fake_blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#所有块的列表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f_block <span class=\"token operator\">=</span> idaapi<span class=\"token punctuation\">.</span>FlowChart<span class=\"token punctuation\">(</span>idaapi<span class=\"token punctuation\">.</span>get_func<span class=\"token punctuation\">(</span><span class=\"token number\">0x401E80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span>idaapi<span class=\"token punctuation\">.</span>FC_PREDS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> block <span class=\"token keyword\">in</span> f_block<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> block<span class=\"token punctuation\">.</span>start_ea<span class=\"token operator\">==</span>Preprocessor_block<span class=\"token punctuation\">:</span><span class=\"token comment\">#预处理器块的前驱都是真实块</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">#but 预处理器是虚假块</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Fake_blocks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>start_ea<span class=\"token punctuation\">,</span>idc<span class=\"token punctuation\">.</span>prev_head<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>end_ea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find ture block!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        tbs <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>preds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> tb <span class=\"token keyword\">in</span> tbs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">#print (hex (tb.start_ea),hex (idc.prev_head (tb.end_ea)))# 获取块的开始 / 结束地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            True_blocks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">.</span>start_ea<span class=\"token punctuation\">,</span>idc<span class=\"token punctuation\">.</span>prev_head<span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">.</span>end_ea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> block<span class=\"token punctuation\">.</span>succs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#返回块没有后继</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find ret block!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        True_blocks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>start_ea<span class=\"token punctuation\">,</span>idc<span class=\"token punctuation\">.</span>prev_head<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>end_ea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 序言块不作为虚假块处理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">elif</span> block<span class=\"token punctuation\">.</span>start_ea<span class=\"token operator\">!=</span>target_func<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">#print(hex(block.start_ea),hex(idc.prev_head(block.end_ea)))</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Fake_blocks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>start_ea<span class=\"token punctuation\">,</span>idc<span class=\"token punctuation\">.</span>prev_head<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>end_ea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true block:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tbs ='</span><span class=\"token punctuation\">,</span>True_blocks<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake block:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fbs ='</span><span class=\"token punctuation\">,</span>Fake_blocks<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>之后就是要得到真实块之间的联系啦，这里我使用 unicorn 来模拟执行得到真实块的调用关系，这里要注意的是因为我们只对一个函数中真实块的前后调用进行模拟执行，所以是不需要跳转到其他函数中的，遇到 <code>call</code>  指令直接将 pc 强制改成下一行汇编的地址，同时也要注意内存访问异常的情况直接通过 <code>uc.hook_add(UC_HOOK_MEM_UNMAPPED|UC_HOOK_INTR, hook_mem_access)</code>  进行忽略</p>\n<p>通过这个 unicorn 脚本模拟执行，我们得到了分支跳转时下一个要跳转的真实块地址，以及此时的 ZF 标志位，这个标志位可是有着大用，通过这个标志位我们就可以知道究竟是 <code>jz</code>  跳转还是 <code>jnz</code>  跳转啦</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># code for test-fla.elf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> unicorn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> unicorn<span class=\"token punctuation\">.</span>x86_const <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> keystone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># pip install keystone-engine</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> capstone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># pip install capstone</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># import networkx as nx #pip install networkx</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># import matplotlib.pyplot as plt  # pip install matplotlib</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>BASE <span class=\"token operator\">=</span> <span class=\"token number\">0x400000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CODE <span class=\"token operator\">=</span> BASE <span class=\"token operator\">+</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CODE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x100000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>STACK <span class=\"token operator\">=</span> <span class=\"token number\">0x7F00000000</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>STACK_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x100000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FS <span class=\"token operator\">=</span> <span class=\"token number\">0x7FF0000000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>FS_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x100000</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ks <span class=\"token operator\">=</span> Ks<span class=\"token punctuation\">(</span>KS_ARCH_X86<span class=\"token punctuation\">,</span> KS_MODE_64<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 汇编引擎</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>uc <span class=\"token operator\">=</span> Uc<span class=\"token punctuation\">(</span>UC_ARCH_X86<span class=\"token punctuation\">,</span> UC_MODE_64<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 模拟执行引擎</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>cs <span class=\"token operator\">=</span> Cs<span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 反汇编引擎</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># g=nx.Graph ()# 创建空的无向图</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># g=nx.DiGraph ()# 创建空的有向图</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>tbs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204176</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204182</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203066</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203066</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203071</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203098</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203157</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203162</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203656</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203689</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203694</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203737</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203742</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203776</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4203781</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203804</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204171</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>tb_call <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>main_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000000401E80</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>main_end <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000040269C</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hook_code</span><span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">:</span> unicorn<span class=\"token punctuation\">.</span>Uc<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> user_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># print(hex(address))</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> cs<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>CODE_DATA<span class=\"token punctuation\">[</span>address <span class=\"token operator\">-</span> BASE<span class=\"token punctuation\">:</span>address <span class=\"token operator\">-</span> BASE <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 因为只是针对单个函数的控制流，所以我们并不需要跳转到其他的函数里面</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"find call at </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, jump...\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            uc<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_X86_REG_RIP<span class=\"token punctuation\">,</span> address <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">elif</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"ret\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find ret block, emu stop~\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            uc<span class=\"token punctuation\">.</span>emu_stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"block emu path↓↓↓↓\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tb_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\"># for i in range(len(tb_call)-1):</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">#     g.add_edge(tb_call[i],tb_call[i+1])</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\"># Plot it</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\"># nx.draw(g, with_labels=True)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\"># nx.write_gml(g,'./test-fla.gml')</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> tb <span class=\"token keyword\">in</span> tbs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> address <span class=\"token operator\">==</span> tb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\"># print (uc.reg_read (UC_X86_REG_FLAGS))#ZF 标志位在第 6 位</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            ZF_flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_X86_REG_FLAGS<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">#print(\"ZF=\", ZF_flag)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            tb_call<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">,</span> ZF_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hook_mem_access</span><span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">:</span> unicorn<span class=\"token punctuation\">.</span>Uc<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    pc <span class=\"token operator\">=</span> uc<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_X86_REG_RSP<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># UC_ARM64_REG_PC</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pc:%x type:%d addr:%x size:%x'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\"># uc.emu_stop()</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inituc</span><span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>mem_map<span class=\"token punctuation\">(</span>CODE<span class=\"token punctuation\">,</span> CODE_SIZE<span class=\"token punctuation\">,</span> UC_PROT_ALL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>mem_map<span class=\"token punctuation\">(</span>STACK<span class=\"token punctuation\">,</span> STACK_SIZE<span class=\"token punctuation\">,</span> UC_PROT_ALL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>mem_write<span class=\"token punctuation\">(</span>CODE<span class=\"token punctuation\">,</span> CODE_DATA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_X86_REG_RSP<span class=\"token punctuation\">,</span> STACK <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_CODE<span class=\"token punctuation\">,</span> hook_code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_MEM_UNMAPPED <span class=\"token operator\">|</span> UC_HOOK_INTR<span class=\"token punctuation\">,</span> hook_mem_access<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">init_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">for</span> tb <span class=\"token keyword\">in</span> tbs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        g<span class=\"token punctuation\">.</span>add_node<span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test-fla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    CODE_DATA <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>inituc<span class=\"token punctuation\">(</span>uc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    uc<span class=\"token punctuation\">.</span>emu_start<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">,</span> main_end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>之后再去写一个 idapython 脚本将真实块串起来就可以啦，对于无分支跳转，可以直接将前后基本块通过 jmp 进行连接，而麻烦的只是分支跳转，我们由模拟执行后已经得到了分支跳转时的 ZF 标志位，通过该标志位我们将将 jmp 改成为零跳转 (jz) 亦或是非零跳转 (jnz)</p>\n<p><img data-src=\"/ollvm-study/image-20240719234623318.png\" alt=\"image-20240719234623318\" style=\"aspect-ratio:1104 / 582;\"></p>\n<p>写一下 patch 脚本，修复成功～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> idaapi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> keystone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ks <span class=\"token operator\">=</span> Ks<span class=\"token punctuation\">(</span>KS_ARCH_X86<span class=\"token punctuation\">,</span> KS_MODE_64<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 汇编引擎</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">jmp_patch</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> j_code<span class=\"token operator\">=</span><span class=\"token string\">\"jmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">global</span> debug</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    patch_byte<span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> ks<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>j_code<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> addr<span class=\"token operator\">=</span>start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    patch_byte <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>patch_byte<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'\\x00'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>idc<span class=\"token punctuation\">.</span>get_item_size<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>patch_byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>j_code<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> patch_byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ida_bytes<span class=\"token punctuation\">.</span>patch_bytes<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> patch_byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">patch_nop</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> endaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">#print(f\"Patching from &#123;addr&#125; to &#123;endaddr&#125;\")</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> addr <span class=\"token operator\">&lt;</span> endaddr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ida_bytes<span class=\"token punctuation\">.</span>patch_byte<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        addr <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">patch_nop_line</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    patch_nop<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span>addr<span class=\"token operator\">+</span>idc<span class=\"token punctuation\">.</span>get_item_size<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>preamble_block <span class=\"token operator\">=</span> <span class=\"token number\">0x401E8B</span>  <span class=\"token comment\"># 序言块的地址</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>internal_reg <span class=\"token operator\">=</span> <span class=\"token string\">'[rbp+var_B4]'</span><span class=\"token comment\">#中间变量的名称，遇到这个想都不用想直接 NOP</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 格式: ((块的起始地址，块的结束地址),ZF 标志位)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>tb_path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203071</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203098</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203157</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203162</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203656</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203689</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203694</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203737</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203742</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203776</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203781</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203804</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204171</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>tbs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">4204176</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204182</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203066</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203066</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203071</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203098</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203157</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203162</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203656</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203689</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203694</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203737</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203742</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203776</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203781</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203804</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204171</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>fbs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">4202133</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202159</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202165</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202165</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202187</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202193</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202193</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202198</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202215</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202221</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202221</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202226</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202243</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202249</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202249</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202254</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202271</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202277</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202277</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202282</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202299</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202305</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202305</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202310</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202327</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202333</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202338</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202355</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202361</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202361</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202366</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202383</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202389</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202389</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202394</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202411</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202417</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202417</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202422</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202439</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202445</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202445</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202467</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202473</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202473</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202478</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202495</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202501</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202501</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202506</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202523</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202529</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202529</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202534</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202551</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202557</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202557</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202562</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202579</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202585</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202607</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202613</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202613</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202618</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202635</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202641</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202646</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202663</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202669</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202669</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202674</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202691</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202697</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202697</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202702</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202719</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202725</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202725</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202730</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202747</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202753</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202753</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202758</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202775</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202781</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202781</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202786</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202803</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202809</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202814</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202837</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202837</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202842</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202859</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202865</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202865</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202870</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202887</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202893</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202898</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202915</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202921</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202921</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202926</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202943</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202949</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202949</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202954</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202971</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202977</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202977</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4202982</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4202999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203027</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203033</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203033</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203038</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203055</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203061</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203061</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203066</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203066</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203071</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203098</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203157</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203162</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203319</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203341</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203346</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203366</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203371</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203398</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203403</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203428</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203457</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203490</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203495</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203519</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203558</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203563</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203585</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203590</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203614</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203636</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203641</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203651</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203656</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203689</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203694</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203737</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203742</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203776</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203781</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203804</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203809</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203831</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203836</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203856</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203861</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203918</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203923</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203962</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4203981</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4203986</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204025</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204030</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204045</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204072</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204091</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204133</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204171</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4204183</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4204183</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>block_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#判断有没有 patch 结束</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tbs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    block_info<span class=\"token punctuation\">[</span>tbs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">#nop 掉所有虚假块</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token keyword\">for</span> fb <span class=\"token keyword\">in</span> fbs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    patch_nop<span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> idc<span class=\"token punctuation\">.</span>get_item_size<span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token keyword\">for</span> tb <span class=\"token keyword\">in</span> tbs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    dont_patch <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    current_addr <span class=\"token operator\">=</span> tb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token keyword\">while</span> current_addr <span class=\"token operator\">&lt;=</span> tb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token comment\"># print(hex(current_addr),idc.GetDisasm(current_addr))</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"cmov\"</span> <span class=\"token keyword\">in</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token comment\">#cmov 指令会影响分支跳转，所以这里直接 patch 掉</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            patch_nop_line<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            dont_patch <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token comment\"># print(hex(current_addr),hex(tb_path[i][0]))</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">elif</span> internal_reg <span class=\"token keyword\">in</span> idc<span class=\"token punctuation\">.</span>print_operand<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'find internal_reg!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            patch_nop_line<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token string\">'ret'</span> <span class=\"token keyword\">in</span> idc<span class=\"token punctuation\">.</span>print_insn_mnem<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            block_info<span class=\"token punctuation\">[</span>tb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            dont_patch <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        current_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>current_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dont_patch<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        patch_nop_line<span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        block_info<span class=\"token punctuation\">[</span>tb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token comment\"># 序言块 -> 第一个真实块 patch</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>jmp_patch<span class=\"token punctuation\">(</span>preamble_block<span class=\"token punctuation\">,</span> tb_path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tb_path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token comment\"># 不是返回块，也未完成 patch, 剩下的指令都是有分支跳转的.</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">if</span> block_info<span class=\"token punctuation\">[</span>tb_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> block_info<span class=\"token punctuation\">[</span>tb_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        ZF <span class=\"token operator\">=</span> tb_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token comment\">#当要跳转的块和当前块不连续时，这个分支跳转才修复完成</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>tb_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> tb_path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            block_info<span class=\"token punctuation\">[</span>tb_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            j_code <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'jnz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jz'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            jmp_patch<span class=\"token punctuation\">(</span>tb_path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tb_path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> j_code<span class=\"token punctuation\">[</span>ZF<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>patch 完之后看一下，这个代码也太好看了吧哈哈哈！ <code>(●'◡'●)</code></p>\n<p><img data-src=\"/ollvm-study/image-20240720005911998.png\" alt=\"image-20240720005911998\" style=\"aspect-ratio:610 / 1025;\"></p>\n<p>小小总结一下，感觉 ollvm 的控制流平坦化去混淆原来那么简单呐～去年<a href=\"https://oacia.dev/sec-2023/\"> sec2023 安卓赛题</a>的 <code>CESL-BR</code>  混淆和 <code>CEST-BR</code>  混淆的反混淆 idapython 脚本可真是把我写昏过去了 (倒)</p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjI1NzU2Lmh0bQ==\">ollvm 快速学习</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YxMzE0ODkwMy8=\">跟着铁头干混淆 3 ubuntu 下用 docker 编译 ollvm (保证成功)</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZXYwbi5jb20vMjAyMi8wNy8wNy9vbGx2bS0wLmh0bWw=\">OLLVM 混淆学习（0）—— 环境搭建及混淆初体验</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjY2MDA1LTEuaHRt\">利用 angr 符号执行去除虚假控制流</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjc0NTMyLmh0bQ==\">[原创] Android APP 漏洞之战（14）——Ollvm 混淆与反混淆</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvMTEy\">利用符号执行去除控制流平坦化</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vT25seS14aWFveGlhby9wLzE2ODg4NjExLmh0bWw=\">代码混淆与反混淆学习 - 第一弹</span></p>\n</li>\n</ul>\n",
            "tags": [
                "ollvm"
            ]
        },
        {
            "id": "https://oacia.dev/android-binder/",
            "url": "https://oacia.dev/android-binder/",
            "title": "android binder源码分析",
            "date_published": "2024-07-06T06:25:21.000Z",
            "content_html": "<p>Binder 是 Android 独有的一种通信机制， <code>Activity</code> ， <code>Service</code> ， <code>Broadcast</code> ， <code>ContentProvider</code>  这四大组件所涉及的多进程间的通信底层都是依赖于 Binder IPC 机制。学好底层的通信原理对掌握安卓这幢大厦有着重要的意义.</p>\n<h1 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>本文所研究的安卓内核版本为 <code>Linux version 4.9.270-g862f51bac900-ab7613625</code></p>\n<p>安卓框架版本为 <code>android-12.0.0_r34</code></p>\n<h1 id=\"binder简介\"><a class=\"anchor\" href=\"#binder简介\">#</a> Binder 简介</h1>\n<p>从进程角度来看 IPC (Inter Process Communication) 机制，每个 Android 的进程，只能运行在自己进程所拥有的虚拟地址空间。对于用户空间，不同进程之间彼此是不能共享的，而内核空间却是可共享的。Client 进程向 Server 进程通信，恰恰是利用进程间可共享的内核内存空间来完成底层通信工作的，Client 端与 Server 端进程往往采用 ioctl 等方法跟内核空间的驱动进行交互。</p>\n<p><img data-src=\"/android-binder/binder_interprocess_communication.png\" alt=\"binder_interprocess_communication\" style=\"aspect-ratio:643 / 403;\"></p>\n<p>Binder 通信采用 C/S 架构，从组件视角来说，包含 Client、Server、ServiceManager 以及 binder 驱动，其中 ServiceManager 用于管理系统中的各种服务。架构图如下所示，图中的 Client,Server,Service Manager 之间交互都是虚线表示，是由于它们彼此之间不是直接交互的，而是都通过 Binder 驱动进行交互的，从而实现 IPC 通信方式。其中 Binder 驱动位于内核空间，Client,Server,Service Manager 位于用户空间。</p>\n<p><img data-src=\"/android-binder/IPC-Binder.jpg\" alt=\"ServiceManager\" style=\"aspect-ratio:921 / 448;\"></p>\n<h1 id=\"binder设备的初始化过程\"><a class=\"anchor\" href=\"#binder设备的初始化过程\">#</a> Binder 设备的初始化过程</h1>\n<p>在 Linux 中，万物皆文件，那么毫无疑问，Binder 其实也是一个文件，它的初始化函数是 <code>binder_init</code> , 主要功能是注册 binder 设备</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//kernel\\drivers\\android\\binder.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> __init <span class=\"token function\">binder_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>device_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>device_names<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>device_tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_device</span> <span class=\"token operator\">*</span>device<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hlist_node</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 初始化 lru 链表，该链表用于管理内存页；注册 shrinker 结构体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_alloc_shrinker_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 原子操作赋值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">atomic_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_transaction_log<span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token number\">0U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">atomic_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_transaction_log_failed<span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token number\">0U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">/**debug 相关的代码，之后 debug 相关的代码将不再出现 **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 在 debugfs 文件系统创建了 binder 文件夹</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tbinder_debugfs_dir_entry_root <span class=\"token operator\">=</span> <span class=\"token function\">debugfs_create_dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binder\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 如果 binder 文件夹创建成功，则在该文件夹内继续创建 binder/proc 文件夹</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder_debugfs_dir_entry_root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tbinder_debugfs_dir_entry_proc <span class=\"token operator\">=</span> <span class=\"token function\">debugfs_create_dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t\t binder_debugfs_dir_entry_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder_debugfs_dir_entry_root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 继续在 binder 目录中创建 state,stats,transactions,transaction_log,failed_transaction_log 文件，读取 Binder 驱动程序的运行情况</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">debugfs_create_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t    <span class=\"token number\">0444</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t    binder_debugfs_dir_entry_root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_state_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">debugfs_create_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stats\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t    <span class=\"token number\">0444</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t    binder_debugfs_dir_entry_root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_stats_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">debugfs_create_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transactions\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t    <span class=\"token number\">0444</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t    binder_debugfs_dir_entry_root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_transactions_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">debugfs_create_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transaction_log\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t    <span class=\"token number\">0444</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t    binder_debugfs_dir_entry_root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_transaction_log<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_transaction_log_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">debugfs_create_file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed_transaction_log\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t    <span class=\"token number\">0444</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t    binder_debugfs_dir_entry_root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_transaction_log_failed<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&amp;</span>binder_transaction_log_fops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t * Copy the module_parameter string, because we don't want to</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t * tokenize it in-place.</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t */</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 在内核空间中分配内存，GFP_KERNEL 表示正常分配内存</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tdevice_names <span class=\"token operator\">=</span> <span class=\"token function\">kzalloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>binder_devices_param<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GFP_KERNEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>device_names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>ENOMEM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> err_alloc_device_names_failed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 将 binder,hwbinder,vndbinder 赋值给 device_names</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>device_names<span class=\"token punctuation\">,</span> binder_devices_param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tdevice_tmp <span class=\"token operator\">=</span> device_names<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>device_name <span class=\"token operator\">=</span> <span class=\"token function\">strsep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device_tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token comment\">// 以 \",\" 作为分隔符，注册 misc 设备 /dev/binder/dev/hwbinder/dev/vndbinder</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">init_binder_device</span><span class=\"token punctuation\">(</span>device_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err_init_binder_device_failed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>err_init_binder_device_failed<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">hlist_for_each_entry_safe</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>binder_devices<span class=\"token punctuation\">,</span> hlist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">misc_deregister</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device<span class=\"token operator\">-></span>miscdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token function\">hlist_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device<span class=\"token operator\">-></span>hlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>device_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>err_alloc_device_names_failed<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">debugfs_remove_recursive</span><span class=\"token punctuation\">(</span>binder_debugfs_dir_entry_root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>binder_init</code>  中，调用了 <code>init_binder_device</code>  通过 <code>misc_register</code>  来注册 binder 设备</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//kernel\\drivers\\android\\binder.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file_operations</span> binder_fops <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> THIS_MODULE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span>poll <span class=\"token operator\">=</span> binder_poll<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span>unlocked_ioctl <span class=\"token operator\">=</span> binder_ioctl<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">.</span>compat_ioctl <span class=\"token operator\">=</span> binder_ioctl<span class=\"token punctuation\">,</span><span class=\"token comment\">//IO 控制函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span>mmap <span class=\"token operator\">=</span> binder_mmap<span class=\"token punctuation\">,</span><span class=\"token comment\">// 内存映射函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> binder_open<span class=\"token punctuation\">,</span><span class=\"token comment\">//binder 文件打开函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span>flush <span class=\"token operator\">=</span> binder_flush<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">.</span>release <span class=\"token operator\">=</span> binder_release<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> __init <span class=\"token function\">init_binder_device</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_device</span> <span class=\"token operator\">*</span>binder_device<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbinder_device <span class=\"token operator\">=</span> <span class=\"token function\">kzalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>binder_device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> GFP_KERNEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>binder_device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>ENOMEM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tbinder_device<span class=\"token operator\">-></span>miscdev<span class=\"token punctuation\">.</span>fops <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>binder_fops<span class=\"token punctuation\">;</span><span class=\"token comment\">//// 设备的文件操作结构，这是 file_operations 结构</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tbinder_device<span class=\"token operator\">-></span>miscdev<span class=\"token punctuation\">.</span>minor <span class=\"token operator\">=</span> MISC_DYNAMIC_MINOR<span class=\"token punctuation\">;</span><span class=\"token comment\">// 次设备号 动态分配</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tbinder_device<span class=\"token operator\">-></span>miscdev<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><span class=\"token comment\">//// 设备名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 设置 binder_context，用于记录 servicemanager 的 binder_node 信息，</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 由于 binder_device 是全局唯一的，这是 servicemanager 可以成为守护进</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 程的关键。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tbinder_device<span class=\"token operator\">-></span>context<span class=\"token punctuation\">.</span>binder_context_mgr_uid <span class=\"token operator\">=</span> INVALID_UID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tbinder_device<span class=\"token operator\">-></span>context<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_device<span class=\"token operator\">-></span>context<span class=\"token punctuation\">.</span>context_mgr_node_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 注册 binder 设备</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">misc_register</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_device<span class=\"token operator\">-></span>miscdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>binder_device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">hlist_add_head</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_device<span class=\"token operator\">-></span>hlist<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>binder_devices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"binder设备文件的打开过程\"><a class=\"anchor\" href=\"#binder设备文件的打开过程\">#</a> Binder 设备文件的打开过程</h1>\n<p>一个进程在使用 binder 进行通信之前，需要使用 open 函数来打开设备文件 /dev/binder, 在这个过程中， <code>binder_open</code>  函数就会被调用，这个函数的作用如下</p>\n<ul>\n<li>创建 <code>binder_proc</code>  对象</li>\n<li>把当前进程等信息保存到 <code>binder_proc</code>  对象</li>\n<li>把 <code>binder_proc</code>  对象保存到文件指针 <code>filp</code></li>\n<li>把 <code>binder_proc</code>  加入到全局链表 <code>binder_procs</code> 。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//kernel\\drivers\\android\\binder.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binder_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inode</span> <span class=\"token operator\">*</span>nodp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_proc</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_device</span> <span class=\"token operator\">*</span>binder_dev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">binder_debug</span><span class=\"token punctuation\">(</span>BINDER_DEBUG_OPEN_CLOSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: %d:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__func__</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t     current<span class=\"token operator\">-></span>group_leader<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 创建 binder_proc 结构体遍历 proc，并为 proc 实现初始化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tproc <span class=\"token operator\">=</span> <span class=\"token function\">kzalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> GFP_KERNEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>ENOMEM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">spin_lock_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>inner_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">spin_lock_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>outer_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">atomic_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>tmp_ref<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">get_task_struct</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>group_leader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t任何一个进程，如果只有主线程，那 pid 是自己，tgid 是自己，group_leader 指向的还是自己。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t但是，如果一个进程创建了其他线程，那就会有所变化了。线程有自己的 pid，tgid 就是进程的</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t主线程的 pid，group_leader 指向的就是进程的主线程。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t有了 tgid 之后，我们就可以判断一个 task 是线程还是进程了。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tpid : 每个 task 都有一个 pid，是唯一的，不管是进程还是线程。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\ttgid: 指向主线程的 pid</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t*/</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//group_leader: 指向进程的主线程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tproc<span class=\"token operator\">-></span>tsk <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>group_leader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>files_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 初始化 todo 队列</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">INIT_LIST_HEAD</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 初始化进程优先级</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">binder_supported_policy</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>policy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tproc<span class=\"token operator\">-></span>default_priority<span class=\"token punctuation\">.</span>sched_policy <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>policy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tproc<span class=\"token operator\">-></span>default_priority<span class=\"token punctuation\">.</span>prio <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>normal_prio<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tproc<span class=\"token operator\">-></span>default_priority<span class=\"token punctuation\">.</span>sched_policy <span class=\"token operator\">=</span> SCHED_NORMAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tproc<span class=\"token operator\">-></span>default_priority<span class=\"token punctuation\">.</span>prio <span class=\"token operator\">=</span> <span class=\"token function\">NICE_TO_PRIO</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 初始化 binder_dev,proc->context,proc->alloc</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tbinder_dev <span class=\"token operator\">=</span> <span class=\"token function\">container_of</span><span class=\"token punctuation\">(</span>filp<span class=\"token operator\">-></span>private_data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_device</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t  miscdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tproc<span class=\"token operator\">-></span>context <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>binder_dev<span class=\"token operator\">-></span>context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">binder_alloc_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>alloc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">//binder_alloc 初始化</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">binder_stats_created</span><span class=\"token punctuation\">(</span>BINDER_STAT_PROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tproc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>group_leader<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">INIT_LIST_HEAD</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>delivered_death<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">INIT_LIST_HEAD</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>waiting_threads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 将初始化完成的 binder_proc 结构体 proc 保存到 filp->private_data 中</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">//filp 指向一个打开的文件结构体，它和进程调用 open 函数打开设备文件</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">///dev/binder 之后内核返回给进程的文件描述符是相互关联的</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tfilp<span class=\"token operator\">-></span>private_data <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_procs_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 将 binder_proc 结构体 proc 加入到一个全局哈希队列 binder_procs 中</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">//binder 通过遍历这个哈希队列就可以知道有多少进程在使用 binder</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">hlist_add_head</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>proc_node<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>binder_procs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_procs_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"binder设备文件的内存映射过程\"><a class=\"anchor\" href=\"#binder设备文件的内存映射过程\">#</a> Binder 设备文件的内存映射过程</h1>\n<p>在打开了设备文件 /dev/binder 之后，还需要调用 <code>mmap</code>  函数来把这个设备文件映射到进程的地址空间，此时 binder 驱动程序中的 <code>binder_mmap</code>  函数就会被调用，主要功能：在内核虚拟地址空间，申请一块与用户虚拟内存相同大小的内存；然后再申请 1 个 page 大小的物理内存，再将同一块物理内存分别映射到内核虚拟地址空间和用户虚拟内存空间，从而实现了用户空间的 Buffer 和内核空间的 Buffer 同步操作的功能。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//kernel\\drivers\\android\\binder.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binder_mmap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">vm_area_struct</span> <span class=\"token operator\">*</span>vma<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_proc</span> <span class=\"token operator\">*</span>proc <span class=\"token operator\">=</span> filp<span class=\"token operator\">-></span>private_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>failure_string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 保证请求分配内存的线程为主线程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>tsk <span class=\"token operator\">!=</span> current<span class=\"token operator\">-></span>group_leader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 保证映射内存 &lt;= 4MB, 说明 Binder 最多能为进程分配 4MB 的内核缓冲区来传输数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_end <span class=\"token operator\">-</span> vma<span class=\"token operator\">-></span>vm_start<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> SZ_4M<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tvma<span class=\"token operator\">-></span>vm_end <span class=\"token operator\">=</span> vma<span class=\"token operator\">-></span>vm_start <span class=\"token operator\">+</span> SZ_4M<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">binder_debug</span><span class=\"token punctuation\">(</span>BINDER_DEBUG_OPEN_CLOSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t     <span class=\"token string\">\"%s: %d %lx-%lx (%ld K) vma %lx pagep %lx\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t     <span class=\"token constant\">__func__</span><span class=\"token punctuation\">,</span> proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> vma<span class=\"token operator\">-></span>vm_start<span class=\"token punctuation\">,</span> vma<span class=\"token operator\">-></span>vm_end<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t     <span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_end <span class=\"token operator\">-</span> vma<span class=\"token operator\">-></span>vm_start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> SZ_1K<span class=\"token punctuation\">,</span> vma<span class=\"token operator\">-></span>vm_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t     <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">pgprot_val</span><span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_page_prot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//#define FORBIDDEN_MMAP_FLAGS (VM_WRITE)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 检查进程要映射的地址空间是否可写</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_flags <span class=\"token operator\">&amp;</span> FORBIDDEN_MMAP_FLAGS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EPERM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfailure_string <span class=\"token operator\">=</span> <span class=\"token string\">\"bad vm_flags\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> err_bad_arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">//VM_DONTCOPY\t/* Do not copy this vma on fork */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//VM_MIXEDMAP\t/* Can contain \"struct page\" and pure PFN pages */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 禁止拷贝</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tvma<span class=\"token operator\">-></span>vm_flags <span class=\"token operator\">|=</span> VM_DONTCOPY <span class=\"token operator\">|</span> VM_MIXEDMAP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 为该内存赋予 r-x 权限</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tvma<span class=\"token operator\">-></span>vm_flags <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>VM_MAYWRITE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tvma<span class=\"token operator\">-></span>vm_ops <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>binder_vm_ops<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tvma<span class=\"token operator\">-></span>vm_private_data <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 为进程分配内核缓冲区，并将这块物理内存分别映射到内核虚拟地址空间和用户虚拟内存空间</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_alloc_mmap_handler</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>alloc<span class=\"token punctuation\">,</span> vma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>files_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tproc<span class=\"token operator\">-></span>files <span class=\"token operator\">=</span> <span class=\"token function\">get_files_struct</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>files_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>err_bad_arg<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">pr_err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %d %lx-%lx %s failed %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__func__</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t       proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> vma<span class=\"token operator\">-></span>vm_start<span class=\"token punctuation\">,</span> vma<span class=\"token operator\">-></span>vm_end<span class=\"token punctuation\">,</span> failure_string<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Binder 驱动程序为进程分配的内核缓冲区即为一系列物理页面，他们分别被映射到进程的用户地址空间和内核地址空间。当 Binder 驱动程序需要将一块数据传输给一个进程时，它可以先把这块数据保存在为该进程分配所分配的一块内核缓冲区中，然后再把这块内核缓冲区的用户空间地址告诉进程，最后进程就可以访问到里面的数据了。这样做的好处是不需要将内核空间拷贝到用户空间，从而提高了数据传输的效率.</p>\n<p><img data-src=\"/android-binder/binder_physical_memory.jpg\" alt=\"binder_physical_memory\" style=\"aspect-ratio:669 / 628;\"></p>\n<h1 id=\"binder设备文件的ioctl\"><a class=\"anchor\" href=\"#binder设备文件的ioctl\">#</a> binder 设备文件的 ioctl</h1>\n<p><code>binder_ioctl</code>  函数负责在两个进程间收发 IPC 数据和 IPC reply 数据。</p>\n<blockquote>\n<p>ioctl (input/output control) 是一个专用于设备输入输出操作的系统调用，该调用传入一个跟设备有关的请求码，系统调用的功能完全取决于请求码。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ioctl 命令</th>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">操作</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>BINDER_WRITE_READ</strong></td>\n<td style=\"text-align:left\">struct binder_write_read</td>\n<td style=\"text-align:left\">收发 Binder IPC 数据</td>\n<td>Binder 读写交互场景，IPC.talkWithDriver</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_SET_IDLE_TIMEOUT</td>\n<td style=\"text-align:left\">__s64</td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_SET_MAX_THREADS</td>\n<td style=\"text-align:left\">__u32</td>\n<td style=\"text-align:left\">设置 Binder 线程最大个数</td>\n<td>初始化 ProcessState 对象，open_driver () ; 主动调整参数，ProcessState.setThreadPoolMaxThreadCount ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_SET_IDLE_PRIORITY</td>\n<td style=\"text-align:left\">__s32</td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_SET_CONTEXT_MGR</td>\n<td style=\"text-align:left\">__s32</td>\n<td style=\"text-align:left\">设置 Service Manager 节点</td>\n<td>servicemanager 进程成为上下文管理者，binder_become_context_manager ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_THREAD_EXIT</td>\n<td style=\"text-align:left\">__s32</td>\n<td style=\"text-align:left\">释放 Binder 线程</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_VERSION</td>\n<td style=\"text-align:left\">struct binder_version</td>\n<td style=\"text-align:left\">获取 Binder 版本信息</td>\n<td>初始化 ProcessState 对象，open_driver ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_GET_NODE_DEBUG_INFO</td>\n<td style=\"text-align:left\">struct binder_node_debug_info</td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_GET_NODE_INFO_FOR_REF</td>\n<td style=\"text-align:left\">struct binder_node_info_for_ref</td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BINDER_SET_CONTEXT_MGR_EXT</td>\n<td style=\"text-align:left\">struct flat_binder_object</td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//kernel\\drivers\\android\\binder.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">binder_ioctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_proc</span> <span class=\"token operator\">*</span>proc <span class=\"token operator\">=</span> filp<span class=\"token operator\">-></span>private_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_thread</span> <span class=\"token operator\">*</span>thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token function\">_IOC_SIZE</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> __user <span class=\"token operator\">*</span>ubuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> __user <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/*pr_info(\"binder_ioctl: %d:%d %x %lx\\n\",</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tproc->pid, current->pid, cmd, arg);*/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">binder_selftest_alloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>alloc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">trace_binder_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">wait_event_interruptible</span><span class=\"token punctuation\">(</span>binder_user_error_wait<span class=\"token punctuation\">,</span> binder_stop_on_user_error <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> err_unlocked<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tthread <span class=\"token operator\">=</span> <span class=\"token function\">binder_get_thread</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thread <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>ENOMEM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 进行 binder 的读写操作，这个命令使用的最为频繁</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_WRITE_READ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_ioctl_write_read</span><span class=\"token punctuation\">(</span>filp<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 设置 binder 最大支持的线程数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_SET_MAX_THREADS<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> max_threads<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_from_user</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>max_threads<span class=\"token punctuation\">,</span> ubuf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t   <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>max_threads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">binder_inner_proc_lock</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tproc<span class=\"token operator\">-></span>max_threads <span class=\"token operator\">=</span> max_threads<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">binder_inner_proc_unlock</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_SET_CONTEXT_MGR_EXT<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">flat_binder_object</span> fbo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_from_user</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fbo<span class=\"token punctuation\">,</span> ubuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fbo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_ioctl_set_ctx_mgr</span><span class=\"token punctuation\">(</span>filp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fbo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 成为 binder 的上下文管理者，也就是 ServiceManager 成为守护进程</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_SET_CONTEXT_MGR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_ioctl_set_ctx_mgr</span><span class=\"token punctuation\">(</span>filp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 当 binder 线程退出，释放 binder 线程</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_THREAD_EXIT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token function\">binder_debug</span><span class=\"token punctuation\">(</span>BINDER_DEBUG_THREADS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d:%d exit\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t     proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> thread<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token function\">binder_thread_release</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">,</span> thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tthread <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 获取 binder 的版本号</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_VERSION<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_version</span> __user <span class=\"token operator\">*</span>ver <span class=\"token operator\">=</span> ubuf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_version</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>BINDER_CURRENT_PROTOCOL_VERSION<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t     <span class=\"token operator\">&amp;</span>ver<span class=\"token operator\">-></span>protocol_version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_GET_NODE_INFO_FOR_REF<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_node_info_for_ref</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_from_user</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">,</span> ubuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_ioctl_get_node_info_for_ref</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_to_user</span><span class=\"token punctuation\">(</span>ubuf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">case</span> BINDER_GET_NODE_DEBUG_INFO<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_node_debug_info</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_from_user</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">,</span> ubuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">binder_ioctl_get_node_debug_info</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_to_user</span><span class=\"token punctuation\">(</span>ubuf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>err<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\tthread<span class=\"token operator\">-></span>looper_need_return <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token function\">wait_event_interruptible</span><span class=\"token punctuation\">(</span>binder_user_error_wait<span class=\"token punctuation\">,</span> binder_stop_on_user_error <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&amp;&amp;</span> ret <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span>ERESTARTSYS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token function\">pr_info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d:%d ioctl %x %lx returned %d\\n\"</span><span class=\"token punctuation\">,</span> proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>err_unlocked<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token function\">trace_binder_ioctl_done</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"binder内部通信协议\"><a class=\"anchor\" href=\"#binder内部通信协议\">#</a> Binder 内部通信协议</h1>\n<p>Client 进程通过 RPC (Remote Procedure Call Protocol) 与 Server 通信，可以简单地划分为三层，应用层、IPC 层、内核驱动层。 <code>demo()</code>  是 Client 端和 Server 共同协商好的统一方法；handle、RPC 数据、代码、协议这 4 项组成了 IPC 层的数据，通过 IPC 层进行数据传输；而真正在 Client 和 Server 两端建立通信的基础设施便是 Binder Driver。</p>\n<p><img data-src=\"/android-binder/binder_ipc.jpg\" alt=\"binder_ipc\" style=\"aspect-ratio:793 / 444;\"></p>\n<h2 id=\"通信模型\"><a class=\"anchor\" href=\"#通信模型\">#</a> 通信模型</h2>\n<p>一次完整的 Binder 通信过程如下</p>\n<p><img data-src=\"/android-binder/binder_transaction_ipc.jpg\" alt=\"binder_protocol\" style=\"aspect-ratio:955 / 694;\"></p>\n<p>Binder 协议包含在 IPC 数据中，分为两类:</p>\n<ul>\n<li>\n<p><code>BINDER_COMMAND_PROTOCOL</code> ：binder 请求码，以”BC_“开头，简称 BC 码，用于从 IPC 层传递到 Binder Driver 层；</p>\n</li>\n<li>\n<p><code>BINDER_RETURN_PROTOCOL</code>  ：binder 响应码，以”BR_“开头，简称 BR 码，用于从 Binder Driver 层传递到 IPC 层；</p>\n</li>\n</ul>\n<p>Binder IPC 通信至少是两个进程的交互：</p>\n<ul>\n<li>client 进程执行 binder_thread_write，根据 BC_XXX 命令，生成相应的 binder_work；</li>\n<li>server 进程执行 binder_thread_read，根据 binder_work.type 类型，生成 BR_XXX，发送到用户空间处理。</li>\n</ul>\n<h2 id=\"通信过程\"><a class=\"anchor\" href=\"#通信过程\">#</a> 通信过程</h2>\n<p>一次 Client 向 Server 通信的过程如图所示</p>\n<p><img data-src=\"/android-binder/binder_protocol.jpg\" alt=\"binder_protocol\" style=\"aspect-ratio:1269 / 500;\"></p>\n<h3 id=\"bc_protocol\"><a class=\"anchor\" href=\"#bc_protocol\">#</a> BC_PROTOCOL</h3>\n<p>binder 请求码，是用 <code>enum binder_driver_command_protocol</code>  来定义的，是用于应用程序向 binder 驱动设备发送请求消息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">请求码</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">BC_TRANSACTION</td>\n<td style=\"text-align:left\">binder_transaction_data</td>\n<td style=\"text-align:left\">Client 向 Binder 驱动发送请求数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_REPLY</td>\n<td style=\"text-align:left\">binder_transaction_data</td>\n<td style=\"text-align:left\">Server 向 Binder 驱动发送请求数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_FREE_BUFFER</td>\n<td style=\"text-align:left\">binder_uintptr_t (指针)</td>\n<td style=\"text-align:left\">释放内存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_INCREFS</td>\n<td style=\"text-align:left\">__u32(descriptor)</td>\n<td style=\"text-align:left\">binder_ref 弱引用加 1 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_DECREFS</td>\n<td style=\"text-align:left\">__u32(descriptor)</td>\n<td style=\"text-align:left\">binder_ref 弱引用减 1 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_ACQUIRE</td>\n<td style=\"text-align:left\">__u32(descriptor)</td>\n<td style=\"text-align:left\">binder_ref 强引用加 1 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_RELEASE</td>\n<td style=\"text-align:left\">__u32(descriptor)</td>\n<td style=\"text-align:left\">binder_ref 强引用减 1 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_ACQUIRE_DONE</td>\n<td style=\"text-align:left\">binder_ptr_cookie</td>\n<td style=\"text-align:left\">binder_node 强引用减 1 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_INCREFS_DONE</td>\n<td style=\"text-align:left\">binder_ptr_cookie</td>\n<td style=\"text-align:left\">binder_node 弱引用减 1 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_REGISTER_LOOPER</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">创建新的 looper 线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_ENTER_LOOPER</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">应用线程进入 looper</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_EXIT_LOOPER</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">应用线程退出 looper</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_REQUEST_DEATH_NOTIFICATION</td>\n<td style=\"text-align:left\">binder_handle_cookie</td>\n<td style=\"text-align:left\">注册死亡通知</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_CLEAR_DEATH_NOTIFICATION</td>\n<td style=\"text-align:left\">binder_handle_cookie</td>\n<td style=\"text-align:left\">取消注册的死亡通知</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_DEAD_BINDER_DONE</td>\n<td style=\"text-align:left\">binder_uintptr_t (指针)</td>\n<td style=\"text-align:left\">已完成 binder 的死亡通知</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_ACQUIRE_RESULT</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BC_ATTEMPT_ACQUIRE</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当一个进程请求另外一个进程执行一个操作时，源进程就使用 <code>BC_TRANSACTION</code>  来请求 Binder 驱动进程将通信数据传递到目标进程</li>\n<li>当目标进程处理完成源进程所请求的操作之后，它就使用 <code>BC_REPLY</code>  来请求 Binder 驱动进程将结果数据传递给源进程</li>\n<li><code>BC_FREE_BUFFER</code>  后面跟的通信数据是一个整数，它指向了在 Binder 驱动进程内部所分配的一块内核缓冲区.Binder 驱动程序就是通过这个内核缓冲区将源进程的通信数据传递到目标进程的。当目标进程处理完成源进程的通信请求之后，它会使用 <code>BC_FREE_BUFFER</code>  来通知 Binder 驱动程序释放这个内核缓冲区</li>\n<li>当一个线程将自己注册到 Binder 驱动程序之后，它会使用 <code>BC_ENTER_LOOPER</code>  来通知 Binder 驱动程序，它已经准备就绪处理进程间通信请求了</li>\n<li>当 Binder 驱动程序主动请求进程注册一个新的线程到它的 Binder 线程池中来处理进程间通信请求之后，新创建的线程就会使用 <code>BC_REGISTER_LOOPER</code>  来通知 Binder 驱动程序，它准备就绪了</li>\n<li>当一个线程要退出时，它使用 <code>BC_EXIT_LOOPER</code>  从 Binder 驱动程序中注销，这样他就不会再接收到进程间通信请求了</li>\n<li>如果一个进程希望获得它所引用的 Service 组件的死亡接收通知，那么它需要使用 <code>BC_REQUEST_DEATH_NOTIFICATION</code>  来向 Binder 驱动程序注册一个死亡接收通知</li>\n<li>如果一个进程希望注销之前所注册的一个死亡接收通知，那么它需要使用 <code>BC_CLEAR_DEATH_NOTIFICATION</code>  来向 Binder 驱动程序发出请求</li>\n<li>当一个进程获得一个 Service 组件的死亡通知时，它会使用 <code>BC_DEAD_BINDER_DONE</code>  来通知 Binder 驱动程序，它已经处理完成该 Service 组件的死亡通知了</li>\n</ul>\n<h3 id=\"binder_work\"><a class=\"anchor\" href=\"#binder_work\">#</a> binder_work</h3>\n<p>结构体 <code>binder_work</code>  用来描述待处理的工作项， <code>binder_work.entry</code>  用来将结构体嵌入到一个宿主结构中，通过 <code>binder_work.type</code>  的取值，Binder 就可以判断出一个 <code>binder_work</code>  结构体嵌入到什么类型的宿主结构中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">binder_work</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> entry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">binder_work_type</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tBINDER_WORK_TRANSACTION <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 最常见</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tBINDER_WORK_TRANSACTION_COMPLETE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tBINDER_WORK_RETURN_ERROR<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tBINDER_WORK_NODE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tBINDER_WORK_DEAD_BINDER<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tBINDER_WORK_DEAD_BINDER_AND_CLEAR<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tBINDER_WORK_CLEAR_DEATH_NOTIFICATION<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>binder_work 类型</th>\n<th>触发时机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BINDER_WORK_TRANSACTION</td>\n<td><code>binder_transaction()</code> ; <code>binder_release_work()</code>  被调用</td>\n</tr>\n<tr>\n<td>BINDER_WORK_TRANSACTION_COMPLETE</td>\n<td><code>binder_transaction()</code> ; <code>binder_release_work()</code>  被调用</td>\n</tr>\n<tr>\n<td>BINDER_WORK_NODE</td>\n<td><code>binder_new_node()</code>  被调用</td>\n</tr>\n<tr>\n<td>BINDER_WORK_DEAD_BINDER</td>\n<td><code>binder_thread_write()</code>  收到 <code>BC_REQUEST_DEATH_NOTIFICATION</code></td>\n</tr>\n<tr>\n<td>BINDER_WORK_DEAD_BINDER_AND_CLEAR</td>\n<td><code>binder_thread_write()</code>  收到 <code>BC_CLEAR_DEATH_NOTIFICATION</code></td>\n</tr>\n<tr>\n<td>BINDER_WORK_CLEAR_DEATH_NOTIFICATION</td>\n<td><code>binder_thread_write()</code>  收到 <code>BC_CLEAR_DEATH_NOTIFICATION</code>  和 <code>BC_DEAD_BINDER_DONE</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"br_protocol\"><a class=\"anchor\" href=\"#br_protocol\">#</a> BR_PROTOCOL</h3>\n<p>binder 响应码，是用 <code>enum binder_driver_return_protocol</code>  来定义的，是 binder 设备向应用程序回复的消息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">响应码</th>\n<th style=\"text-align:left\">参数类型</th>\n<th style=\"text-align:left\">作用</th>\n<th>触发时机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">BR_ERROR</td>\n<td style=\"text-align:left\">__s32</td>\n<td style=\"text-align:left\">操作发生错误</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_OK</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">操作完成</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_NOOP</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">不做任何事</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_SPAWN_LOOPER</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">创建新的 Looper 线程</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_TRANSACTION</td>\n<td style=\"text-align:left\">binder_transaction_data</td>\n<td style=\"text-align:left\">Binder 驱动向 Server 端发送请求数据</td>\n<td>收到 BINDER_WORK_TRANSACTION</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_REPLY</td>\n<td style=\"text-align:left\">binder_transaction_data</td>\n<td style=\"text-align:left\">Binder 驱动向 Client 端发送回复数据</td>\n<td>收到 BINDER_WORK_TRANSACTION</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_TRANSACTION_COMPLETE</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">对请求发送的成功反馈</td>\n<td>收到 BINDER_WORK_TRANSACTION_COMPLETE</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_DEAD_REPLY</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">回复失败，往往是线程或节点为空</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_FAILED_REPLY</td>\n<td style=\"text-align:left\">无参数</td>\n<td style=\"text-align:left\">回复失败，往往是 transaction 出错导致</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_INCREFS</td>\n<td style=\"text-align:left\">binder_ptr_cookie</td>\n<td style=\"text-align:left\">binder_ref 弱引用加 1 操作（Server 端）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_DECREFS</td>\n<td style=\"text-align:left\">binder_ptr_cookie</td>\n<td style=\"text-align:left\">binder_ref 弱引用减 1 操作（Server 端）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_ACQUIRE</td>\n<td style=\"text-align:left\">binder_ptr_cookie</td>\n<td style=\"text-align:left\">binder_ref 强引用加 1 操作（Server 端）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_RELEASE</td>\n<td style=\"text-align:left\">binder_ptr_cookie</td>\n<td style=\"text-align:left\">binder_ref 强引用减 1 操作（Server 端）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_DEAD_BINDER</td>\n<td style=\"text-align:left\">binder_uintptr_t (指针)</td>\n<td style=\"text-align:left\">Binder 驱动向 client 端发送死亡通知</td>\n<td>收到 BINDER_WORK_DEAD_BINDER 或 BINDER_WORK_DEAD_BINDER_AND_CLEAR</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_CLEAR_DEATH_NOTIFICATION_DONE</td>\n<td style=\"text-align:left\">binder_uintptr_t (指针)</td>\n<td style=\"text-align:left\">BC_CLEAR_DEATH_NOTIFICATION 命令对应的响应码</td>\n<td>收到 BINDER_WORK_CLEAR_DEATH_NOTIFICATION</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_ACQUIRE_RESULT</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_ATTEMPT_ACQUIRE</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BR_FINISHED</td>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"协议转换图\"><a class=\"anchor\" href=\"#协议转换图\">#</a> 协议转换图</h3>\n<blockquote>\n<p>BINDER_WORK_xxx –&gt; BW_xxx</p>\n</blockquote>\n<p>图解：(以 BC_TRANSACTION 为例)</p>\n<ul>\n<li>发起端进程：binder_transaction () 过程将 BC_TRANSACTION 转换为 BW_TRANSACTION；</li>\n<li>接收端进程：binder_thread_read () 过程，将 BW_TRANSACTION 转换为 BR_TRANSACTION;</li>\n<li>接收端进程：IPC.executeCommand () 过程，处理 BR_TRANSACTION 命令。</li>\n</ul>\n<p><img data-src=\"/android-binder/protocol_transaction.jpg\" alt=\"protocol_transaction.jpg\" style=\"aspect-ratio:1062 / 550;\"></p>\n<p><img data-src=\"/android-binder/protocol_binder_dead.jpg\" alt=\"protocol_binder_dead.jpg\" style=\"aspect-ratio:1087 / 538;\"></p>\n<h1 id=\"servicemanager介绍\"><a class=\"anchor\" href=\"#servicemanager介绍\">#</a> ServiceManager 介绍</h1>\n<p>我们知道在 Android 系统中，各个进程之间都是隔离的，假如 Clinet 想和 Server 通信，那么该如何找到 Server 呢？这就需要依靠 ServiceManager 了</p>\n<p>ServiceManager 是 Android 进程间通信机制 Binder 的守护进程，它扮演着 Binder 进程间通信机制上下文管理者 (context Manager) 的角色，同时负责管理系统中的 Service 组件，向 Client 组件提供获取 Service 代理对象的服务</p>\n<p><img data-src=\"/android-binder/IPC-Binder.jpg\" alt=\"ServiceManager\" style=\"aspect-ratio:921 / 448;\"></p>\n<p>我们可以将 binder 跨进程通信和 socket 网络通信类比，在网络通信中，客户端并不知道服务器的 IP 地址，但是知道服务器的域名，现在客户端想要和服务器建立 socket 连接，那么通信的第一步就是通过 DNS 服务器将域名解析为 IP 地址然后层层路由，这样客户端就可以和服务器建立网络连接了。binder 跨进程通信也不例外，ServiceManager 就相当于是 socket 网络通信中的 DNS 服务器，倘若 Server 希望有人能够和它通信，那么 Server 就先前往 Service Manager 那里 “备案” 一下（<strong>1. 注册服务</strong>），过了不久，Client 想要和 Server 去通信了，它就去询问 Service Manager：“Server 在什么地方呀，我要怎么和它通信呀”（<strong>2. 获取服务</strong>），然后 Service Manager 就告诉 Client 通信的方法，这样 Clinet 和 Server 就可以愉快的通信了～（<strong>3. 使用服务</strong>）</p>\n<h1 id=\"servicemanager的启动过程\"><a class=\"anchor\" href=\"#servicemanager的启动过程\">#</a> ServiceManager 的启动过程</h1>\n<p>ServiceManager 是由 init 进程通过解析 init.rc 文件创建的</p>\n<pre><code class=\"language-rc\"># platform\\system\\core\\rootdir\\init.rc\non init\n\t...\n\t# Start essential services.\n    start servicemanager\n</code></pre>\n<p>具体的服务声明在 <code>platform\\frameworks\\native\\cmds\\servicemanager\\servicemanager.rc</code></p>\n<pre><code class=\"language-rc\"># platform\\frameworks\\native\\cmds\\servicemanager\\servicemanager.rc\nservice servicemanager /system/bin/servicemanager\n    class core animation# 指定了服务的类别为core和animation\n    user system# 指定了服务用户为system,表示该服务将以系统用户的权限来运行\n    group system readproc# 指定了服务的用户组为system,并具有 readproc 权限\n    critical# 标志该服务为关键服务，这表示它是系统启动的一部分，必须优先启动\n\n    # 要求在servicemanager重新启动时重启\n    # apexd服务, audioserver服务, gatekeeperd服务\n    # main类别的服务, hal类别的服务, early_hal类别的服务\n    onrestart restart apexd\n    onrestart restart audioserver\n    onrestart restart gatekeeperd\n    onrestart class_restart main\n    onrestart class_restart hal\n    onrestart class_restart early_hal\n\n    # 将 servicemanager 的进程 ID 写入\n    # /dev/cpuset/system-background/tasks文件，这可用于CPU集合管理\n    writepid /dev/cpuset/system-background/tasks\n\n    # 声明该服务为关键服务，在系统关闭时，这个服务将被优先关闭\n    shutdown critical\n</code></pre>\n<p><code>Service Manager</code>  的入口函数是 <code>main.cpp</code>  中的 <code>main()</code> , 它的启动过程由以下四个步骤组成</p>\n<ol>\n<li>调用 <code>ProcessState::initWithDriver</code>  打开并映射 binder 驱动设备</li>\n<li>将自身作为服务 (服务名称: <code>manager</code> ) 注册到 ServiceManager 中</li>\n<li>调用 <code>ps-&gt;becomeContextManager();</code>  成为 binder 进程间通信机制的上下文管理者</li>\n<li>使用 <code>looper</code>  无限循环阻塞处理事件</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\main.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"usage: \"</span> <span class=\"token operator\">&lt;&lt;</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" [binder driver]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 指定 driver 的名称，如果无参数，则使用默认驱动 /dev/binder</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> driver <span class=\"token operator\">=</span> argc <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"/dev/binder\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t每一个进程只能有一个 ProcessState 对象，service manager 通过 initWithDriver 方法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t实例化了一个 ProcessState 对象，并打开 binder 设备和进行 mmap 内存映射，这个过程中</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t将会同时调用 binder 设备内部的函数 binder_open 和 binder_mmap</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span> ps <span class=\"token operator\">=</span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">initWithDriver</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 设置可以同时存在的线程池的最大数量为 0, 即此时只能有 ServiceManager 这一个线程存在</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ps<span class=\"token operator\">-></span><span class=\"token function\">setThreadPoolMaxThreadCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 在阻塞调用时中止进程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//FATAL_IF_NOT_ONEWAY: ServiceManager 发起的 Binder 调用必须是单向，否则打印堆栈日志提示</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ps<span class=\"token operator\">-></span><span class=\"token function\">setCallRestriction</span><span class=\"token punctuation\">(</span>ProcessState<span class=\"token double-colon punctuation\">::</span>CallRestriction<span class=\"token double-colon punctuation\">::</span>FATAL_IF_NOT_ONEWAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 实例化 ServiceManager, 初始化参数为 Access 对象的智能指针</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>ServiceManager<span class=\"token operator\">></span> manager <span class=\"token operator\">=</span> <span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>ServiceManager<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Access<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//self register servicemanager,\"manager\" 将作为 servicemanager 的第一个服务被注册</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>manager<span class=\"token operator\">-></span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"manager\"</span><span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">/*allowIsolated*/</span><span class=\"token punctuation\">,</span> IServiceManager<span class=\"token double-colon punctuation\">::</span>DUMP_FLAG_PRIORITY_DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Could not self register servicemanager\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 将 \"manager\" 服务作为服务端 Bbinder 对象</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setTheContextObject</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 向 binder 驱动发送 ioctl BINDER_SET_CONTEXT_MGR_EXT 信号，将 servicemanager</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 在 ProcessState::initWithDriver 中打开驱动设备 /dev/driver 所返回的文件描述符句柄</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 作为整个 binder IPC 通信中的上下文管理者</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ps<span class=\"token operator\">-></span><span class=\"token function\">becomeContextManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 准备 looper</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>Looper<span class=\"token operator\">></span> looper <span class=\"token operator\">=</span> <span class=\"token class-name\">Looper</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token comment\">/*allowNonCallbacks*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 监听 BC_ENTER_LOOPER 信号，收到该信号后回调处理 binder 调用</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">BinderCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setupTo</span><span class=\"token punctuation\">(</span>looper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 监听客户端回调</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token class-name\">ClientCallbackCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setupTo</span><span class=\"token punctuation\">(</span>looper<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 阻塞等待和处理事件</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        looper<span class=\"token operator\">-></span><span class=\"token function\">pollAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// should not be reached</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"processstateinit\"><a class=\"anchor\" href=\"#processstateinit\">#</a> ProcessState::init</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\ProcessState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>kDefaultDriver<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">/*requireDefault*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">initWithDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/*requireDefault*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> requireDefault<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>clang<span class=\"token double-colon punctuation\">::</span>no_destroy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">static</span> sp<span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span> gProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>clang<span class=\"token double-colon punctuation\">::</span>no_destroy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>mutex gProcessMutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driver <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">l</span><span class=\"token punctuation\">(</span>gProcessMutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> gProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t这里使用了单例模式的设计思想，通过 std::once_flag 和 std::call_once</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t来保证只有一个线程可以进入初始化代码块，</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t这保证了在一个线程中只能有一个 ProcessState 实例</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t它的工作方式如下</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t[-] 第一次调用 std::call_once 时，它会检查与 std::once_flag 关联的标记是否已被设置。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t如果标记尚未设置，它将执行传递给 std::call_once 的可调用对象，</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t并设置标记，以标记初始化已完成。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t[-] 如果其他线程尝试再次调用 std::call_once 与相同的 std::once_flag，</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t它会发现标记已经设置，因此不会再次执行可调用对象。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t*/</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>clang<span class=\"token double-colon punctuation\">::</span>no_destroy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>once_flag gProcessOnce<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_once</span><span class=\"token punctuation\">(</span>gProcessOnce<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 判断 binder 驱动是否存在</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> R_OK<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Binder driver %s is unavailable. Using /dev/binder instead.\"</span><span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            driver <span class=\"token operator\">=</span> <span class=\"token string\">\"/dev/binder\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">l</span><span class=\"token punctuation\">(</span>gProcessMutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 将 driver 作为参数实例化 ProcessState, 并赋值给 gProcess</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        gProcess <span class=\"token operator\">=</span> <span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requireDefault<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// Detect if we are trying to initialize with a different driver, and</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// consider that an error. ProcessState will only be initialized once above.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">LOG_ALWAYS_FATAL_IF</span><span class=\"token punctuation\">(</span>gProcess<span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                            <span class=\"token string\">\"ProcessState was already initialized with %s,\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                            <span class=\"token string\">\" can't initialize with %s.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                            gProcess<span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> gProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"processstate构造函数\"><a class=\"anchor\" href=\"#processstate构造函数\">#</a> <strong>ProcessState 构造函数</strong></h2>\n<p>在代码的第 26 行，通过 <code>driver</code>  参数实例化了 ProcessState, 它通过 <code>open_driver()</code>  打开了 binder 驱动设备，并使用 <code>mmap</code>  来进行内存映射</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\ProcessState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ProcessState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">mDriverName</span><span class=\"token punctuation\">(</span><span class=\"token function\">String8</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mDriverFD</span><span class=\"token punctuation\">(</span><span class=\"token function\">open_driver</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 通过系统调用陷入内核，打开 /dev/binder 设备</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mVMStart</span><span class=\"token punctuation\">(</span>MAP_FAILED<span class=\"token punctuation\">)</span><span class=\"token comment\">// 映射内存的起始地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mThreadCountLock</span><span class=\"token punctuation\">(</span>PTHREAD_MUTEX_INITIALIZER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mThreadCountDecrement</span><span class=\"token punctuation\">(</span>PTHREAD_COND_INITIALIZER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mExecutingThreadsCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mWaitingForThreads</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mMaxThreads</span><span class=\"token punctuation\">(</span>DEFAULT_MAX_BINDER_THREADS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mStarvationStartTimeMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mThreadPoolStarted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mThreadPoolSeq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">mCallRestriction</span><span class=\"token punctuation\">(</span>CallRestriction<span class=\"token double-colon punctuation\">::</span>NONE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDriverFD <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// mmap the binder, providing a chunk of virtual address space to receive transactions.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用内存映射函数 mmap, 此时 binder 驱动会在内核空间执行 binder_mmap, 来将一块物理内存同时映射到</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 用户空间和内核空间，来帮助进行跨进程通信</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// #define BINDER_VM_SIZE ((1 * 1024 * 1024) - sysconf(_SC_PAGE_SIZE) * 2) = 1016KB</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// PAGE_SIZE 被定义为 4096</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        mVMStart <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> BINDER_VM_SIZE<span class=\"token punctuation\">,</span> PROT_READ<span class=\"token punctuation\">,</span> MAP_PRIVATE <span class=\"token operator\">|</span> MAP_NORESERVE<span class=\"token punctuation\">,</span> mDriverFD<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mVMStart <span class=\"token operator\">==</span> MAP_FAILED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// *sigh*</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using %s failed: unable to mmap transaction memory.\\n\"</span><span class=\"token punctuation\">,</span> mDriverName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>mDriverFD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            mDriverFD <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            mDriverName<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__ANDROID__</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">LOG_ALWAYS_FATAL_IF</span><span class=\"token punctuation\">(</span>mDriverFD <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Binder driver '%s' could not be opened.  Terminating.\"</span><span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"open_driver\"><a class=\"anchor\" href=\"#open_driver\">#</a> <strong>open_driver</strong></h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\ProcessState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">open_driver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 以读写方式打开，并为该文件描述符添加 close-on-exec (执行时可关闭) 的标志，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 来防止该文件描述符被意外泄漏给了 fork 创建出来的子进程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> O_RDWR <span class=\"token operator\">|</span> O_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> vers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        status_t result <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> BINDER_VERSION<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Binder ioctl to obtain version failed: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> vers <span class=\"token operator\">!=</span> BINDER_CURRENT_PROTOCOL_VERSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Binder driver protocol(%d) does not match user space protocol(%d)! ioctl() return value: %d\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                vers<span class=\"token punctuation\">,</span> BINDER_CURRENT_PROTOCOL_VERSION<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 设置这个打开的 binder 对象的最大线程数为 15</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        size_t maxThreads <span class=\"token operator\">=</span> DEFAULT_MAX_BINDER_THREADS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> BINDER_SET_MAX_THREADS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>maxThreads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Binder ioctl to set max threads failed: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">uint32_t</span> enable <span class=\"token operator\">=</span> DEFAULT_ENABLE_ONEWAY_SPAM_DETECTION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> BINDER_ENABLE_ONEWAY_SPAM_DETECTION<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>enable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">ALOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Binder ioctl to enable oneway spam detection failed: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">ALOGW</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opening '%s' failed: %s\\n\"</span><span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"/android-binder/1595250-20211114151720684-1823259499.png\" alt=\"img\" style=\"aspect-ratio:1611 / 1058;\"></p>\n<h1 id=\"binder中各个类的含义\"><a class=\"anchor\" href=\"#binder中各个类的含义\">#</a> Binder 中各个类的含义</h1>\n<p>在进行后续的学习前，我们先来了解一下 Binder 中各个类的含义</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BpRefBase</td>\n<td>RefBase 的子类，提供 remote () 方法获取远程 Binder</td>\n</tr>\n<tr>\n<td>IInterface</td>\n<td>Binder 服务接口的基类，Binder 服务通常需要同时提供本地接口和远程接口</td>\n</tr>\n<tr>\n<td>BpInterface</td>\n<td>远程接口的基类，<strong>远程接口是供客户端调用的接口集</strong></td>\n</tr>\n<tr>\n<td>BnInterface</td>\n<td>本地接口的基类，<strong>本地接口是需要服务中真正实现的接口集</strong></td>\n</tr>\n<tr>\n<td>IBinder</td>\n<td>Binder 对象的基类，BBinder 和 BpBinder 都是这个类的子类</td>\n</tr>\n<tr>\n<td>BpBinder</td>\n<td>远程 Binder，这个类提供 transact 方法来发送请求，BpXXX 实现中会用到</td>\n</tr>\n<tr>\n<td>BBinder</td>\n<td>本地 Binder，服务实现方的基类，提供了 onTransact 接口来接收请求</td>\n</tr>\n<tr>\n<td>ProcessState</td>\n<td>代表了使用 Binder 的进程</td>\n</tr>\n<tr>\n<td>IPCThreadState</td>\n<td>代表了使用 Binder 的线程，这个类中封装了与 Binder 驱动通信的逻辑</td>\n</tr>\n<tr>\n<td>Parcel</td>\n<td>在 Binder 上传递的数据的包装器</td>\n</tr>\n</tbody>\n</table>\n<p>Binder 服务的实现类通常都会遵守下面的命名规则</p>\n<ul>\n<li>服务的接口使用 I 字母作为前缀</li>\n<li>远程接口使用 Bp 作为前缀</li>\n<li>本地接口使用 Bn 作为前缀</li>\n<li>p 即 proxy 的意思，是客户端用来与 Server 交互的类</li>\n</ul>\n<p><strong>IBinder 家族</strong></p>\n<p><img data-src=\"/android-binder/image002.png\" alt=\"image\" style=\"aspect-ratio:224 / 200;\"></p>\n<p>BpBinder 和 BBinder 都是 Android 中与 Binder 通信相关的代表，它们都从 IBinder 类中派生而来</p>\n<ul>\n<li>BpBinder 是客户端用来与 Server 交互的代理类，p 即 proxy 的意思</li>\n<li>BBinder 则是 proxy 相对的一端，它是 proxy 交互的目的端。如果说 BpBinder 代表客户端，那么 BBinder 则代表服务端。这里的 BpBinder 和 BBinder 是一一对应的，即某个 BpBinder 只能和对应的 BBinder 交互</li>\n<li>在注册服务和获取服务的过程中，ServiceManager 均为服务端</li>\n<li>BpBinder 通过 handle 来标识它所对应的 BBinder 端，与其相关的函数为 <code>sp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(int32_t handle)</code> ,handle 值为 0 表示 ServiceManager 所对应的 BBinder</li>\n</ul>\n<p><strong>IServiceManager 家族</strong></p>\n<p><img data-src=\"/android-binder/image003.png\" alt=\"image\" style=\"aspect-ratio:392 / 355;\"></p>\n<ul>\n<li>\n<p>IServiceManager、BpServiceManager 和 BnServiceManager 都与业务逻辑相关。</p>\n</li>\n<li>\n<p>BnServiceManager 同时从 BBinder 派生，表示它可以直接参与 Binder 通信。</p>\n</li>\n<li>\n<p>BpServiceManager 虽然从 BpInterface 中派生，但是这条分支似乎与 BpBinder 没有关系。</p>\n</li>\n<li>\n<p>BnServiceManager 是一个虚类，它的业务函数最终需要子类来实现。</p>\n</li>\n</ul>\n<h1 id=\"servicemanager的获取过程\"><a class=\"anchor\" href=\"#servicemanager的获取过程\">#</a> ServiceManager 的获取过程</h1>\n<p>当一个 Server 想要注册服务，那必须要知道 &quot;ServiceManager 在哪里才可以&quot;, 所以需要有一个方法来让 Server 找到 ServiceManager, 这是通过函数 <code>defaultServiceManager</code>  实现的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取 BpServiceManager 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> <span class=\"token function\">sm</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaultServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>defaultServiceManager 的主要作用是获取 BpServiceManager 对象，它通过 <code>getContextObject</code>  获取到了 ServiceManager 的 BBinder 所对应的 BpBinder 对象，随后利用 <code>interface_cast</code>  将 <code>BpBinder</code>  对象转换成了 <code>BpServiceManager</code>  对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> <span class=\"token function\">defaultServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_once</span><span class=\"token punctuation\">(</span>gSmOnce<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sp<span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span> sm <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token comment\">// 获取 ServiceManager 的 BBinder 所对应的 BpBinder 对象，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token comment\">// 并将该对象通过 interface_cast 转换为 AidlServiceManager</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            sm <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">interface_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getContextObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting 1s on context object on %s.\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 实例化 ServiceManagerShim</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        gDefaultServiceManager <span class=\"token operator\">=</span> <span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>ServiceManagerShim<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> gDefaultServiceManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>AidlServiceManager</strong></p>\n<p><code>AidlServiceManager</code>  其实是 <code>android::os::IServiceManager</code>  的别名</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> AidlServiceManager <span class=\"token operator\">=</span> android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IServiceManager<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>ServiceManagerShim</strong></p>\n<p>之前是没有 <code>ServiceManagerShim</code>  的，而是直接操作 BpServiceManager，这个辅助类封装了 AIDL 自动生成的 BpServiceManager，所以现在的客户端代码流就变成如下三步：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>      用户代码 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span> libbinder代码  binder<span class=\"token operator\">/</span>IServiceManager<span class=\"token punctuation\">.</span>cpp#ServiceManagerShim</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>     AIDL 代码  android<span class=\"token operator\">/</span>os<span class=\"token operator\">/</span>IServiceManager<span class=\"token punctuation\">.</span>cpp#BpServiceManager 接口</pre></td></tr></table></figure><p>libbinder 中的 ServiceManagerShim 起到了一个中转的作用，把请求转给 out 下 AIDL 自动生成的 BpServiceManager, 原来是在 libbinder#IServiceManager.cpp 中手写实现，现在是 AIDL 帮你实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// From the old libbinder IServiceManager interface to IServiceManager.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceManagerShim</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IServiceManager</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">ServiceManagerShim</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    status_t <span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> service<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token keyword\">bool</span> allowIsolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dumpsysPriority<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Vector<span class=\"token operator\">&lt;</span>String16<span class=\"token operator\">></span> <span class=\"token function\">listServices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dumpsysPriority<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token function\">waitForService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name16<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isDeclared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Vector<span class=\"token operator\">&lt;</span>String16<span class=\"token operator\">></span> <span class=\"token function\">getDeclaredInstances</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> interface<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>optional<span class=\"token operator\">&lt;</span>String16<span class=\"token operator\">></span> <span class=\"token function\">updatableViaApex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// for legacy ABI</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> <span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> mTheRealServiceManager<span class=\"token operator\">-></span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    IBinder<span class=\"token operator\">*</span> <span class=\"token function\">onAsBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">IInterface</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asBinder</span><span class=\"token punctuation\">(</span>mTheRealServiceManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span> mTheRealServiceManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"getcontextobject\"><a class=\"anchor\" href=\"#getcontextobject\">#</a> getContextObject</h2>\n<p>这个函数最主要的功能就是获取 ServiceManager 的 BBinder 所对应的 BpBinder 对象，它通过调用 <code>getStrongProxyForHandle(0)</code>  来进行获取</p>\n<p>这里传入的 handle 的值为 0, 它表示 ServiceManager 所对应的 BBinder</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\ProcessState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getContextObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*caller*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 创建一个 BpBinder 对象，getStrongProxyForHandle 传入的参数 handle 的值为 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//,0 代表的就是 ServiceManager 所对应的 BBinder。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> context <span class=\"token operator\">=</span> <span class=\"token function\">getStrongProxyForHandle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// The root object is special since we get it directly from the driver, it is never</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// written by Parcell::writeStrongBinder.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        internal<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Stability</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">markCompilationUnit</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">ALOGW</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not able to get context object on %s.\"</span><span class=\"token punctuation\">,</span> mDriverName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>getStrongProxyForHandle(0)</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\ProcessState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getStrongProxyForHandle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int32_t</span> handle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    AutoMutex <span class=\"token function\">_l</span><span class=\"token punctuation\">(</span>mLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 根据索引查找对应资源。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    handle_entry<span class=\"token operator\">*</span> e <span class=\"token operator\">=</span> <span class=\"token function\">lookupHandleLocked</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 如果 lookupHandleLocked 发现没有对应的资源项，则会创建一个新的项并返回。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// We need to create a new BpBinder if there isn't currently one, OR we</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// are unable to acquire a weak reference on this current one.  The</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// attemptIncWeak() is safe because we know the BpBinder destructor will always</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// call expungeHandle(), which acquires the same lock we are holding now.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// We need to do this because there is a race condition between someone</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// releasing a reference on this BpBinder, and a new reference on its handle</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// arriving from the driver.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        IBinder<span class=\"token operator\">*</span> b <span class=\"token operator\">=</span> e<span class=\"token operator\">-></span>binder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>e<span class=\"token operator\">-></span>refs<span class=\"token operator\">-></span><span class=\"token function\">attemptIncWeak</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// Special case for context manager...</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// The context manager is the only object for which we create</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// a BpBinder proxy without already holding a reference.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// Perform a dummy transaction to ensure the context manager</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// is registered before we create the first local reference</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// to it (which will occur when creating the BpBinder).</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// If a local reference is created for the BpBinder when the</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// context manager is not present, the driver will fail to</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// provide a reference to the context manager, but the</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// driver API does not return status.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// Note that this is not race-free if the context manager</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">// dies while this code runs.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// TODO: add a driver API to wait for context manager, or</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// stop special casing handle 0 for context manager and add</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">// a driver API to get a handle to the context manager with</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">// proper reference counting.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                IPCThreadState<span class=\"token operator\">*</span> ipc <span class=\"token operator\">=</span> <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                CallRestriction originalCallRestriction <span class=\"token operator\">=</span> ipc<span class=\"token operator\">-></span><span class=\"token function\">getCallRestriction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                ipc<span class=\"token operator\">-></span><span class=\"token function\">setCallRestriction</span><span class=\"token punctuation\">(</span>CallRestriction<span class=\"token double-colon punctuation\">::</span>NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                Parcel data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                status_t status <span class=\"token operator\">=</span> ipc<span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> IBinder<span class=\"token double-colon punctuation\">::</span>PING_TRANSACTION<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                ipc<span class=\"token operator\">-></span><span class=\"token function\">setCallRestriction</span><span class=\"token punctuation\">(</span>originalCallRestriction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> DEAD_OBJECT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                   <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token comment\">// 创建一个 BpBinder</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            sp<span class=\"token operator\">&lt;</span>BpBinder<span class=\"token operator\">></span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">BpBinder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            e<span class=\"token operator\">-></span>binder <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> e<span class=\"token operator\">-></span>refs <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span><span class=\"token function\">getWeakRefs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            result <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// This little bit of nastyness is to allow us to add a primary</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// reference to the remote proxy when this team doesn't have one</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// but another team is sending the handle to us.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">force_set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            e<span class=\"token operator\">-></span>refs<span class=\"token operator\">-></span><span class=\"token function\">decWeak</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"interface_cast\"><a class=\"anchor\" href=\"#interface_cast\">#</a> <strong>interface_cast</strong></h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\include\\binder\\IInterface.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * If this is a local object and the descriptor matches, this will return the</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * actual local object which is implementing the interface. Otherwise, this will</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * return a proxy to the interface without checking the interface descriptor.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * This means that subsequent calls may fail with BAD_TYPE.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">INTERFACE</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">inline</span> sp<span class=\"token operator\">&lt;</span>INTERFACE<span class=\"token operator\">></span> <span class=\"token function\">interface_cast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">INTERFACE</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asInterface</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是一个模板函数，其中的 <code>asInterface</code>  是在 <code>DECLARE_META_INTERFACE</code>  宏中定义的</p>\n<p><strong>asInterface</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\include\\binder\\IInterface.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//## 的作用是将前后两个标识符或符号连接在一起，以形成一个单独的标识符或符号。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如 #define CONCATENATE (x, y) x##y</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果调用 CONCATENATE (a, b)，它将被展开为 ab</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DECLARE_META_INTERFACE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>INTERFACE<span class=\"token punctuation\">)</span>                               </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token expression\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>                                                                 </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16 descriptor<span class=\"token punctuation\">;</span>                        </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">static</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> <span class=\"token function\">asInterface</span><span class=\"token punctuation\">(</span>                     </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token expression\"><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16<span class=\"token operator\">&amp;</span> <span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">INTERFACE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                                     </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">INTERFACE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">setDefaultImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token expression\"><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>                                                                </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> default_impl<span class=\"token punctuation\">;</span>                  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token expression\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>                                                                 </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IMPLEMENT_META_INTERFACE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>INTERFACE<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">)</span>                       </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE</span><span class=\"token punctuation\">(</span>INTERFACE<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">)</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>INTERFACE<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>StaticString16                                     </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_descriptor_static_str16</span><span class=\"token punctuation\">(</span><span class=\"token function\">__IINTF_CONCAT</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16 I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token class-name\">INTERFACE</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span>                 </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_descriptor_static_str16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16<span class=\"token operator\">&amp;</span>                                          </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token class-name\">INTERFACE</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>              </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">return</span> I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>descriptor<span class=\"token punctuation\">;</span>                                </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token expression\"><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token class-name\">INTERFACE</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asInterface</span><span class=\"token punctuation\">(</span>              </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token expression\"><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span>               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token expression\"><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> intr<span class=\"token punctuation\">;</span>                               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                           </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token expression\">intr <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token expression\">obj<span class=\"token operator\">-></span><span class=\"token function\">queryLocalInterface</span><span class=\"token punctuation\">(</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token expression\">intr <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>Bp</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                           </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">return</span> intr<span class=\"token punctuation\">;</span>                                                    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token expression\">std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>default_impl<span class=\"token punctuation\">;</span>           </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">bool</span> I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token class-name\">INTERFACE</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setDefaultImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span> impl<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">/* Only one user of this interface can use this function     */</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/* at a time. This is a heuristic to detect if two different */</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/* users in the same process use this function.              */</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token expression\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>default_impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                                     </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>default_impl <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token expression\"><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>                                                </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token class-name\">INTERFACE</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">return</span> I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>default_impl<span class=\"token punctuation\">;</span>                              </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                                   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">INTERFACE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>                                    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token expression\">I</span><span class=\"token punctuation\">##</span><span class=\"token expression\">INTERFACE<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span>I</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">INTERFACE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>                                   </span>\\</pre></td></tr></table></figure><p>我们将 <code>interface_cast&lt;AidlServiceManager&gt;(new BpBinder(0))</code>  通过宏定义替换一下看的会更加清楚，在这里 <code>asInterface</code>  将 <code>BpBinder</code>  转换成了 <code>BpServiceManager</code> , <code>BpServiceManager</code>  继承了 <code>IServiceManager</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16 descriptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> <span class=\"token function\">asInterface</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16<span class=\"token operator\">&amp;</span> <span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">IServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">IServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">setDefaultImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> default_impl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>StaticString16</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">IServiceManager_descriptor_static_str16</span><span class=\"token punctuation\">(</span><span class=\"token function\">__IINTF_CONCAT</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>IServiceManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16 <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    IServiceManager_descriptor_static_str16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>String16<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> IServiceManager<span class=\"token double-colon punctuation\">::</span>descriptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 在这里终于出现了 asInterface 函数的定义，我们也找到了 BpServiceManager 这个类</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asInterface</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> intr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        intr <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            obj<span class=\"token operator\">-></span><span class=\"token function\">queryLocalInterface</span><span class=\"token punctuation\">(</span>IServiceManager<span class=\"token double-colon punctuation\">::</span>descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            intr <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>BpServiceManager<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> intr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> IServiceManager<span class=\"token double-colon punctuation\">::</span>default_impl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setDefaultImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> impl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">/* Only one user of this interface can use this function     */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/* at a time. This is a heuristic to detect if two different */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">/* users in the same process use this function.              */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>IServiceManager<span class=\"token double-colon punctuation\">::</span>default_impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        IServiceManager<span class=\"token double-colon punctuation\">::</span>default_impl <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> IServiceManager<span class=\"token double-colon punctuation\">::</span>default_impl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">IServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p><img data-src=\"/android-binder/1595250-20211114151757336-739536801.png\" alt=\"img\" style=\"aspect-ratio:1194 / 499;\"></p>\n<h1 id=\"server向servicemanager注册服务\"><a class=\"anchor\" href=\"#server向servicemanager注册服务\">#</a> Server 向 ServiceManager 注册服务</h1>\n<p>这里以 <code>MediaServer</code>  为例来分析 Server 向 ServiceManager 注册服务的过程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\av\\media\\mediaserver\\main_mediaserver.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc __unused<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv __unused<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGPIPE<span class=\"token punctuation\">,</span> SIG_IGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 创建一个 ProcessState 实例，打开默认驱动 /dev/binder 并进行 mmap 内存映射</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 此方法的详细分析请参见右侧目录 ServiceManager 的启动过程 ->ProcessState::init</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>ProcessState<span class=\"token operator\">></span> <span class=\"token function\">proc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 客户端获取 ServiceManagerShim 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 此方法的详细分析请参见右侧目录 ServiceManager 的获取过程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> <span class=\"token function\">sm</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaultServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">ALOGI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceManager: %p\"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 注册 media.player 服务</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">MediaPlayerService</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">ResourceManagerService</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">registerExtensions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>hardware<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">configureRpcThreadpool</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 启动线程池</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">startThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 将线程加入线程池</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">joinThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>hardware<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">joinRpcThreadpool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>MediaPlayerService::instantiate</strong></p>\n<p>这个函数的作用就是调用 defaultServiceManager 的 addService 方法来添加向 ServiceManager 注册服务</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\av\\media\\libmediaplayerservice\\MediaPlayerService.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MediaPlayerService</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">defaultServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">String16</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"media.player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MediaPlayerService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"defaultservicemanager-addservice\"><a class=\"anchor\" href=\"#defaultservicemanager-addservice\">#</a> defaultServiceManager()-&gt;addService</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>status_t <span class=\"token class-name\">ServiceManagerShim</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> service<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        <span class=\"token keyword\">bool</span> allowIsolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dumpsysPriority<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Status status <span class=\"token operator\">=</span> mTheRealServiceManager<span class=\"token operator\">-></span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">String8</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> allowIsolated<span class=\"token punctuation\">,</span> dumpsysPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里使用了 <code>mTheRealServiceManager</code>  中的 <code>addService</code>  方法，那么 mTheRealServiceManager 是从哪里来的呢？</p>\n<h2 id=\"mtherealservicemanager\"><a class=\"anchor\" href=\"#mtherealservicemanager\">#</a> mTheRealServiceManager</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> AidlServiceManager <span class=\"token operator\">=</span> android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IServiceManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// From the old libbinder IServiceManager interface to IServiceManager.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceManagerShim</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IServiceManager</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span> mTheRealServiceManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">ServiceManagerShim</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ServiceManagerShim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> impl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">:</span> <span class=\"token function\">mTheRealServiceManager</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从这段 ServiceManagerShim 类的声明中，我们可以清楚的看到 mTheRealServiceManager 是 <code>android::os::IServiceManager</code>  类型的实例，并且在 ServiceManagerShim 实例化时赋值</p>\n<p>而在 <strong>ServiceManager 的获取过程</strong> 中，我们知道 <code>ServiceManagerShim </code> 是在 <code>defaultServiceManager()</code>  中实例化的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> <span class=\"token function\">defaultServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_once</span><span class=\"token punctuation\">(</span>gSmOnce<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sp<span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span> sm <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token comment\">// 获取 ServiceManager 的 BBinder 所对应的 BpBinder 对象，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token comment\">// 并将该对象通过 interface_cast 转换为 AidlServiceManager</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            sm <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">interface_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AidlServiceManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getContextObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting 1s on context object on %s.\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 实例化 ServiceManagerShim</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        gDefaultServiceManager <span class=\"token operator\">=</span> <span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>ServiceManagerShim<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> gDefaultServiceManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以说 <code>mTheRealServiceManager </code> 其实是 <code>BpServiceManager(new BpBinder(0))</code> , 注册服务的顺序为 <code>BpServiceManager--&gt;BpBinder--&gt;IPCThreadState--&gt;ioctl</code></p>\n<p>而 <code>BpServiceManager</code>  现在是由 AIDL 自动生成，在框架编译完成之后的 out 目录中的</p>\n<p><strong>BpServiceManager::addService</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform/out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">namespace</span> android <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> os <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BpServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> _aidl_impl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token generic-function\"><span class=\"token function\">BpInterface</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>_aidl_impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//_aidl_impl 就是 BpBinder (0) 实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> service<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allowIsolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> dumpPriority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0、和 Rpc Binder 有关</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//1、写 interface</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//2、写 name</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">//3、写 binder 对象</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">//4、写 allowIsolated</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeBool</span><span class=\"token punctuation\">(</span>allowIsolated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">//5、写 dumpPriority</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt32</span><span class=\"token punctuation\">(</span>dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//6、借助 BpBinder (0)#transact 来发起 Binder 通信</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_addService<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> allowIsolated<span class=\"token punctuation\">,</span> dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">//7、如果有返回值就从这个 parcel 包里读</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个过程主要是借助  <code>BpBinder(0)#transact</code>  来发起 Binder 通信，Binder 驱动根据 handle == 0 找到我们的 ServiceManager 进程，唤醒他开始处理请求。</p>\n<p>还记得在 <strong>ServiceManager 的启动过程</strong> 中的那个 while 循环函数吗？BinderCallback 就是用来处理 Binder 驱动发送的 <code>BR_TRANSACTION</code>  信号的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\main.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 准备 looper</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>Looper<span class=\"token operator\">></span> looper <span class=\"token operator\">=</span> <span class=\"token class-name\">Looper</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token comment\">/*allowNonCallbacks*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 监听 BC_ENTER_LOOPER 信号，收到该信号后回调处理 binder 调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">BinderCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setupTo</span><span class=\"token punctuation\">(</span>looper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 监听客户端回调</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">ClientCallbackCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setupTo</span><span class=\"token punctuation\">(</span>looper<span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 阻塞等待和处理事件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        looper<span class=\"token operator\">-></span><span class=\"token function\">pollAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// should not be reached</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"bindercallback\"><a class=\"anchor\" href=\"#bindercallback\">#</a> BinderCallback</h2>\n<p><code>BinderCallback::handleEvent</code>  调用了 <code>IPCThreadState::self()-&gt;handlePolledCommands()</code>  来处理命令</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\main.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinderCallback</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">LooperCallback</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> sp<span class=\"token operator\">&lt;</span>BinderCallback<span class=\"token operator\">></span> <span class=\"token function\">setupTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>Looper<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> looper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sp<span class=\"token operator\">&lt;</span>BinderCallback<span class=\"token operator\">></span> cb <span class=\"token operator\">=</span> <span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>BinderCallback<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> binder_fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 监听 BC_ENTER_LOOPER 信号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setupPolling</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>binder_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">LOG_ALWAYS_FATAL_IF</span><span class=\"token punctuation\">(</span>binder_fd <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to setupPolling: %d\"</span><span class=\"token punctuation\">,</span> binder_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> looper<span class=\"token operator\">-></span><span class=\"token function\">addFd</span><span class=\"token punctuation\">(</span>binder_fd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                Looper<span class=\"token double-colon punctuation\">::</span>POLL_CALLBACK<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                Looper<span class=\"token double-colon punctuation\">::</span>EVENT_INPUT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                cb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                <span class=\"token keyword\">nullptr</span> <span class=\"token comment\">/*data*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">LOG_ALWAYS_FATAL_IF</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to add binder FD to Looper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> cb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token comment\">/* fd */</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token comment\">/* events */</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token comment\">/* data */</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">handlePolledCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Continue receiving callbacks.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"ipcthreadstatehandlepolledcommands\"><a class=\"anchor\" href=\"#ipcthreadstatehandlepolledcommands\">#</a> IPCThreadState::handlePolledCommands</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IPCThreadState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>status_t <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">handlePolledCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    status_t result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取并执行命令</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token function\">getAndExecuteCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mIn<span class=\"token punctuation\">.</span><span class=\"token function\">dataPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> mIn<span class=\"token punctuation\">.</span><span class=\"token function\">dataSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">processPendingDerefs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">flushCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ipcthreadstategetandexecutecommand\"><a class=\"anchor\" href=\"#ipcthreadstategetandexecutecommand\">#</a> IPCThreadState::getAndExecuteCommand</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IPCThreadState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>status_t <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getAndExecuteCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    status_t result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int32_t</span> cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 和 binder 驱动通信，获取或传输数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">talkWithDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">>=</span> NO_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        size_t IN <span class=\"token operator\">=</span> mIn<span class=\"token punctuation\">.</span><span class=\"token function\">dataAvail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IN <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int32_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 读取命令</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cmd <span class=\"token operator\">=</span> mIn<span class=\"token punctuation\">.</span><span class=\"token function\">readInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">IF_LOG_COMMANDS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            alog <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Processing top-level Command: \"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getReturnString</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mProcess<span class=\"token operator\">-></span>mThreadCountLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        mProcess<span class=\"token operator\">-></span>mExecutingThreadsCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mProcess<span class=\"token operator\">-></span>mExecutingThreadsCount <span class=\"token operator\">>=</span> mProcess<span class=\"token operator\">-></span>mMaxThreads <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                mProcess<span class=\"token operator\">-></span>mStarvationStartTimeMs <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            mProcess<span class=\"token operator\">-></span>mStarvationStartTimeMs <span class=\"token operator\">=</span> <span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mProcess<span class=\"token operator\">-></span>mThreadCountLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 解析并执行命令</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token function\">executeCommand</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mProcess<span class=\"token operator\">-></span>mThreadCountLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        mProcess<span class=\"token operator\">-></span>mExecutingThreadsCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mProcess<span class=\"token operator\">-></span>mExecutingThreadsCount <span class=\"token operator\">&lt;</span> mProcess<span class=\"token operator\">-></span>mMaxThreads <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                mProcess<span class=\"token operator\">-></span>mStarvationStartTimeMs <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">int64_t</span> starvationTimeMs <span class=\"token operator\">=</span> <span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mProcess<span class=\"token operator\">-></span>mStarvationStartTimeMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>starvationTimeMs <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token function\">ALOGE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binder thread pool (%zu threads) starved for %\"</span> PRId64 <span class=\"token string\">\" ms\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                      mProcess<span class=\"token operator\">-></span>mMaxThreads<span class=\"token punctuation\">,</span> starvationTimeMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            mProcess<span class=\"token operator\">-></span>mStarvationStartTimeMs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// Cond broadcast can be expensive, so don't send it every time a binder</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// call is processed. b/168806193</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mProcess<span class=\"token operator\">-></span>mWaitingForThreads <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">pthread_cond_broadcast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mProcess<span class=\"token operator\">-></span>mThreadCountDecrement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mProcess<span class=\"token operator\">-></span>mThreadCountLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ipcthreadstateexecutecommand\"><a class=\"anchor\" href=\"#ipcthreadstateexecutecommand\">#</a> IPCThreadState::executeCommand</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\IPCThreadState.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>status_t <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">executeCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int32_t</span> cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> BR_TRANSACTION<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 因为目的端 SM 所以 tr.target.ptr 为 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 开始业务分发</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        \t    error <span class=\"token operator\">=</span> the_context_object<span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>reply<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        \t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ipcthreadstatesetthecontextobject\"><a class=\"anchor\" href=\"#ipcthreadstatesetthecontextobject\">#</a> IPCThreadState::setTheContextObject</h2>\n<p>在<strong> ServiceManager 的启动过程</strong> 这节的内容中，我们让 ServiceManager 成为了整个 binder IPC 通信中的上下文管理者，并将其存储在全局变量 <code>the_context_object</code>  中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\main.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>BBinder<span class=\"token operator\">></span> the_context_object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setTheContextObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>BBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    the_context_object <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 将 \"manager\" 服务作为服务端 Bbinder 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">IPCThreadState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setTheContextObject</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 向 binder 驱动发送 ioctl BINDER_SET_CONTEXT_MGR_EXT 信号，将 servicemanager</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 在 ProcessState::initWithDriver 中打开驱动设备 /dev/driver 所返回的文件描述符句柄</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 作为整个 binder IPC 通信中的上下文管理者</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ps<span class=\"token operator\">-></span><span class=\"token function\">becomeContextManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"bbindertransact\"><a class=\"anchor\" href=\"#bbindertransact\">#</a> BBinder::transact</h2>\n<p>所以 <code>the_context_object-&gt;transact()</code>  调用就走到  <code>BBinder</code>  的 transact</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\libs\\binder\\Binder.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// NOLINTNEXTLINE(google-default-arguments)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>status_t <span class=\"token class-name\">BBinder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Parcel<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">,</span> Parcel<span class=\"token operator\">*</span> reply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> flags<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">setDataPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reply <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> FLAG_CLEAR_BUF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        reply<span class=\"token operator\">-></span><span class=\"token function\">markSensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    status_t err <span class=\"token operator\">=</span> NO_ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">case</span> PING_TRANSACTION<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            err <span class=\"token operator\">=</span> <span class=\"token function\">pingBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">case</span> EXTENSION_TRANSACTION<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            err <span class=\"token operator\">=</span> reply<span class=\"token operator\">-></span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">case</span> DEBUG_PID_TRANSACTION<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            err <span class=\"token operator\">=</span> reply<span class=\"token operator\">-></span><span class=\"token function\">writeInt32</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDebugPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            err <span class=\"token operator\">=</span> <span class=\"token function\">onTransact</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// In case this is being transacted on in the same process.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reply <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        reply<span class=\"token operator\">-></span><span class=\"token function\">setDataPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"bnservicemanagerontransact\"><a class=\"anchor\" href=\"#bnservicemanagerontransact\">#</a> BnServiceManager::onTransact</h2>\n<p>然后回到了这个 AIDL 自动生成的 IServiceManager.cpp 中 BnServiceManager 的 onTransact () 方法里</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform/out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t <span class=\"token class-name\">BnServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">onTransact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> _aidl_code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel<span class=\"token operator\">&amp;</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel<span class=\"token operator\">*</span> _aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> _aidl_flags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>_aidl_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_addService<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> in_service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">bool</span> in_allowIsolated<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int32_t</span> in_dumpPriority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 检查 interface</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 读 name</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 读 binder</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 读 in_allowIsolated</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readBool</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_allowIsolated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 读 in_dumpPriority</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 调用真正的 ServiceManager.cpp 中的实现 addService</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> in_service<span class=\"token punctuation\">,</span> in_allowIsolated<span class=\"token punctuation\">,</span> in_dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 如果有返回写返回到 _aidl_reply</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"servicemanageraddservice\"><a class=\"anchor\" href=\"#servicemanageraddservice\">#</a> ServiceManager::addService</h2>\n<p>这里是和 Bp 端是对称的操作，下一步走到 ServiceManager.cpp::addService 方法</p>\n<div class=\"note info\">\n<p>QUESTION? 为什么通过 <code>::android::binder::Status _aidl_status(addService(in_name, in_service, in_allowIsolated, in_dumpPriority))</code>  可以调用到 <code>ServiceManager::addService</code> ?</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\ServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token class-name\">ServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> binder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allowIsolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> dumpPriority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">auto</span> ctx <span class=\"token operator\">=</span> mAccess<span class=\"token operator\">-></span><span class=\"token function\">getCallingContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// apps cannot add services</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">multiuser_get_app_id</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> AID_APP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span>Status<span class=\"token double-colon punctuation\">::</span>EX_SECURITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mAccess<span class=\"token operator\">-></span><span class=\"token function\">canAdd</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span>Status<span class=\"token double-colon punctuation\">::</span>EX_SECURITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span>Status<span class=\"token double-colon punctuation\">::</span>EX_ILLEGAL_ARGUMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 检验 Service 名称的合法性，名称长度要求大于 0 并小于等于 127</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 字符仅包括 [a-z][A-Z][0-9]_-./</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidServiceName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid service name: \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span>Status<span class=\"token double-colon punctuation\">::</span>EX_ILLEGAL_ARGUMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">VENDORSERVICEMANAGER</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">meetsDeclarationRequirements</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// already logged</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span>Status<span class=\"token double-colon punctuation\">::</span>EX_ILLEGAL_ARGUMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  <span class=\"token comment\">// !VENDORSERVICEMANAGER</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// implicitly unlinked when the binder is removed</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 为 binder 对象设置死亡代理</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t在和 service 进行交互时，service 返回一个 Binder 对象。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tBinder 是工作在 service 端，如果，由于某种原因，服务端出现故障而死亡，</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t那么该返回的 Binder 对象也将消失，这时，如果我们在客户端在使用 Binder 对象</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t进行某些函数调用将会出现错误。为了避免该情况的发生，我们可以为</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tBinder 对象设置死亡代理 (linkToDeath)。当出现和服务端连接发生故障时，</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t系统将自动调用死亡代理函数 binderDied ()。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t*/</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder<span class=\"token operator\">-></span><span class=\"token function\">remoteBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        binder<span class=\"token operator\">-></span><span class=\"token function\">linkToDeath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">sp</span><span class=\"token operator\">&lt;</span>ServiceManager<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExisting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Could not linkToDeath when adding \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span>Status<span class=\"token double-colon punctuation\">::</span>EX_ILLEGAL_STATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// Overwrite the old service if it exists</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 添加服务，以 name 作为索引值，使用 binder 作为参数实例化 Service 对象</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    mNameToService<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Service <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">.</span>binder <span class=\"token operator\">=</span> binder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">.</span>allowIsolated <span class=\"token operator\">=</span> allowIsolated<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">.</span>dumpPriority <span class=\"token operator\">=</span> dumpPriority<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">.</span>debugPid <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>debugPid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">/* 检查服务注册的合法性，包括</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t1. 服务是否存在</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t2. 该服务是否是服务端注册的</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t3. 是否有同名服务存在</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t4. 为该服务注册的死亡代理是否成功</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t*/</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mNameToRegistrationCallback<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mNameToRegistrationCallback<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IServiceCallback<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cb <span class=\"token operator\">:</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            mNameToService<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>guaranteeClient <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// permission checked in registerForNotifications</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            cb<span class=\"token operator\">-></span><span class=\"token function\">onRegistration</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> binder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p>Server 想要向 ServiceManager 注册服务，首先通过 <code>defaultServiceManager</code>  获取到一个 Service Manager 的代理对象，然后再调用它的成员函数 <code>addService</code>  将该 Service 组件注册到 Service Manager 中，该代理对象通过向 Binder 驱动设备发送 <code>BC_TRANSACTION</code>  信号和 <code>Service Manager</code>  通信，在 <code>Service Manager</code>  启动之后会进入一个阻塞的无限循环， <code>Service Manager</code>  通过 <code>BinderCallback</code>  回调函数处理 Binder 驱动设备返回的 <code>BR_TRANSACTION</code> , 调用 BBinder 的 transact 方法，这个方法将会把我们引到 BnServiceManager 的 onTransact () 方法，终于这个方法将我们带到了真正添加服务的方法<strong> ServiceManager.cpp::addService</strong>, 并向 <code>mNameToService</code>  字典中添加 <code>name: Service</code>  的键值对，来为 Client 向 ServiceManager 获取服务的过程做数据准备.</p>\n<p><img data-src=\"/android-binder/1595250-20211114151811263-2017459210.png\" alt=\"img\" style=\"aspect-ratio:1241 / 601;\"></p>\n<h1 id=\"client向servicemanager获取服务\"><a class=\"anchor\" href=\"#client向servicemanager获取服务\">#</a> Client 向 ServiceManager 获取服务</h1>\n<p>这里以 <code>MediaServer</code>  为例来分析 Client 向 ServiceManager 获取服务的过程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// android-platform\\frameworks\\av\\media\\libmedia\\IMediaDeathNotifier.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// establish binder interface to MediaPlayerService</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*static*/</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IMediaPlayerService<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IMediaDeathNotifier</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMediaPlayerService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ALOGV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMediaPlayerService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Mutex<span class=\"token double-colon punctuation\">::</span>Autolock <span class=\"token function\">_l</span><span class=\"token punctuation\">(</span>sServiceLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sMediaPlayerService <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        sp<span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span> sm <span class=\"token operator\">=</span> <span class=\"token function\">defaultServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> binder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            binder <span class=\"token operator\">=</span> sm<span class=\"token operator\">-></span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token function\">String16</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"media.player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 核心函数，获取名为 media.player 的服务，因为在之前 Server 已经向 ServiceManager 注册过了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">ALOGW</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Media player service not published, waiting...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5 s 一个无限循环每 0.5 秒就获取一次服务，知道获取到权限</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sDeathNotifier <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            sDeathNotifier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DeathNotifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Service 死亡后创建死亡通知</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        binder<span class=\"token operator\">-></span><span class=\"token function\">linkToDeath</span><span class=\"token punctuation\">(</span>sDeathNotifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        sMediaPlayerService <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">interface_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IMediaPlayerService<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">ALOGE_IF</span><span class=\"token punctuation\">(</span>sMediaPlayerService <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no media player service!?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> sMediaPlayerService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"servicemanagershimgetservice\"><a class=\"anchor\" href=\"#servicemanagershimgetservice\">#</a> ServiceManagerShim::getService</h2>\n<p>这里调用 <code>ServiceManagerShim::checkService</code>  来寻找以注册的服务</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\frameworks\\native\\libs\\binder\\IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// This implementation could be simplified and made more efficient by delegating</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// to waitForService. However, this changes the threading structure in some</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// cases and could potentially break prebuilts. Once we have higher logistical</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// complexity, this could be attempted.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token class-name\">ServiceManagerShim</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> gSystemBootCompleted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> svc <span class=\"token operator\">=</span> <span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 检查一下指定的服务名称是否存在</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>svc <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> svc<span class=\"token punctuation\">;</span><span class=\"token comment\">// 找到了 直接返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//verder 进程服务获取逻辑，这里不做分析</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">bool</span> isVendorService <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/dev/vndbinder\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int64_t</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int64_t</span> startTime <span class=\"token operator\">=</span> <span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// Vendor code can't access system properties</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gSystemBootCompleted <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isVendorService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__ANDROID__</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">char</span> bootCompleted<span class=\"token punctuation\">[</span>PROPERTY_VALUE_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">property_get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys.boot_completed\"</span><span class=\"token punctuation\">,</span> bootCompleted<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        gSystemBootCompleted <span class=\"token operator\">=</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>bootCompleted<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        gSystemBootCompleted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// retry interval in millisecond; note that vendor services stay at 100ms</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">const</span> useconds_t sleepTime <span class=\"token operator\">=</span> gSystemBootCompleted <span class=\"token operator\">?</span> <span class=\"token number\">1000</span> <span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">ALOGI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for service '%s' on '%s'...\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">String8</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime <span class=\"token operator\">&lt;</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span>sleepTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> svc <span class=\"token operator\">=</span> <span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>svc <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">ALOGI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for service '%s' on '%s' successful after waiting %\"</span> PRIi64 <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                  <span class=\"token function\">String8</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProcessState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getDriverName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                  <span class=\"token function\">uptimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">return</span> svc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">ALOGW</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service %s didn't start. Returning NULL\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">String8</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"servicemanagershimcheckservice\"><a class=\"anchor\" href=\"#servicemanagershimcheckservice\">#</a> ServiceManagerShim::checkService</h2>\n<p>这里和<a href=\"#Server%E5%90%91ServiceManager%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1\"> Server 向 ServiceManager 注册服务</a>一节开头中的形式一样，也是通过 <code>mTheRealServiceManager</code>  来执行核心的获取服务逻辑，对该变量的赋值于分析可参阅<a href=\"##mTheRealServiceManager\"> mTheRealServiceManager</a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token class-name\">ServiceManagerShim</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String16<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mTheRealServiceManager<span class=\"token operator\">-></span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span><span class=\"token function\">String8</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"bpservicemanagercheckservice\"><a class=\"anchor\" href=\"#bpservicemanagercheckservice\">#</a> BpServiceManager::checkService</h2>\n<p>同样的，我们需要从安卓框架编译之后的输入文件中找到由模板 aidl 生成的 <code>IServiceManager.cpp</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">///android-platform/out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm64_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//1. 写 interface</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//2. 将要查询的 Service name 写入</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 借助 BpBinder (0)#transact 来发起 Binder 通信</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_checkService<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readNullableStrongBinder</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"bnservicemanagerontransact-2\"><a class=\"anchor\" href=\"#bnservicemanagerontransact-2\">#</a> BnServiceManager::onTransact</h2>\n<p>与 <code>Server向ServiceManager注册服务</code> 中相类似， <code>BpBinder(0)#transact</code>  来发起 Binder 通信后，BinderCallback 处理 Binder 驱动发送的 <code>BR_TRANSACTION</code>  信号，并交由 <code>IPCThreadState::self()-&gt;handlePolledCommands()</code>  来处理命令，最终来到由 aidl 生成的 <code>aidl/android/os/IServiceManager.cpp</code>  的 <code>BnServiceManager::onTransact</code>  去执行命令，与 ServiceManager 通过 Binder 通信</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t <span class=\"token class-name\">BnServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">onTransact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> _aidl_code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel<span class=\"token operator\">&amp;</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel<span class=\"token operator\">*</span> _aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> _aidl_flags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>_aidl_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_checkService<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 写入要查询的名称</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 调用真正的 ServiceManager.cpp 中的实现 addService</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNEXPECTED_NULL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status<span class=\"token double-colon punctuation\">::</span>EX_NULL_POINTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_ret_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"servicemanagercheckservice\"><a class=\"anchor\" href=\"#servicemanagercheckservice\">#</a> ServiceManager::checkService</h2>\n<p>同样和 Bp 端是对称的操作，下一步走到 ServiceManager.cpp::checkService 方法中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\ServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Status <span class=\"token class-name\">ServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">*</span> outBinder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>outBinder <span class=\"token operator\">=</span> <span class=\"token function\">tryGetService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// returns ok regardless of result for legacy reasons</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"servicemanagertrygetservice\"><a class=\"anchor\" href=\"#servicemanagertrygetservice\">#</a> ServiceManager::tryGetService</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\ServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> <span class=\"token class-name\">ServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">tryGetService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> startIfNotFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> ctx <span class=\"token operator\">=</span> mAccess<span class=\"token operator\">-></span><span class=\"token function\">getCallingContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Service<span class=\"token operator\">*</span> service <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 调用 mNameToService.find 利用 id 查找 Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mNameToService<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mNameToService<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        service <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>service<span class=\"token operator\">-></span>allowIsolated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            uid_t appid <span class=\"token operator\">=</span> <span class=\"token function\">multiuser_get_app_id</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">bool</span> isIsolated <span class=\"token operator\">=</span> appid <span class=\"token operator\">>=</span> AID_ISOLATED_START <span class=\"token operator\">&amp;&amp;</span> appid <span class=\"token operator\">&lt;=</span> AID_ISOLATED_END<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isIsolated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        out <span class=\"token operator\">=</span> service<span class=\"token operator\">-></span>binder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mAccess<span class=\"token operator\">-></span><span class=\"token function\">canFind</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 如果 Service 没有启动的话就尝试启动 Servicve</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>out <span class=\"token operator\">&amp;&amp;</span> startIfNotFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">tryStartService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// Setting this guarantee each time we hand out a binder ensures that the client-checking</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// loop knows about the event even if the client immediately drops the service</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        service<span class=\"token operator\">-></span>guaranteeClient <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而倘若我们深究 <code>mNameToService</code> , 它可以在 <code>ServiceManager.h</code>  找到定义</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform/frameworks/native/libs/fakeservicemanager/ServiceManager.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceManager</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IServiceManager</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>String16<span class=\"token punctuation\">,</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">>></span> mNameToService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace android</span></pre></td></tr></table></figure><p>这样一看原来查找的过程很简单，就是在一个 map 字典里找找是否含有这个键，如果有的话，就是查找成功了并且返回 <code>IBinder</code>  类型的值，添加向字典中添加键值的过程其实已经在注册服务的时候做好了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\frameworks\\native\\cmds\\servicemanager\\ServiceManager.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token class-name\">ServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> binder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allowIsolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> dumpPriority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// Overwrite the old service if it exists</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 添加服务，以 name 作为索引值，使用 binder 作为参数实例化 Service 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    mNameToService<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Service <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span>binder <span class=\"token operator\">=</span> binder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">.</span>allowIsolated <span class=\"token operator\">=</span> allowIsolated<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span>dumpPriority <span class=\"token operator\">=</span> dumpPriority<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span>debugPid <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>debugPid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">/* 检查服务注册的合法性，包括</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t1. 服务是否存在</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t2. 该服务是否是服务端注册的</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t3. 是否有同名服务存在</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t4. 为该服务注册的死亡代理是否成功</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t*/</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mNameToRegistrationCallback<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> mNameToRegistrationCallback<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sp<span class=\"token operator\">&lt;</span>IServiceCallback<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cb <span class=\"token operator\">:</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            mNameToService<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>guaranteeClient <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// permission checked in registerForNotifications</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            cb<span class=\"token operator\">-></span><span class=\"token function\">onRegistration</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> binder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结-4\"><a class=\"anchor\" href=\"#总结-4\">#</a> 总结</h2>\n<p>Client 向 ServiceManager 获取服务的过程其实很简单，主要就是一个 map 字典查询的过程，值得注意的是，Client 与 ServiceManager 的通信也是通过 Binder 驱动进行的</p>\n<h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h1>\n<h2 id=\"安卓系统编译后由aidl生成的iservicemanagercpp\"><a class=\"anchor\" href=\"#安卓系统编译后由aidl生成的iservicemanagercpp\">#</a> 安卓系统编译后由 aidl 生成的 IServiceManager.cpp</h2>\n<p>编译系统版本:  <code>android-12.0.0_r34</code></p>\n<p><code>platform/out/soong/.intermediates/frameworks/native/libs/binder/libbinder/android_arm64_armv8-a_shared/gen/aidl/android/os/IServiceManager.cpp</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/os/IServiceManager.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/os/BpServiceManager.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> android <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> os <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE</span><span class=\"token punctuation\">(</span>ServiceManager<span class=\"token punctuation\">,</span> <span class=\"token string\">\"android.os.IServiceManager\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace os</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace android</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/os/BpServiceManager.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/os/BnServiceManager.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;binder/Parcel.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android-base/macros.h></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">namespace</span> android <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">namespace</span> os <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BpServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> _aidl_impl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token generic-function\"><span class=\"token function\">BpInterface</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IServiceManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>_aidl_impl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_getService<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readNullableStrongBinder</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_checkService<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readNullableStrongBinder</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> service<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allowIsolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> dumpPriority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeBool</span><span class=\"token punctuation\">(</span>allowIsolated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt32</span><span class=\"token punctuation\">(</span>dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_addService<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> allowIsolated<span class=\"token punctuation\">,</span> dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">listServices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int32_t</span> dumpPriority<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt32</span><span class=\"token punctuation\">(</span>dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_listServices<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">listServices</span><span class=\"token punctuation\">(</span>dumpPriority<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8VectorFromUtf16Vector</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">registerForNotifications</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IServiceCallback<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">IServiceCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asBinder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_registerForNotifications<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">registerForNotifications</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">unregisterForNotifications</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IServiceCallback<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">IServiceCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asBinder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_unregisterForNotifications<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">unregisterForNotifications</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre></pre></td></tr><tr><td data-num=\"256\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isDeclared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_isDeclared<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">isDeclared</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readBool</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDeclaredInstances</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> iface<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>iface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_getDeclaredInstances<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getDeclaredInstances</span><span class=\"token punctuation\">(</span>iface<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8VectorFromUtf16Vector</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre></pre></td></tr><tr><td data-num=\"330\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">updatableViaApex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>optional<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_updatableViaApex<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">updatableViaApex</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> _aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre></pre></td></tr><tr><td data-num=\"367\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">registerClientCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> service<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IClientCallback<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">IClientCallback</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">asBinder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_registerClientCallback<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">registerClientCallback</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre></pre></td></tr><tr><td data-num=\"408\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">tryUnregisterService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> service<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_tryUnregisterService<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">tryUnregisterService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre></pre></td></tr><tr><td data-num=\"445\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token class-name\">BpServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getServiceDebugInfo</span><span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>ServiceDebugInfo<span class=\"token operator\">></span><span class=\"token operator\">*</span> _aidl_return<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre>  _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">markForBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">remoteStrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel _aidl_reply<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">writeInterfaceToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInterfaceDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">transact</span><span class=\"token punctuation\">(</span>BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_getServiceDebugInfo<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">UNLIKELY</span><span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNKNOWN_TRANSACTION <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token class-name\">IServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDefaultImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getServiceDebugInfo</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">readFromParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>    <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"469\"></td><td><pre>  _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token punctuation\">.</span><span class=\"token function\">readParcelableVector</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"470\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre>    <span class=\"token keyword\">goto</span> _aidl_error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"472\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"473\"></td><td><pre>  _aidl_error<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"474\"></td><td><pre>  _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">setFromStatusT</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"475\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"476\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"477\"></td><td><pre></pre></td></tr><tr><td data-num=\"478\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace os</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre></pre></td></tr><tr><td data-num=\"480\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace android</span></pre></td></tr><tr><td data-num=\"481\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/os/BnServiceManager.h></span></span></pre></td></tr><tr><td data-num=\"482\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;binder/Parcel.h></span></span></pre></td></tr><tr><td data-num=\"483\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;binder/Stability.h></span></span></pre></td></tr><tr><td data-num=\"484\"></td><td><pre></pre></td></tr><tr><td data-num=\"485\"></td><td><pre><span class=\"token keyword\">namespace</span> android <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre></pre></td></tr><tr><td data-num=\"487\"></td><td><pre><span class=\"token keyword\">namespace</span> os <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"488\"></td><td><pre></pre></td></tr><tr><td data-num=\"489\"></td><td><pre><span class=\"token class-name\">BnServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BnServiceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"491\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>internal<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Stability</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">markCompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"493\"></td><td><pre></pre></td></tr><tr><td data-num=\"494\"></td><td><pre><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t <span class=\"token class-name\">BnServiceManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">onTransact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> _aidl_code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel<span class=\"token operator\">&amp;</span> _aidl_data<span class=\"token punctuation\">,</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>Parcel<span class=\"token operator\">*</span> _aidl_reply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> _aidl_flags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"495\"></td><td><pre>  <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>status_t _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"496\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>_aidl_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_getService<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"498\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"499\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"500\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"501\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"503\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"505\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"506\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"508\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"511\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"513\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"514\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"515\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"516\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"517\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"519\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"520\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"522\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_checkService<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"524\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"528\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"531\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"532\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"533\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"534\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"535\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkService</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"536\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"538\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"539\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"540\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"541\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"542\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"543\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeStrongBinder</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"544\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"545\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"546\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"547\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"548\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"549\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_addService<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"550\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"551\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"552\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> in_service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"553\"></td><td><pre>    <span class=\"token keyword\">bool</span> in_allowIsolated<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"554\"></td><td><pre>    <span class=\"token keyword\">int32_t</span> in_dumpPriority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"555\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"556\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"557\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"558\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"559\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"560\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"561\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"562\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"563\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"564\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"565\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"566\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"567\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readBool</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_allowIsolated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"568\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"569\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"570\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"571\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"572\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"573\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"574\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> in_service<span class=\"token punctuation\">,</span> in_allowIsolated<span class=\"token punctuation\">,</span> in_dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"576\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"578\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"579\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"581\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"584\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"585\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_listServices<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"586\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"587\"></td><td><pre>    <span class=\"token keyword\">int32_t</span> in_dumpPriority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"588\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"589\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"590\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"591\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"592\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"593\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_dumpPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"594\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"595\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"596\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"597\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">listServices</span><span class=\"token punctuation\">(</span>in_dumpPriority<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"599\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"600\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"601\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"602\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"603\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"604\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"605\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeUtf8VectorAsUtf16Vector</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"606\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"607\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"608\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"609\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"610\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"611\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_registerForNotifications<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"612\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"614\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IServiceCallback<span class=\"token operator\">></span> in_callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"615\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"616\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"617\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"618\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"619\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"620\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"621\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"622\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"623\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"624\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"625\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"626\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"627\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">registerForNotifications</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> in_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"628\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"629\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"630\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"631\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"632\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"633\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"634\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"635\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"636\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"637\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_unregisterForNotifications<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"638\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"639\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"640\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IServiceCallback<span class=\"token operator\">></span> in_callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"641\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"642\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"644\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"645\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"646\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"647\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"648\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"649\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"650\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"651\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"652\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"653\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">unregisterForNotifications</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> in_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"654\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"655\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"656\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"658\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"659\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"660\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"661\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"662\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"663\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_isDeclared<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"664\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"665\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre>    <span class=\"token keyword\">bool</span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"667\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"668\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"669\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"670\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"671\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"672\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"673\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"674\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"675\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDeclared</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"676\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"677\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"678\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"679\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"680\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"681\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"682\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"683\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeBool</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"684\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"685\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"686\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"687\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"688\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"689\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_getDeclaredInstances<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"690\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"691\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_iface<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"692\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"693\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"694\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"695\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"696\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"697\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_iface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"698\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"699\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"700\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"701\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDeclaredInstances</span><span class=\"token punctuation\">(</span>in_iface<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"702\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"703\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"704\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"705\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"706\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"707\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"708\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"709\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeUtf8VectorAsUtf16Vector</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"710\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"711\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"712\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"713\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"714\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"715\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_updatableViaApex<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"716\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"717\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"718\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>optional<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"719\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"720\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"721\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"722\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"723\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"724\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"725\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"726\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"727\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">updatableViaApex</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"728\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"729\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"730\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"731\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"732\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"733\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"734\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"735\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeUtf8AsUtf16</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"736\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"737\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"738\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"739\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"740\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"741\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_registerClientCallback<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"742\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"743\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"744\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> in_service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"745\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>IClientCallback<span class=\"token operator\">></span> in_callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"746\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"747\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"748\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"749\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"750\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"751\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"752\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"753\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"754\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"755\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"756\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"757\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"758\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"759\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"760\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"761\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"762\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">registerClientCallback</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> in_service<span class=\"token punctuation\">,</span> in_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"763\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"764\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"765\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"766\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"767\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"768\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"769\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"770\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"771\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"772\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_tryUnregisterService<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"773\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"774\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>string in_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"775\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>sp<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>IBinder<span class=\"token operator\">></span> in_service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"776\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"777\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"778\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"779\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"780\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8FromUtf16</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"781\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"782\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"783\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"784\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">readStrongBinder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>in_service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"785\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"786\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"787\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"788\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">tryUnregisterService</span><span class=\"token punctuation\">(</span>in_name<span class=\"token punctuation\">,</span> in_service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"789\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"790\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"791\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"792\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"793\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"794\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"795\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"796\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"797\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"798\"></td><td><pre>  <span class=\"token keyword\">case</span> BnServiceManager<span class=\"token double-colon punctuation\">::</span>TRANSACTION_getServiceDebugInfo<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"799\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"800\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>os<span class=\"token double-colon punctuation\">::</span>ServiceDebugInfo<span class=\"token operator\">></span> _aidl_return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"801\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_aidl_data<span class=\"token punctuation\">.</span><span class=\"token function\">checkInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"802\"></td><td><pre>      _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>BAD_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"803\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"804\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"805\"></td><td><pre>    <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status <span class=\"token function\">_aidl_status</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServiceDebugInfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"806\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"807\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"808\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"809\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"810\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_aidl_status<span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"811\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"812\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"813\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> _aidl_reply<span class=\"token operator\">-></span><span class=\"token function\">writeParcelableVector</span><span class=\"token punctuation\">(</span>_aidl_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"814\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_aidl_ret_status<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"815\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"816\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"817\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"818\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"819\"></td><td><pre>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"820\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"821\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">BBinder</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">onTransact</span><span class=\"token punctuation\">(</span>_aidl_code<span class=\"token punctuation\">,</span> _aidl_data<span class=\"token punctuation\">,</span> _aidl_reply<span class=\"token punctuation\">,</span> _aidl_flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"822\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"823\"></td><td><pre>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"824\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"825\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_aidl_ret_status <span class=\"token operator\">==</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>UNEXPECTED_NULL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"826\"></td><td><pre>    _aidl_ret_status <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Status</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromExceptionCode</span><span class=\"token punctuation\">(</span><span class=\"token double-colon punctuation\">::</span>android<span class=\"token double-colon punctuation\">::</span>binder<span class=\"token double-colon punctuation\">::</span>Status<span class=\"token double-colon punctuation\">::</span>EX_NULL_POINTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>_aidl_reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"827\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"828\"></td><td><pre>  <span class=\"token keyword\">return</span> _aidl_ret_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"829\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"830\"></td><td><pre></pre></td></tr><tr><td data-num=\"831\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace os</span></pre></td></tr><tr><td data-num=\"832\"></td><td><pre></pre></td></tr><tr><td data-num=\"833\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// namespace android</span></pre></td></tr></table></figure><h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXR5dWFuLmNvbS8yMDE0LzAxLzAxL2JpbmRlci1nYWlzaHUv\">gityuan 大佬的 Binder 系列</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MueW9ueW91Y2xvdWQuY29tL2RvYy93aWtpL3Byb2plY3QvZGVlcC1hbmRyb2lkLXYxL2JpbmRlci5odG1sIzA3ZjcwNTE0YmIzODhkYmUyYTFmYzJjYmU3ZGNmZGM4\">第 6 章 深入理解 Binder</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZ2hvbmd6aHUvcC8xNTU1MTk3OC5odG1s\">Android 12 系统源码分析 | Native Binder 代码变迁 </span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaW5ub3N0L2FyY2hpdmUvMjAxMS8wMS8wOS8xOTMxNDU2Lmh0bWw=\">Android 深入浅出之 Binder 机制 </span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGVsbG9raXR0eTIvcC8xNTA4ODI2NS5odG1s\">理解 Android Binder 机制 (2/3)：C++ 层</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/android-platform-compile/",
            "url": "https://oacia.dev/android-platform-compile/",
            "title": "pixel3安卓系统编译及刷入过程记录",
            "date_published": "2024-06-20T09:33:17.000Z",
            "content_html": "<div class=\"note warning\">\n<p>想要下载并编译安卓系统，请必须预留至少 250G 及以上的空余空间，并保持代理连接稳定，否则将导致下载失败并从头下载！</p>\n</div>\n<h1 id=\"安卓系统编译环境配置\"><a class=\"anchor\" href=\"#安卓系统编译环境配置\">#</a> 安卓系统编译环境配置</h1>\n<h2 id=\"为虚拟机配置代理\"><a class=\"anchor\" href=\"#为虚拟机配置代理\">#</a> 为虚拟机配置代理</h2>\n<h3 id=\"查看虚拟机代理地址\"><a class=\"anchor\" href=\"#查看虚拟机代理地址\">#</a> 查看虚拟机代理地址</h3>\n<p>打开 <code>clash for windows</code> , 并打开 <code>Allow LAN</code>  的开关，随后点击 <code>network interfaces</code></p>\n<p><img data-src=\"/android-platform-compile/image-20230811175325211.png\" alt=\"image-20230811175325211\" style=\"aspect-ratio:1070 / 760;\"></p>\n<p>请注意我的虚拟机使用的网络连接方式为 NAT 模式，所以需要关注 <code>VMnet8</code>  的地址，所以对于该虚拟机，代理地址为 <code>192.168.27.1</code> , 端口就是 <code>clash</code>  中 <code>Port</code>  选项所显示的端口</p>\n<p><img data-src=\"/android-platform-compile/image-20230811175516413.png\" alt=\"image-20230811175516413\" style=\"aspect-ratio:1070 / 760;\"></p>\n<h3 id=\"启用虚拟机代理\"><a class=\"anchor\" href=\"#启用虚拟机代理\">#</a> 启用虚拟机代理</h3>\n<p>依次点击如下选项进入代理配置</p>\n<p><img data-src=\"/android-platform-compile/image-20230811180538737.png\" alt=\"image-20230811180538737\" style=\"aspect-ratio:1278 / 772;\"></p>\n<p>输入代理地址保存即可</p>\n<p><img data-src=\"/android-platform-compile/image-20230811180608202.png\" alt=\"image-20230811180608202\" style=\"aspect-ratio:840 / 516;\"></p>\n<h2 id=\"配置docker-ubuntu镜像\"><a class=\"anchor\" href=\"#配置docker-ubuntu镜像\">#</a> 配置 docker ubuntu 镜像</h2>\n<h3 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 docker</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker.io</pre></td></tr></table></figure><h3 id=\"docker-pull代理配置\"><a class=\"anchor\" href=\"#docker-pull代理配置\">#</a> docker pull 代理配置</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/systemd/system/docker.service.d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> gedit /etc/systemd/system/docker.service.d/proxy.conf</pre></td></tr></table></figure><p>输入以下代理服务器内容</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"HTTP_PROXY=http://192.168.27.1:7890/\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"HTTPS_PROXY=http://192.168.27.1:7890/\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">Environment</span><span class=\"token operator\">=</span><span class=\"token string\">\"NO_PROXY=localhost,127.0.0.1\"</span></pre></td></tr></table></figure><h3 id=\"刷新配置并重启-docker-服务\"><a class=\"anchor\" href=\"#刷新配置并重启-docker-服务\">#</a> 刷新配置并重启 docker 服务</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl daemon-reload</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><h3 id=\"docker镜像代理配置\"><a class=\"anchor\" href=\"#docker镜像代理配置\">#</a> docker 镜像代理配置</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> ~/.docker/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> gedit ~/.docker/config.json</pre></td></tr></table></figure><p>输入以下内容</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token string\">\"proxies\"</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"default\"</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token string\">\"httpProxy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"http://192.168.27.1:7890/\"</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token string\">\"httpsProxy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"http://192.168.27.1:7890/\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token string\">\"noProxy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"localhost,127.0.0.1\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"下载ubuntu镜像\"><a class=\"anchor\" href=\"#下载ubuntu镜像\">#</a> 下载 Ubuntu 镜像</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull ubuntu</pre></td></tr></table></figure><h3 id=\"运行ubuntu镜像\"><a class=\"anchor\" href=\"#运行ubuntu镜像\">#</a> 运行 Ubuntu 镜像</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--net</span> <span class=\"token function\">host</span> <span class=\"token parameter variable\">--name</span> aplatform ubuntu /bin/bash</pre></td></tr></table></figure><h2 id=\"安装sudovim\"><a class=\"anchor\" href=\"#安装sudovim\">#</a> 安装 sudo,vim</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">sudo</span></pre></td></tr></table></figure><h2 id=\"修改apt-get的软件源为阿里源\"><a class=\"anchor\" href=\"#修改apt-get的软件源为阿里源\">#</a> 修改 apt-get 的软件源为阿里源</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /etc/apt/sources.list /etc/apt/sources.list_backup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/apt/sources.list</pre></td></tr></table></figure><p>替换为如下内容</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre># deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num=\"11\"></td><td><pre># deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</pre></td></tr></table></figure><p>随后将 <code>apt-get</code>  更新至最新版本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> build-essential</pre></td></tr></table></figure><h2 id=\"安装必要的库\"><a class=\"anchor\" href=\"#安装必要的库\">#</a> 安装必要的库</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> git-core gnupg flex bison build-essential <span class=\"token function\">zip</span> <span class=\"token function\">curl</span> zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc <span class=\"token function\">unzip</span> fontconfig libssl-dev <span class=\"token function\">bc</span> kmod cpio <span class=\"token function\">git</span> <span class=\"token function\">curl</span> <span class=\"token function\">rsync</span></pre></td></tr></table></figure><h2 id=\"为git配置基本信息\"><a class=\"anchor\" href=\"#为git配置基本信息\">#</a> 为 git 配置基本信息</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"xxx@gmail.com\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"xxx\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> http.proxy <span class=\"token number\">192.168</span>.27.1:7890</pre></td></tr></table></figure><h2 id=\"安装repo\"><a class=\"anchor\" href=\"#安装repo\">#</a> 安装 repo</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> ~/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">curl</span> https://storage.googleapis.com/git-repo-downloads/repo <span class=\"token operator\">></span> ~/bin/repo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> a+x ~/bin/repo</pre></td></tr></table></figure><h2 id=\"修改repo的下载源为清华源并添加repo至全局变量\"><a class=\"anchor\" href=\"#修改repo的下载源为清华源并添加repo至全局变量\">#</a> 修改 repo 的下载源为清华源，并添加 repo 至全局变量</h2>\n<h3 id=\"打开全局变量配置文件\"><a class=\"anchor\" href=\"#打开全局变量配置文件\">#</a> 打开全局变量配置文件</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> ~/.bashrc</pre></td></tr></table></figure><h3 id=\"添加全局变量\"><a class=\"anchor\" href=\"#添加全局变量\">#</a> 添加全局变量</h3>\n<p>在末尾添加这三行并保存</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># repo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">REPO_URL</span><span class=\"token operator\">=</span><span class=\"token string\">'https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"~/bin:<span class=\"token environment constant\">$PATH</span>\"</span></pre></td></tr></table></figure><h3 id=\"使配置文件生效\"><a class=\"anchor\" href=\"#使配置文件生效\">#</a> 使配置文件生效</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.bashrc</pre></td></tr></table></figure><h2 id=\"安装python\"><a class=\"anchor\" href=\"#安装python\">#</a> 安装 python</h2>\n<p>如果使用 <code>python --version</code>  有打印 python 版本的话，那么这一步就不需要了，如果 docker 中没有安装 <code>python</code> , 在 docker 内使用如下命令安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> software-properties-common</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>add-apt-repository ppa:deadsnakes/ppa</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3.9</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /usr/bin/python3 /usr/bin/python</pre></td></tr></table></figure><h2 id=\"修改交换区大小\"><a class=\"anchor\" href=\"#修改交换区大小\">#</a> 修改交换区大小</h2>\n<p>为了防止编译源码的过程中由于交换区不足而失败，所以我们需要去修改<strong>虚拟机</strong>的交换区的大小</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果提示 No such file or directory，那就直接进行下面设置交换区的操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> swapoff /swapfile</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> /swapfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 设置了 32g 交换区，防止编译失败，执行下列命令需要花费一段时间，如果执行命令后没有输出，请耐心等待命令执行完毕</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/swapfile <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>1GB <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /swapfile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkswap</span> <span class=\"token parameter variable\">-f</span> /swapfile</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">swapon</span> /swapfile</pre></td></tr></table></figure><h1 id=\"安卓系统源码下载\"><a class=\"anchor\" href=\"#安卓系统源码下载\">#</a> 安卓系统源码下载</h1>\n<h2 id=\"查看android版本\"><a class=\"anchor\" href=\"#查看android版本\">#</a> 查看 android 版本</h2>\n<p>进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZG9jcy9zZXR1cC9hYm91dC9idWlsZC1udW1iZXJzP2hsPXpoLWNu\">代号，标记和 build 号</span>来查看安卓系统的版本</p>\n<p>如果是预装的系统，那么 kernel 版本和系统版本是有对应关系的，例如我给 pixel3 刷入的系统为 <code>blueline-sp1a.210812.016.c2-factory-fa981d87</code> , 那么在上面提到的网址内找到该安卓系统该 <code>build ID</code>  所对应的安卓系统版本 <code>android-12.0.0_r34</code>  如图所示</p>\n<p><img data-src=\"/android-platform-compile/image-20231010095645706.png\" alt=\"image-20231010095645706\" style=\"aspect-ratio:1920 / 1078;\"></p>\n<h2 id=\"下载\"><a class=\"anchor\" href=\"#下载\">#</a> 下载</h2>\n<p>输入如下命令来进行安卓系统源码下载，分支就选择我们之前查找到的那个分支</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> android-platform <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> android-platform</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>repo init <span class=\"token parameter variable\">-u</span> https://android.googlesource.com/platform/manifest <span class=\"token parameter variable\">-b</span> android-12.0.0_r34 <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>repo <span class=\"token function\">sync</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr></table></figure><h1 id=\"安卓系统编译\"><a class=\"anchor\" href=\"#安卓系统编译\">#</a> 安卓系统编译</h1>\n<p>在源码下载完成之后，我们首先使用 <code>envsetup.sh</code>  设置构建环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> build/envsetup.sh</pre></td></tr></table></figure><p>之后使用 lunch 命令选择目标，我们可以直接输入 <code>lunch</code>  来查看可供编译的编译</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lunch</pre></td></tr></table></figure><p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZG9jcy9zZXR1cC9yZWZlcmVuY2UvYnVpbGQtbnVtYmVycz9obD16aC1jbiNidWlsZC10YXJnZXRz\"> google 设备代号</span>中可以知道 pixel3 的设备代号是 <code>blueline</code></p>\n<p><img data-src=\"/android-platform-compile/image-20240620192202983.png\" alt=\"image-20240620192202983\" style=\"aspect-ratio:531 / 648;\"></p>\n<p>所以我们可以直接使用如下命令设置好编译目标</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lunch aosp_blueline-userdebug</pre></td></tr></table></figure><p>这里出现了 <code>Build sandboxing disabled due to nsjail error</code>  报错，这个报错应该是不会影响后续的系统编译的</p>\n<p><img data-src=\"/android-platform-compile/image-20240620194321797.png\" alt=\"image-20240620194321797\" style=\"aspect-ratio:815 / 543;\"></p>\n<details class=\"info\"><summary>lunch自定义命令组合</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lunch product_name-release-build_variant</pre></td></tr></table></figure><p>此字符串的组成部分包括：</p>\n<ul>\n<li>\n<p>product_name 是我们要构建的产品的名称，例如  <code>aosp_cf_x86_64_phone</code>  或  <code>aosp_husky</code> 。特定的  <code>product_name</code>  可以遵循我们自己的设备格式，但 Google 为其设备采用的格式包含以下组件：</p>\n<ul>\n<li><code>aosp</code>  是指 Android 开源平台。</li>\n<li>（可选）如果要在 Cuttlefish 模拟器中运行目标，则包含  <code>cf</code> 。</li>\n<li>架构和硬件（代号），例如  <code>x86_64_phone</code>  或  <code>husky</code> （Pixel 8 Pro 的代号）。如需查看 Google 设备的代号列表，请参阅<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZG9jcy9zZXR1cC9yZWZlcmVuY2UvYnVpbGQtbnVtYmVycz9obD16aC1jbiNidWlsZC10YXJnZXRz\">设备代号</span>。</li>\n</ul>\n<p>所以对于 pixel3 来说，我们可以将 <code>product_name</code>  配置为 <code>aosp_blueline</code></p>\n</li>\n<li>\n<p>将 release 设置为  <code>trunk_staging</code> 。</p>\n</li>\n<li>\n<p>此字符串的 build_variant 部分可以是下表中的三个值之一，这里我选择 user 为目标来构建，毕竟谁知道万一编译成 debug 会不会有 app 检测到特征了嘞～</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">build_variant</th>\n<th>概述</th>\n<th style=\"text-align:left\">说明</th>\n<th>ro.secure</th>\n<th>ro.debuggable</th>\n<th>ro.kernel.android.checkjni</th>\n<th>adb 功能</th>\n<th>Proguard 混淆器</th>\n<th>DEXPREOPT 预先编译优化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>user</code></td>\n<td>release 版本</td>\n<td style=\"text-align:left\">此 build 变体提供有限的安全访问权限，适用于生产环境。</td>\n<td>设定属性 ro.secure=1，打开安全检查功能</td>\n<td>设定属性 ro.debuggable=0，关闭应用调试功能</td>\n<td>设定属性 ro.kernel.android.checkjni=0，关闭 JNI 调用检查</td>\n<td>关闭</td>\n<td>打开</td>\n<td>打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>userdebug</code></td>\n<td>部分 debug 版本</td>\n<td style=\"text-align:left\">此 build 变体可帮助设备开发者了解开发中版本的性能和功耗。使用  <code>userdebug</code>  build 进行开发时，请遵循 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZG9jcy9zZXR1cC9jcmVhdGUvbmV3LWRldmljZT9obD16aC1jbiN1c2VyZGVidWctZ3VpZGVsaW5lcw==\">userdebug 指南</span>。</td>\n<td>设定属性 ro.secure=1，打开安全检查功能</td>\n<td>设定属性 ro.debuggable=1，启用应用调试功能</td>\n<td>设定属性 ro.kernel.android.checkjni=0，关闭 JNI 调用检查</td>\n<td>打开</td>\n<td>打开</td>\n<td>打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eng</td>\n<td>debug 版本</td>\n<td style=\"text-align:left\">此 build 变体的构建时间更短，如果您不在意性能和功耗，它最适合用于日常开发。</td>\n<td>设定属性 ro.secure=0，关闭安全检查功能</td>\n<td>设定属性 ro.debuggable=1，启用应用调试功能</td>\n<td>设定属性 ro.kernel.android.checkjni=1，启用 JNI 调用检查</td>\n<td>打开</td>\n<td>关闭</td>\n<td>关闭</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>所以对于我的 pixel3 来说编译命令如下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lunch aosp_blueline-trunk_staging-user</pre></td></tr></table></figure><p>但是没想到的是竟然报错了？估计是不能以 user 作为目标编译？之后看看 userdebug 会不会被检测到再决定是否继续研究此处的报错</p>\n<p><img data-src=\"/android-platform-compile/image-20240620191331546.png\" alt=\"image-20240620191331546\" style=\"aspect-ratio:973 / 246;\"></p>\n</div></details>\n<p>然后开始编译，给虚拟机分配 12 核的话第一次大概需要两个小时左右可以编译完成，后面再次编译的速度就很快了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j8</span></pre></td></tr></table></figure><p>编译完成后会生成一个 <code>vbmeta.img</code>  文件，到时候我们要刷入的也是这一个文件</p>\n<p><img data-src=\"/android-platform-compile/image-20240620215327602.png\" alt=\"image-20240620215327602\" style=\"aspect-ratio:1982 / 590;\"></p>\n<h1 id=\"编译后的镜像刷入手机\"><a class=\"anchor\" href=\"#编译后的镜像刷入手机\">#</a> 编译后的镜像刷入手机</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//TODO 6.24 号周一的时候刷进去试试看功能是不是正常！</span></pre></td></tr></table></figure><h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZG9jcy9zZXR1cC9idWlsZC9idWlsZGluZz9obD16aC1jbg==\">构建 Android</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl4dWVqaWFuL3AvMTY3MjA1NjEuaHRtbA==\">Android 编译选项 eng、user、userdebug 的区别</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/android-bcc/",
            "url": "https://oacia.dev/android-bcc/",
            "title": "EBPF android bcc初体验",
            "date_published": "2024-05-07T07:31:28.000Z",
            "content_html": "<p>pixel6 到手的第一件事，当然是去玩玩看 ebpf 了～ebpf 的无痕 hook 听上去就感觉相当的强大，去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYnBmLmlvL2FwcGxpY2F0aW9ucy8=\">官网</span>看了一下 ebpf 知名度排名前几的项目，那非<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lvdmlzb3IvYmNj\"> bcc</span> 莫属了，用 python 就可以运行 ebpf 代码，虽然 ebpf 的核心代码还是 C 写的，但是用 python 去执行就感觉十分的舒适</p>\n<p>在网上也找到了三篇非常详细的 Android bcc 编译教程，前人种树，后人乘凉 <code>^.^</code>  可以试试看 ebpf 究竟是什么样子的啦</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNlZWZsb3dlci5kZXYvYXJjaGl2ZXMvMTQwLw==\">eBPF on Android 之 bcc 环境准备 ——eadb 原版</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjc1MTc2Lmh0bQ==\">[原创] 60 秒学会用 eBPF-BCC hook 系统调用 ( 2 ) hook 安卓所有 syscall</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNlZWZsb3dlci5kZXYvYXJjaGl2ZXMvMTExLyM=\">eBPF on Android 之 bcc 编译与体验</span></li>\n</ul>\n<h1 id=\"bcc环境搭建\"><a class=\"anchor\" href=\"#bcc环境搭建\">#</a> bcc 环境搭建</h1>\n<p>接下来进行 bcc 的环境搭建，我们将使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RpYW5uL2VhZGI=\"> eadb</span> 在手机中配置 Debian 系统，并通过 ssh 让 Windows 上的 vscode 可以连接手机中的 Debian</p>\n<p>想要使用 bcc 的全部功能，首先检查 linux 内核版本，我的内核版本为 <code>5.10</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><p>然后检查 BPF 的配置是否开启</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oriole:/ <span class=\"token comment\"># zcat /proc/config.gz | grep PROBE</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_GENERIC_IRQ_PROBE</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_ARCH_SUPPORTS_UPROBES</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_KPROBES</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_UPROBES</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_KRETPROBES</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_HAVE_KPROBES</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_HAVE_KRETPROBES</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># CONFIG_TEST_ASYNC_DRIVER_PROBE is not set</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_GENERIC_CPU_AUTOPROBE</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_TIMER_PROBE</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_KPROBE_EVENTS</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_UPROBE_EVENTS</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">CONFIG_PROBE_EVENTS</span><span class=\"token operator\">=</span>y</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># CONFIG_BPF_KPROBE_OVERRIDE is not set</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># CONFIG_KPROBE_EVENT_GEN_TEST is not set</span></pre></td></tr></table></figure><p>随后使用 magisk root 手机，然后安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuY29tL2Q0cmNtNHJjL01hZ2lza1NTSF9yZWxlYXNlcw==\"> MagiskSSH</span></p>\n<p>ubuntu 中在 root 权限下安装 adb 和 fastboot</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> adb,fastboot</pre></td></tr></table></figure><p>随后在 ubuntu 中输入下列命令生成 rsa 密钥，一路回车</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"your_email@example.com\"</span></pre></td></tr></table></figure><p>将公钥推送到手机中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb push ~/.ssh/id_rsa.pub /data/local/tmp</pre></td></tr></table></figure><p>将公钥追加写入 MagiskSSH 的配置文件中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /data/local/tmp/id_rsa.pub <span class=\"token operator\">>></span> /data/ssh/shell/.ssh/authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /data/ssh/shell/.ssh/authorized_keys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span> /data/local/tmp/id_rsa.pub <span class=\"token operator\">>></span> /data/ssh/root/.ssh/authorized_keys</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /data/ssh/root/.ssh/authorized_keys</pre></td></tr></table></figure><p>使用 MT 管理器编辑 <code>/data/ssh/sshd_config</code> , 把下面的内容粘贴到文件开头并保存即可</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Port <span class=\"token number\">22225</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PasswordAuthentication yes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PermitEmptyPasswords yes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PermitUserEnvironment yes</pre></td></tr></table></figure><p><img data-src=\"/android-bcc/image-20240507160213733.png\" alt=\"image-20240507160213733\" style=\"aspect-ratio:432 / 381;\"></p>\n<p>重启 sshd 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/data/adb/modules/ssh/opensshd.init stop</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/data/adb/modules/ssh/opensshd.init start</pre></td></tr></table></figure><p>随后在 ubuntu 中下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RpYW5uL2VhZGIvcmVsZWFzZXM=\"> eadb 和 debianfs</span></p>\n<p><img data-src=\"/android-bcc/image-20240507154231052.png\" alt=\"image-20240507154231052\" style=\"aspect-ratio:470 / 463;\"></p>\n<p>在手机的 WLAN 网络详情里找到手机热点的 IP 地址</p>\n<p>配置 debian 环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./eadb <span class=\"token parameter variable\">--ssh</span> root@192.168.50.191 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">22225</span> prepare <span class=\"token parameter variable\">-a</span> debianfs-arm64-full.tar.gz</pre></td></tr></table></figure><p>然后运行下面的命令就可以连接上了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./eadb <span class=\"token parameter variable\">--ssh</span> root@192.168.50.191 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">22225</span> shell</pre></td></tr></table></figure><p>为 Debian 配置 ssh</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">ssh</span></pre></td></tr></table></figure><p>打开 <code>/etc/ssh/sshd_config</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/ssh/sshd_config</pre></td></tr></table></figure><p>并按下 <code>ctrl+shift+v</code>  粘贴下列的内容</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>AuthorizedKeysFile <span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Port <span class=\"token number\">11111</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PubkeyAuthentication yes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PermitRootLogin yes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PasswordAuthentication yes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GSSAPIAuthentication  no  # 加速SSH</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>UseDNS no   # 加速SSH</pre></td></tr></table></figure><p>在虚拟机 ubuntu 中查看生成的公钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</pre></td></tr></table></figure><p>在手机 Debian 中手动粘贴导入公钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> id_rsa.pub</pre></td></tr></table></figure><p>在手机 Debian 中增加公钥并配置权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> id_rsa.pub <span class=\"token operator\">>></span> ~/.ssh/authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> ~/.ssh/authorized_keys<span class=\"token punctuation\">;</span><span class=\"token function\">chmod</span> <span class=\"token number\">700</span> ~/.ssh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">ssh</span> restart          <span class=\"token comment\"># 手机每次重启后，第一次进入 debian, 可能都需要手动启动下 ssh 服务</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>如果没有 <code>~/.ssh/authorized_keys</code>  文件，新建一个就行了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> ~/.ssh<span class=\"token punctuation\">;</span><span class=\"token function\">touch</span> ~/.ssh/authorized_keys</pre></td></tr></table></figure></div>\n<p>修改 Debian 的 root 密码</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> root</pre></td></tr></table></figure><p>在 ubuntu 中查看私钥，然后复制到 Windows 的一个文件 <code>id_rsa</code>  中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ~/.ssh/id_rsa</pre></td></tr></table></figure><p>然后打开 <code>C:\\Users\\admin\\.ssh\\config</code> , 配置 ssh, 并在 vscode 中安装 ssh 插件</p>\n<p><img data-src=\"/android-bcc/image-20240509205100257.png\" alt=\"image-20240509205100257\" style=\"aspect-ratio:712 / 178;\"></p>\n<p>之后关闭虚拟机让手机的 USB 连上 Windows, 在 vscode 中就可以连上啦</p>\n<div class=\"note info\">\n<p>vscode 第一次连接 Debian, 会在 Debian 中安装 vscode 服务器，如果不开代理的话速度会相当相当的慢，要想给 Debian 挂代理的话，只要在手机中把 Clash 开起来就可以啦</p>\n</div>\n<h1 id=\"bcc编译运行\"><a class=\"anchor\" href=\"#bcc编译运行\">#</a> bcc 编译运行</h1>\n<p>环境搭建好了之后，就可以编译 bcc 了</p>\n<p>先把 bcc 下过来</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/iovisor/bcc.git</pre></td></tr></table></figure><p>编译 bcc</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> bcc/build<span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">cd</span> bcc/build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>我在编译的过程中遇到了如下的报错</p>\n<p><img data-src=\"/android-bcc/image-20240512122600431.png\" alt=\"image-20240512122600431\" style=\"aspect-ratio:1482 / 265;\"></p>\n<p>先装个 pip</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://bootstrap.pypa.io/get-pip.py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python get-pip.py</pre></td></tr></table></figure><p>然后再安装 setuptools</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://files.pythonhosted.org/packages/af/e7/02db816dc88c598281bacebbb7ccf2c9f1a6164942e88f1a0fded8643659/setuptools-45.0.0-py2.py3-none-any.whl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip <span class=\"token function\">install</span> setuptools-45.0.0-py2.py3-none-any.whl</pre></td></tr></table></figure><p>后来又报错 zip 没安装</p>\n<p><img data-src=\"/android-bcc/image-20240512124227438.png\" alt=\"image-20240512124227438\" style=\"aspect-ratio:1179 / 150;\"></p>\n<p>装一个 zip</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">zip</span></pre></td></tr></table></figure><p>重新 <code>make</code>  之后编译成功～</p>\n<p>然后把 bcc 安装一下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>随后再编译一下 python 的 bcc</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake <span class=\"token parameter variable\">-DPYTHON_CMD</span><span class=\"token operator\">=</span>python3 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pushd</span> src/python/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">popd</span></pre></td></tr></table></figure><p>试试看官方的例子</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 bcc/examples/hello_world.py</pre></td></tr></table></figure><p>结果竟然没输出？</p>\n<p>哈哈，原来是 tracing 的开关没开，开一下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> /sys/kernel/tracing/tracing_on</pre></td></tr></table></figure><p><strong>Hello, World!</strong></p>\n<p><img data-src=\"/android-bcc/image-20240512135018318.png\" alt=\"image-20240512135018318\" style=\"aspect-ratio:1030 / 192;\"></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNlZWZsb3dlci5kZXYvYXJjaGl2ZXMvMTQwLw==\">eBPF on Android 之 bcc 环境准备 ——eadb 原版</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjc1MTc2Lmh0bQ==\">[原创] 60 秒学会用 eBPF-BCC hook 系统调用 ( 2 ) hook 安卓所有 syscall</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNlZWZsb3dlci5kZXYvYXJjaGl2ZXMvMTExLyM=\">eBPF on Android 之 bcc 编译与体验</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/d3ctf-2024/",
            "url": "https://oacia.dev/d3ctf-2024/",
            "title": "d3ctf2024 reverse wp",
            "date_published": "2024-04-28T16:12:07.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>已经是四月底了，但是却突然发现这一整个月都没有在博客写些什么，感觉又是在不明所以中度过了，想看的 <code>magisk</code> , <code>frida</code>  源码没有看完，想做的小夏的 live2d 也迟迟没有动工，下个月努努力，多学点，多做点，加油加油</p>\n<p>总觉得自己还是要写下点什么才好，恰好这周听闻有个 d3ctf, 于是便想来看看逆向题，去学习一下新知识开拓视野，同时也为了度过一段充实的周末时光</p>\n<p>回想去年的 d3ctf, 感觉那时的自己有太多不了解的地方了，于是乎情理之中的也是一题都没做出来了，复现的题目的计划在我的 todolist 里面躺了很长一段时间，然而不知不觉间变成了 undo, 最后到现在的 forget do,never do</p>\n<p>同时我也想来看看一下这一年的自己有了什么变化，感觉现在可以称自己是一位入门逆向工程师了吧哈哈哈，总共五道逆向题做好了三题，可惜周日因为要调休的缘故 (谁发明的调休？！) 便没有再继续看题了，题目挺不错的，不过要是可以有安卓题的话我应该会有百分之三百的精气神去做吧 <code>^.^</code></p>\n<p>翻了翻自己过去写的 ctf 文章，那也仅仅是 wp 出个 flag 而已，但是 flag 不是题目的终点，二进制文件中蕴藏的技巧，手法才是真正值得总结一篇文章的地方，我可不希望自己写的文章在未来连我自己都不愿重新翻看 <code>(●ˇ∀ˇ●)</code></p>\n<p>题目附件点<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vYWNpYS5naXRodWIuaW8vZDNjdGYtMjAyNC9kM2N0ZjIwMjQuemlw\">这里</span>下载～</p>\n<h1 id=\"forest\"><a class=\"anchor\" href=\"#forest\">#</a> forest</h1>\n<p>很好的一道题，将 MSVC 的 SEH 异常处理使用的十分巧妙，同时点和图的思想也在这题有了充分的体现，在做这题的时候有一个失败的解法，不过我感觉很有意思所以也在这里记录下来啦</p>\n<p>这里你会看到地址都是 61 开头，那时因为用 od 的时候里面的基址就是 <code>0x610000</code> , 所以当时为了和 ida 中对应起来我也改成了 61 开头，不过最后 od 还是没有排上用场全靠 ida 动态调试啦</p>\n<p>这里通过主动设置 <code>int 3</code>  断点触发 <code>0x80000003</code>  断点异常进入 sub_611A00</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427182852533-1714325058585-5.png\" alt=\"image-20240427182852533\" style=\"aspect-ratio:1321 / 382;\"></p>\n<p>在 sub_611A00 中，对异常码进行判断，这里可以重定义 this 参数类型为 <code>_EXCEPTION_POINTERS</code> , 这样看起来更方便些，感觉是一个小小的突破口哦</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427182955955.png\" alt=\"image-20240427182955955\" style=\"aspect-ratio:1485 / 448;\"></p>\n<p>首次触发断点异常，解密由 <code>VirtualProtect</code>  分配的内存地址的值，并设置 <code>byte_616028</code>  标志为 0, 下一次触发断点异常将视为 flag 错误，进程退出</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427183012954.png\" alt=\"image-20240427183012954\" style=\"aspect-ratio:945 / 839;\"></p>\n<p>解密完成后设置 EIP, 并通过 <code>this-&gt;ContextRecord-&gt;EFlags |= 0x100</code>  设置单步调试模式，使标志寄存器第 8 位 TF 为 1</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427183214681.png\" alt=\"image-20240427183214681\" style=\"aspect-ratio:768 / 274;\"></p>\n<p>随后程序会通过调用 <code>cli</code>  特权指令实现 shellcode 的跳转</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427184042129.png\" alt=\"image-20240427184042129\" style=\"aspect-ratio:1260 / 371;\"></p>\n<p><img data-src=\"/d3ctf-2024/image-20240427184106659.png\" alt=\"image-20240427184106659\" style=\"aspect-ratio:1005 / 382;\"></p>\n<p><code>int 2Dh</code>  表示 flag 错误<img data-src=\"/d3ctf-2024/image-20240427184528371.png\" alt=\"image-20240427184528371\" style=\"aspect-ratio:1245 / 193;\"></p>\n<h2 id=\"失败-frida-侧信道\"><a class=\"anchor\" href=\"#失败-frida-侧信道\">#</a> [失败] frida 侧信道</h2>\n<p>说的高大上一点叫侧信道，实际上就是爆破哈哈哈，我调试的时候发现每一次输入的 flag 不一样，调用 <code>cli</code>  特权指令触发 <code>0xC0000096</code>  的次数也不一样，所以我就在想，要是我可以一位一位的爆破，通过在处理 <code>0xC0000096</code>  异常的地方下断点统计调用次数，然后然调用最多的那个字符作为这一位的 flag, 那不就得到最后的 flag 了嘛～</p>\n<p>所以这回用上了我的老伙计 frida, 想要通过 frida 实现爆破，那么需要使用 frida 的 python 脚本，同时输入也不能再是 <code>console.log</code> , 而是需要使用 <code>send</code>  将结果返回到 python 中去做处理</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">my_hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span>exe_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1BDE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>eax<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000096</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    count<span class=\"token operator\">=</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token comment\">//console.log(this.context.eax)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token comment\">//console.log(ptr(module.base.add(0xAD20).readS32()).readS32().toString(16))</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token comment\">//console.log(ptr(module.base.add(0xAD24).readS32()).readS32().toString(16))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// d3ctf&#123;01234567890123456&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>my_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个 python 的代码虽然很简单但是也巧妙，嘻嘻</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> frida</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#d3ctf&#123;0ut00431101002001&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">global</span> max_count<span class=\"token punctuation\">,</span>max_ch<span class=\"token punctuation\">,</span>current_ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'send'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> max_count<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            max_count <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            max_ch <span class=\"token operator\">=</span> current_ch</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>max_count<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            max_count <span class=\"token operator\">=</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            max_ch <span class=\"token operator\">=</span> current_ch</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">'payload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>max_count<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"NOTE! </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>max_ch<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>current_ch<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> have the same max_count </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>max_count<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">elif</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">\"stack\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">[</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"line:\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">\"lineNumber\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"colum:\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">[</span><span class=\"token string\">\"columnNumber\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>jscode <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"trace_forest.js\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>t_flag <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d3ctf&#123;01234567890123456&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    max_count<span class=\"token punctuation\">,</span> max_ch <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    break_flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span>printable<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        current_ch <span class=\"token operator\">=</span> c</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        t_flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        process <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token string\">\"forest.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                   stdin<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                   stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                   stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                   universal_newlines<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        session <span class=\"token operator\">=</span> frida<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span><span class=\"token string\">\"forest.exe\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        script <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>create_script<span class=\"token punctuation\">(</span>jscode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        script<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> on_message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        script<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>t_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        output<span class=\"token punctuation\">,</span> error <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        process<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    t_flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max_ch</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>t_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, max: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>max_count<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是可惜的是程序跑完出来了这个 <code>d3ctf&#123;0ut00431101002001&#125;</code> , 虽然是错的但是回显不一样了 <code>^.^</code></p>\n<p>这何尝不是一种胜利～不过换个方法咯</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429013314486.png\" alt=\"image-20240429013314486\" style=\"aspect-ratio:1023 / 281;\"></p>\n<h2 id=\"成功-图-点-路径\"><a class=\"anchor\" href=\"#成功-图-点-路径\">#</a> [成功] 图 点 路径</h2>\n<p>如果想要产生正确的回显，必须触发 <code>0xC0000005</code>  异常</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427210553263.png\" alt=\"image-20240427210553263\" style=\"aspect-ratio:1474 / 275;\"></p>\n<p>输入的字符串将会被全部转换为二进制的形式，每执行 <code>cli</code>  特权指令触发 <code>0xC0000096</code>  异常后都会读取一位</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427211258536.png\" alt=\"image-20240427211258536\" style=\"aspect-ratio:935 / 180;\"></p>\n<p>如果为 0, 则下一次触发 <code>0x80000004</code>  单步调试异常且当前指令的偏移逻辑 <code>&amp;0x3F</code>  等于 7 时，将会让当前的 Eip 加上 23</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427211317024.png\" alt=\"image-20240427211317024\" style=\"aspect-ratio:1109 / 241;\"></p>\n<p>进入下一个块的位置由 unk_EAA720 和 unk_EA8658 进行控制，算法为 <code>(unk_EAA720+unk_EA8658+(unk_EA8658&lt;&lt;4))&lt;&lt;6</code></p>\n<p><img data-src=\"/d3ctf-2024/image-20240427211804141.png\" alt=\"image-20240427211804141\" style=\"aspect-ratio:560 / 172;\"></p>\n<p>观察后发现这明显就是一个图呀，所以可以用 idapython 找到图的所有边</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># d3ctf&#123;0ut00431101002001&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> idautils</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>base <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pattern <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B8 FF FF FF FF C7 00 ?? 00 00 00 B8 FF FF FF FF C7 00 ?? 00 00 00 FA\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># point list</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cur_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    end_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x483D</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> cur_addr <span class=\"token operator\">&lt;</span> end_addr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cur_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>find_binary<span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">,</span> idc<span class=\"token punctuation\">.</span>SEARCH_DOWN<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> cur_addr <span class=\"token operator\">==</span> idc<span class=\"token punctuation\">.</span>BADADDR<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            a <span class=\"token operator\">=</span> ida_bytes<span class=\"token punctuation\">.</span>get_byte<span class=\"token punctuation\">(</span>cur_addr <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            b <span class=\"token operator\">=</span> ida_bytes<span class=\"token punctuation\">.</span>get_byte<span class=\"token punctuation\">(</span>cur_addr <span class=\"token operator\">+</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            pl<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">:</span> cur_addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cur_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>pattern <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"8B 00\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cur_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    end_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x483D</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span> cur_addr <span class=\"token operator\">&lt;</span> end_addr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        cur_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>find_binary<span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">,</span> idc<span class=\"token punctuation\">.</span>SEARCH_DOWN<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> cur_addr <span class=\"token operator\">==</span> idc<span class=\"token punctuation\">.</span>BADADDR<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># if cur_addr-(base+5) &amp;0x3F==7,eax->1, eip+23</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            pl<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">:</span> cur_addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">:</span> cur_addr <span class=\"token operator\">+</span> <span class=\"token number\">23</span> <span class=\"token operator\">-</span> base<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        cur_addr <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>next_head<span class=\"token punctuation\">(</span>cur_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后打印一下没有对应端点的点，这里只是部分，实际上还有很多…</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427232406322.png\" alt=\"image-20240427232406322\" style=\"aspect-ratio:600 / 286;\"></p>\n<p>之后一个一个试过去，就有 flag 了 (为什么不用 for 循环尝试所有可能的点，因为用 for 循环 <code>all_simple_paths</code>  不出结果呜)</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>base <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token comment\"># ida python 的结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> networkx <span class=\"token keyword\">as</span> nx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>G <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">.</span>DiGraph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pl<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    G<span class=\"token punctuation\">.</span>add_node<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>out_way <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pl<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> p<span class=\"token punctuation\">[</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> G<span class=\"token punctuation\">.</span>has_node<span class=\"token punctuation\">(</span>base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            G<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">0x616035</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x483D</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"find a way out: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'cur'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> --> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                G<span class=\"token punctuation\">.</span>add_node<span class=\"token punctuation\">(</span>base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                G<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span>base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                out_way<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>base<span class=\"token operator\">+</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"no taget point: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">'cur'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> --> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                out_way<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> G<span class=\"token punctuation\">.</span>has_node<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            G<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> G<span class=\"token punctuation\">.</span>has_node<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            G<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERRR\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>start <span class=\"token operator\">=</span> <span class=\"token number\">0x616035</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>tem <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>out <span class=\"token operator\">=</span> <span class=\"token number\">0x616c0e</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> nx<span class=\"token punctuation\">.</span>all_simple_paths<span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> source<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    tem<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">#print(tem)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">#print(len(tem[0]))</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    pll <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> tem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pl<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>t<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token comment\">#print(p[\"cur\"],p[\"s\"])</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                pll<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    flag<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">if</span> p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> pll<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">if</span> pll<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>pll<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"cur\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    flag<span class=\"token operator\">+=</span><span class=\"token string\">\"0\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    flag<span class=\"token operator\">+=</span><span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"ezjunk\"><a class=\"anchor\" href=\"#ezjunk\">#</a> ezjunk</h1>\n<p>从整个程序的入口 <code>start</code>  函数开始分析，在执行 main 函数前，还会调用 <code>sub_401CC0</code>  函数</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429004720898.png\" alt=\"image-20240429004720898\" style=\"aspect-ratio:869 / 231;\"></p>\n<p>在这个函数中，会对 <code>sub_401550</code>  进行调用</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429004856409.png\" alt=\"image-20240429004856409\" style=\"aspect-ratio:700 / 168;\"></p>\n<p>但是却没法直接反编译，既然是栈的问题，把 <code>sub rsp, 30h</code>  nop 掉就好啦</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429005457581.png\" alt=\"image-20240429005457581\" style=\"aspect-ratio:863 / 399;\"></p>\n<p>有个反调试，过一下就好了</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427151306234.png\" alt=\"image-20240427151306234\" style=\"aspect-ratio:621 / 582;\"></p>\n<p><img data-src=\"/d3ctf-2024/image-20240429005548792.png\" alt=\"image-20240429005548792\" style=\"aspect-ratio:590 / 577;\"></p>\n<p>main 函数的花指令也很简单，去一下就看到逻辑啦</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429010852125.png\" alt=\"image-20240429010852125\" style=\"aspect-ratio:1106 / 577;\"></p>\n<p>进到 <code>sub_401917</code>  里面，只是一个 tea 算法</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429010317189.png\" alt=\"image-20240429010317189\" style=\"aspect-ratio:1234 / 418;\"></p>\n<p>之后就是一个类似 crc 的算法</p>\n<p><img data-src=\"/d3ctf-2024/image-20240429010928318.png\" alt=\"image-20240429010928318\" style=\"aspect-ratio:848 / 653;\"></p>\n<p>不过在调试的时候还是不能直接把花指令 nop 掉的，因为这里读取的是 <code>loc401A1C</code>  花指令的汇编，如果 nop 掉变成 90 的话，tea 的常数值会出错的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    v0<span class=\"token punctuation\">,</span> v1 <span class=\"token operator\">=</span> c_uint32<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    delta <span class=\"token operator\">=</span> <span class=\"token number\">0xff58f981</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    total <span class=\"token operator\">=</span> c_uint32<span class=\"token punctuation\">(</span><span class=\"token number\">0xE8017300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        v0<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x44</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v0<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x33</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> delta</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> v0<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    v0<span class=\"token punctuation\">,</span> v1 <span class=\"token operator\">=</span> c_uint32<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    delta <span class=\"token operator\">=</span> <span class=\"token number\">0xff58f981</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    total <span class=\"token operator\">=</span> c_uint32<span class=\"token punctuation\">(</span><span class=\"token number\">0xE8017300</span> <span class=\"token operator\">-</span> <span class=\"token number\">32</span> <span class=\"token operator\">*</span> delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> delta</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        v1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v0<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x33</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        v0<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x44</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> v0<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># test</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\"># 待加密的明文，两个 32 位整型，即 64bit 的明文数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># fakeflag&#123;Is_there_anywhere_else&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># value = [0x5406CBB1, 0xA4A41EA2, 0x34489AC5, 0x53D68797, 0xB8E0C06F, 0x0259F2DB, 0x52E38D82, 0x595D5E1D]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0xB6DDB3A9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x36162C23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1889FABF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6CE4E73B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0A5AF8FC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x21FF8415</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x44859557</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2DC227B7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c_uint<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c_uint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">^</span> <span class=\"token number\">0x84A6972F</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#2086826726</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c_uint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">#for v in value:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">#print(hex(v))</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># value = []</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># 四个 key，每个是 32bit，即密钥长度为 128bit</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x00005454</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00004602</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00004477</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00005E5E</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        res <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"randomvm\"><a class=\"anchor\" href=\"#randomvm\">#</a> RandomVM</h1>\n<p>VM 题型，不过算是比较方便的那种真正用到的指令不是很多，ida trace 在关键函数 trace 一下，不过有个 ptrace 反调试注意一下就好啦</p>\n<p>syscall (0x65) ptrace 反调试，跳过这条指令就好了</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427014538097.png\" alt=\"image-20240427014538097\" style=\"aspect-ratio:827 / 163;\"></p>\n<p>比较重要的有这些函数</p>\n<p><img data-src=\"/d3ctf-2024/image-20240427032349722.png\" alt=\"image-20240427032349722\" style=\"aspect-ratio:348 / 457;\"></p>\n<p>idapython trace 一下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#xor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> idaapi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ea <span class=\"token operator\">=</span> ida_bytes<span class=\"token punctuation\">.</span>get_byte<span class=\"token punctuation\">(</span>idaapi<span class=\"token punctuation\">.</span>get_imagebase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0xB072</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ecx<span class=\"token operator\">=</span>idc<span class=\"token punctuation\">.</span>get_reg_value<span class=\"token punctuation\">(</span><span class=\"token string\">\"ECX\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>eax<span class=\"token operator\">=</span>idc<span class=\"token punctuation\">.</span>get_reg_value<span class=\"token punctuation\">(</span><span class=\"token string\">\"EAX\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"final[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ea<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">] = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ecx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">^</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>eax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ecx<span class=\"token operator\">^</span>eax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#mov</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> idaapi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ea <span class=\"token operator\">=</span> ida_bytes<span class=\"token punctuation\">.</span>get_byte<span class=\"token punctuation\">(</span>idaapi<span class=\"token punctuation\">.</span>get_imagebase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0xB072</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>eax<span class=\"token operator\">=</span>idc<span class=\"token punctuation\">.</span>get_reg_value<span class=\"token punctuation\">(</span><span class=\"token string\">\"EAX\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"final[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ea<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">] = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>eax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#circleRmov</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> idc</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">import</span> ida_bytes</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> idaapi</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">import</span> ctypes</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ea <span class=\"token operator\">=</span> ida_bytes<span class=\"token punctuation\">.</span>get_byte<span class=\"token punctuation\">(</span>idaapi<span class=\"token punctuation\">.</span>get_imagebase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">0xB072</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>edx<span class=\"token operator\">=</span>idc<span class=\"token punctuation\">.</span>get_reg_value<span class=\"token punctuation\">(</span><span class=\"token string\">\"EDX\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ecx<span class=\"token operator\">=</span>idc<span class=\"token punctuation\">.</span>get_reg_value<span class=\"token punctuation\">(</span><span class=\"token string\">\"ECX\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>res <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">(</span>edx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">if</span> ecx<span class=\"token operator\">!=</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    res <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>value<span class=\"token operator\">>></span>ecx<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>value<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token operator\">-</span>ecx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    res <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"final[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ea<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">] = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>edx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">>></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>ecx<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> | </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>edx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">&lt;&lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token operator\">-</span>ecx<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输入 <code>0123456789ab</code>  得到输出</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token operator\">^</span><span class=\"token number\">0x30</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x30</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x30</span><span class=\"token operator\">>></span><span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x30</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6</span><span class=\"token operator\">^</span><span class=\"token number\">0x3</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x5</span><span class=\"token operator\">^</span><span class=\"token number\">0x31</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x34</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x31</span><span class=\"token operator\">>></span><span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x31</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x89</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x89</span><span class=\"token operator\">^</span><span class=\"token number\">0x32</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xbb</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x32</span><span class=\"token operator\">>></span><span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x32</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc8</span><span class=\"token operator\">^</span><span class=\"token number\">0x33</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xfb</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x33</span><span class=\"token operator\">>></span><span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x33</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x66</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x66</span><span class=\"token operator\">^</span><span class=\"token number\">0x7</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x61</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x61</span><span class=\"token operator\">^</span><span class=\"token number\">0x34</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x55</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x34</span><span class=\"token operator\">>></span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x34</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x43</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x43</span><span class=\"token operator\">^</span><span class=\"token number\">0x4</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x47</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x47</span><span class=\"token operator\">^</span><span class=\"token number\">0x35</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x72</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x35</span><span class=\"token operator\">>></span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x35</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x53</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x53</span><span class=\"token operator\">^</span><span class=\"token number\">0x36</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x65</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x7</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x36</span><span class=\"token operator\">>></span><span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x36</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6c</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6c</span><span class=\"token operator\">^</span><span class=\"token number\">0x7</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6b</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6b</span><span class=\"token operator\">^</span><span class=\"token number\">0x37</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x5c</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x8</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x37</span><span class=\"token operator\">>></span><span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x37</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6e</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6e</span><span class=\"token operator\">^</span><span class=\"token number\">0x38</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x56</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x9</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x38</span><span class=\"token operator\">>></span><span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x38</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xe</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xe</span><span class=\"token operator\">^</span><span class=\"token number\">0x39</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x37</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xa</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x39</span><span class=\"token operator\">>></span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x39</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x93</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x93</span><span class=\"token operator\">^</span><span class=\"token number\">0x61</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xb</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x61</span><span class=\"token operator\">>></span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x61</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x16</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x16</span><span class=\"token operator\">^</span><span class=\"token number\">0x62</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x74</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x62</span><span class=\"token operator\">>></span><span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x62</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc4</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc4</span><span class=\"token operator\">^</span><span class=\"token number\">0x7</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc3</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xbb</span><span class=\"token operator\">^</span><span class=\"token number\">0x34</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x8f</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xfb</span><span class=\"token operator\">^</span><span class=\"token number\">0x8f</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x74</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x55</span><span class=\"token operator\">^</span><span class=\"token number\">0x74</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x21</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x72</span><span class=\"token operator\">^</span><span class=\"token number\">0x21</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x53</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x65</span><span class=\"token operator\">^</span><span class=\"token number\">0x53</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x36</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x5c</span><span class=\"token operator\">^</span><span class=\"token number\">0x36</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6a</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x56</span><span class=\"token operator\">^</span><span class=\"token number\">0x6a</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x3c</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x37</span><span class=\"token operator\">^</span><span class=\"token number\">0x3c</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xb</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf2</span><span class=\"token operator\">^</span><span class=\"token number\">0xb</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf9</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x74</span><span class=\"token operator\">^</span><span class=\"token number\">0xf9</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x8d</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>final<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc3</span><span class=\"token operator\">^</span><span class=\"token number\">0x8d</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x4e</span></pre></td></tr></table></figure><p>exp 如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ctypes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">circleR_rev</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    res <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    res <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x9D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xED</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x19</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>circle_R <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xor <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> flag<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> circleR_rev<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>key<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>xor<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>circle_R<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> circleR_rev<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>key<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>xor<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>circle_R<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> i<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> circleR_rev<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>xor<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span>flag<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> circle_R<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://oacia.dev/python-memory-leak/",
            "url": "https://oacia.dev/python-memory-leak/",
            "title": "记一次python ctypes.cast引起的内存泄漏",
            "date_published": "2024-03-02T07:00:00.000Z",
            "content_html": "<div class=\"note info\">\n<p><strong>内存泄漏</strong>（英语：memory leak）是<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUFFJUExJUU3JUFFJTk3JUU2JTlDJUJBJUU3JUE3JTkxJUU1JUFEJUE2\">计算机科学</span>中的一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI1JTg0JUU2JUJBJTkwJUU2JUIzJTg0JUU2JUJDJThG\">资源泄漏</span>，主因是<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUE4JTg4JUU3JUFFJTk3JUU2JUE5JTlGJUU3JUE4JThCJUU1JUJBJThG\">计算机程序</span>的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUE4JTk4JUU2JTg2JUI2JUU5JUFCJTk0JUU3JUFFJUExJUU3JTkwJTg2\">内存管理</span>失当 [<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JTg1JUU1JUFEJTk4JUU2JUIzJTg0JUU2JUJDJThGI2NpdGVfbm90ZS0x\">1]</span>，因而失去对一段已分配内存空间的控制，程序继续占用已不再使用的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JTg1JUU1JUFEJTk4\">内存</span>空间，或是存储器所存储之对象无法透过执行代码而访问，令内存资源空耗 [<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JTg1JUU1JUFEJTk4JUU2JUIzJTg0JUU2JUJDJThGI2NpdGVfbm90ZS0y\">2]</span>。</p>\n</div>\n<p>相信每一个敲过代码的朋友肯定都遇到过内存泄漏，对于 c 语言这种分配了内存却不会自己释放的语言来说，内存泄漏算是家常便饭了，但是我最近在写一个 python 代码的时候同样也遇到了内存泄漏，有朋友可能会问，python 这种自带内存回收机制的语言怎么还会内存泄漏呢？</p>\n<p>真相是… 我在 python 中调用了 c 编译出来的动态链接库，然后就内存泄漏了，而且这个泄漏点藏得相当之深，我排查了整整一整天才找到 <code>-_-!</code></p>\n<h1 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h1>\n<p>下面是有内存泄漏的代码的 demo, 这个代码实现的功能很简单，就是在 <code>main.py</code>  中调用 <code>double.dll</code>  的导出函数 <code>double_string</code> , 实现的功能是传入一个字符串，返回的字符串是传入字符串的两倍，然而内存却在不断的增大</p>\n<p><img data-src=\"/python-memory-leak/image-20240302154453894.png\" alt=\"image-20240302154453894\" style=\"aspect-ratio:618 / 35;\"></p>\n<h2 id=\"doublec\"><a class=\"anchor\" href=\"#doublec\">#</a> double.c</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//gcc -fPIC -shared double.c -o double.dll</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">double_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>input<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> double_input <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>double_input<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>double_input<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> double_input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"mainpy\"><a class=\"anchor\" href=\"#mainpy\">#</a> main.py</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># main.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ctypes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dll <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">'./double.dll'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c_double_string <span class=\"token operator\">=</span> dll<span class=\"token punctuation\">.</span>double_string</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>c_double_string<span class=\"token punctuation\">.</span>argtypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ctypes<span class=\"token punctuation\">.</span>POINTER<span class=\"token punctuation\">(</span>ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ctypes<span class=\"token punctuation\">.</span>c_int<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>c_double_string<span class=\"token punctuation\">.</span>restype <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>POINTER<span class=\"token punctuation\">(</span>ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">call_C_func</span><span class=\"token punctuation\">(</span>_data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    data <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>create_string_buffer<span class=\"token punctuation\">(</span>_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    data <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> ctypes<span class=\"token punctuation\">.</span>POINTER<span class=\"token punctuation\">(</span>ctypes<span class=\"token punctuation\">.</span>c_uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ret <span class=\"token operator\">=</span> c_double_string<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    _ret <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>string_at<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> _ret</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    call_C_func<span class=\"token punctuation\">(</span><span class=\"token string\">b\"abcd\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"内存泄漏点一\"><a class=\"anchor\" href=\"#内存泄漏点一\">#</a> 内存泄漏点一</h1>\n<p>这第一个泄漏点很明显，是在 <code>double.c</code>  中，因为在 <code>double_string</code>  中只有一个孤零零的 <code>malloc</code> , 但是却没有 <code>free</code>  陪着他，所以理所应当的就内存泄漏了</p>\n<div class=\"note info\">\n<p>(malloc/realloc/colloc) 和 free 必须两两对应才不会导致内存泄漏，malloc 就是向系统申请一块指定大小的内存，free 则是向系统归还指定地址开始的一块内存</p>\n<p>在 c++ 中， <code>new和delete</code>  或者 <code>new[]和delete[]</code>  也必须两两对应，才不会导致内存泄漏</p>\n</div>\n<p>但是这个 <code>free</code>  应该放在什么地方呢？首先肯定是不能在 <code>double_string</code>  中 free 的，不然好不容易把传进来的字符串处理好正准备作为返回值传回去，你反手一个 free 直接把返回值给 free 没了这怎么行呢</p>\n<p>所以这个 free 的时机只能是在 <code>main.py</code>  中调用完 <code>c_double_string</code>  之后，python 中该怎么执行 <code>free</code>  函数呀</p>\n<p>这该怎么办呢？</p>\n<p>让 c 导出一个释放内存的函数 <code>c_free</code> , 然后在 python 里面再去调用它不就好了</p>\n<p><img data-src=\"/python-memory-leak/image-20240306113800822.png\" alt=\"image-20240306113800822\" style=\"aspect-ratio:1920 / 1079;\"></p>\n<p>但是这样修改了之后，内存依然在不断的增加</p>\n<p><img data-src=\"/python-memory-leak/image-20240302154600511.png\" alt=\"image-20240302154600511\" style=\"aspect-ratio:622 / 34;\"></p>\n<h1 id=\"内存泄漏点二\"><a class=\"anchor\" href=\"#内存泄漏点二\">#</a> 内存泄漏点二</h1>\n<p>内存既然还在泄漏，并且 c 语言里面也没有泄漏点了，那么唯一还有可能的泄漏点就是在 python 中了</p>\n<p>在 python 中调用了三个 <code>ctypes</code>  相关的函数，我们一个一个分析来看看有没有可能存在的内存泄漏</p>\n<p><strong>create_string_buffer</strong></p>\n<p>这个函数的功能是将 <code>bytes</code>  类型转换成 <code>char[]</code>  类型，可以看到， <code>buf</code>  变量的内存是通过 <code>c_char * size</code>  来分配的，由于内存是在 python 中分配，python 会自己把不用的内存回收掉，所以这里不会内存泄漏<img data-src=\"/python-memory-leak/image-20240302155232066.png\" alt=\"image-20240302155232066\" style=\"aspect-ratio:1034 / 634;\"></p>\n<p><strong>string_at</strong></p>\n<p>这个函数的功能是从一个地址读取指定长度的字符串，它仅仅只是读数据所以根本就没有能力去导致内存泄漏</p>\n<p><img data-src=\"/python-memory-leak/image-20240305225058946.png\" alt=\"image-20240305225058946\" style=\"aspect-ratio:1133 / 204;\"></p>\n<p><strong>cast</strong></p>\n<p>嫌疑人 <code>cast</code>  终于出现了，它的功能是将一个数据转换成指定类型的数据</p>\n<blockquote>\n<p>ctypes.<strong>cast</strong>(<em>obj</em>, <em>type</em>)</p>\n<p>此函数类似于 C 的强制转换运算符。 它返回一个 <em>type</em> 的新实例，该实例指向与 <em>obj</em> 相同的内存块。 <em>type</em> 必须为指针类型，而 <em>obj</em> 必须为可以被作为指针来解读的对象。</p>\n</blockquote>\n<p>找找这个函数在 python 中的实现是什么样子的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Python39\\Lib\\ctypes\\__init__.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">PYFUNCTYPE</span><span class=\"token punctuation\">(</span>restype<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>argtypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">CFunctionType</span><span class=\"token punctuation\">(</span>_CFuncPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        _argtypes_ <span class=\"token operator\">=</span> argtypes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        _restype_ <span class=\"token operator\">=</span> restype</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        _flags_ <span class=\"token operator\">=</span> _FUNCFLAG_CDECL <span class=\"token operator\">|</span> _FUNCFLAG_PYTHONAPI</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> CFunctionType</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>_cast <span class=\"token operator\">=</span> PYFUNCTYPE<span class=\"token punctuation\">(</span>py_object<span class=\"token punctuation\">,</span> c_void_p<span class=\"token punctuation\">,</span> py_object<span class=\"token punctuation\">,</span> py_object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_cast_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> _cast<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后我们再去追踪 <code>_cast_addr</code>  的声明，发现 <code>cast</code>  是从 <code>_ctypes.pyd</code>  中导出的函数</p>\n<p><img data-src=\"/python-memory-leak/image-20240306115239843.png\" alt=\"image-20240306115239843\" style=\"aspect-ratio:1038 / 723;\"></p>\n<p>但是 <code>_ctypes.pyd</code>  毕竟是已经编译过的二进制文件，而我们希望看到的是 <code>cast</code>  的源码，而它在 python 的 github 仓库中可以找到，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi9jcHl0aG9uL2Jsb2IvMy45L01vZHVsZXMvX2N0eXBlcy9fY3R5cGVzLmMjTDU2MTM=\">cast 源码</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> PyObject <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span>ctype<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    CDataObject <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 确保被转换的类型是一个指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">cast_check_pointertype</span><span class=\"token punctuation\">(</span>ctype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CDataObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">_PyObject_CallNoArg</span><span class=\"token punctuation\">(</span>ctype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      The casted objects '_objects' member:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      It must certainly contain the source objects one.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      It must contain the source object itself.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CDataObject_Check</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        CDataObject <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CDataObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        CDataObject <span class=\"token operator\">*</span>container<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/* PyCData_GetContainer will initialize src.b_objects, we need</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>           this so it can be shared */</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        container <span class=\"token operator\">=</span> <span class=\"token function\">PyCData_GetContainer</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>container <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/* But we need a dictionary! */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>b_objects <span class=\"token operator\">==</span> Py_None<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">Py_DECREF</span><span class=\"token punctuation\">(</span>Py_None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            obj<span class=\"token operator\">-></span>b_objects <span class=\"token operator\">=</span> <span class=\"token function\">PyDict_New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>b_objects <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">Py_XINCREF</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>b_objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        result<span class=\"token operator\">-></span>b_objects <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>b_objects<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token operator\">-></span>b_objects <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">PyDict_CheckExact</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">-></span>b_objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            PyObject <span class=\"token operator\">*</span>index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">int</span> rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            index <span class=\"token operator\">=</span> <span class=\"token function\">PyLong_FromVoidPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            rc <span class=\"token operator\">=</span> <span class=\"token function\">PyDict_SetItem</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">-></span>b_objects<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">Py_DECREF</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/* Should we assert that result is a pointer type? */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">-></span>b_ptr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PyObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    failed<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">Py_DECREF</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的第 50 行有一个 <code>memcpy</code> , 作用是将 <code>ptr</code>  的地址赋值给 <code>result-&gt;b_ptr</code> , <code>result-&gt;b_ptr</code>  是经过类型转换之后指向转换后内存的指针，而这个变量 <code>ptr</code>  不就是 <code>cast</code>  传递进来的参数！？</p>\n<p><img data-src=\"/python-memory-leak/image-20240306161734881.png\" alt=\"image-20240306161734881\" style=\"aspect-ratio:729 / 151;\"></p>\n<p>我们再来看看 <code>cast</code>  函数在 python 中的声明，这里定义了一个 <code>cast</code> , 返回的是 <code>_cast</code> , 而且我们居然发现参数 <code>obj</code>  竟然同时成为了 <code>c</code>  中 <code>cast</code>  的第一个参数 <code>void *ptr</code>  和第二个参数 <code>PyObject *src</code> , 而且这第一个参数和第二个参数的类型还不一样，分别是 <code>c_void_p</code>  和 <code>py_object</code></p>\n<p><img data-src=\"/python-memory-leak/image-20240306162125031.png\" alt=\"image-20240306162125031\" style=\"aspect-ratio:1183 / 106;\"></p>\n<p><code>obj</code>  明明是我们准备要类型转换的目标数据，怎么它幻化出了另外一个类型 <code>void *ptr</code>  来作为经过 <code>cast</code>  函数类型转换之后的内存指针呢？</p>\n<p>这就不得不说一下 python 中调用外部函数的一个机制了，即<strong>强制类型转换</strong></p>\n<blockquote>\n<p><strong>argtypes</strong></p>\n<p>当调用外部函数时，每个实际参数都会被传给 <a href=\"https://docs.python.org/zh-tw/3/library/ctypes.html#ctypes._FuncPtr.argtypes\"> <code>argtypes</code> </a> 元组中条目的 <a href=\"https://docs.python.org/zh-tw/3/library/ctypes.html#ctypes._CData.from_param\"> <code>from_param()</code> </a> 类方法，<strong>该方法允许将实际参数适配为此外部函数所接受的对象</strong>。 例如，<a href=\"https://docs.python.org/zh-tw/3/library/ctypes.html#ctypes._FuncPtr.argtypes\"> <code>argtypes</code> </a> 元组中的 <a href=\"https://docs.python.org/zh-tw/3/library/ctypes.html#ctypes.c_char_p\"> <code>c_char_p</code> </a> 条目将使用 ctypes 转换规则把作为参数传入的字符串转换为字节串对象。</p>\n</blockquote>\n<p>所以说 <code>obj</code>  本身是 <code>py_object</code> , 但是由于这个机制的存在，被强制转换为了 <code>c_void_p</code> , 我们不妨打印各个参数的地址来印证一下</p>\n<p>这里我们通过 cast 将 <code>py_object</code>  强制转换为了 <code>c_void_p</code> , 可以发现第一个参数的地址和返回值的地址是<strong>一模一样</strong>的</p>\n<p><img data-src=\"/python-memory-leak/image-20240306163659369.png\" alt=\"image-20240306163659369\" style=\"aspect-ratio:1694 / 928;\"></p>\n<p>在调用 cast 将目标数据转换成目标类型前，python 又分配了一块新的内存来存储经过 cast 转换之后的 data, 然而分配了内存之后却没有即时的释放这块内存，造成内存泄漏也不足为奇了</p>\n<p>所以我们现在要做的就是释放掉这一块内存，而这可以使用 <code>ctypes.memset</code>  实现，将这块内存全部都置为 0, 不就相当于把这块内存 free 掉了嘛</p>\n<p><img data-src=\"/python-memory-leak/image-20240306164150381.png\" alt=\"image-20240306164150381\" style=\"aspect-ratio:1114 / 330;\"></p>\n<p>再起一个无限循环，通过任务管理器观察 python 进程的内存占用，终于… 不再内存泄漏了</p>\n<p><img data-src=\"/python-memory-leak/image-20240306164236590.png\" alt=\"image-20240306164236590\" style=\"aspect-ratio:920 / 31;\"></p>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/360-jiagu/",
            "url": "https://oacia.dev/360-jiagu/",
            "title": "360加固dex解密流程分析",
            "date_published": "2024-02-21T19:14:53.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>在去年 9 月的时候，我就想研究一下 apk 的加固，在网上逛了一圈，感觉 360 加固不错，所以先选它啦，写了一个测试 apk 丢到 360 加固里面加固了一下</p>\n<p>这里我用的是 360 加固的免费版 (因为付费版太贵啦)</p>\n<p>本来计划着去年分析完 360 加固的，但是总是抽不出一段完整的时间来所以就拖到了现在，终于最近因为过年赋闲在家，就花了几天分析了一下 360 加固，感觉这几天探索 360 加固的过程真是充满了惊喜和乐趣呢～</p>\n</blockquote>\n<p>2024 年 3 月 8 号记:</p>\n<blockquote>\n<p>距离上次看 360 加固已经半个月啦，今天正想着自己要做什么事情的时候，到博客看了眼 TODOlist, 突然发现咦我是不是还没看过 dex 的解密算法长什么样？所以今天就把这个给做完了，不得不说逆向真的是消磨无聊时间最有效的方法哈哈哈</p>\n</blockquote>\n<p>360 加固测试 apk: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vYWNpYS5naXRodWIuaW8vMzYwLWppYWd1LzM2MGppYWd1LmFwaw==\">下载地址</span></p>\n<p>未加固的原版 apk: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vYWNpYS5naXRodWIuaW8vMzYwLWppYWd1L29yaWdpbmFsLmFwaw==\">下载地址</span></p>\n<h1 id=\"java层初步分析\"><a class=\"anchor\" href=\"#java层初步分析\">#</a> java 层初步分析</h1>\n<p>包名: <code>com.oacia.apk_protect</code></p>\n<p>入口: <code>com.stub.StubApp</code></p>\n<p>我们从 <code>AndroidManifest.xml</code>  中可以得知，360 加固的入口是 <code>com.stub.StubApp</code> , 所以我们就先进到 apk 的入口进行分析</p>\n<p><img data-src=\"/360-jiagu/image-20230930183634640.png\" alt=\"image-20230930183634640\" style=\"aspect-ratio:804 / 196;\"></p>\n<p>在这个入口类中，不仅有常规的 <code>onCreate()</code>  函数，还有一个函数值得注意，他就是 <code>attachBaseContext(Context context)</code></p>\n<p><img data-src=\"/360-jiagu/image-20230930183713453.png\" alt=\"image-20230930183713453\" style=\"aspect-ratio:1557 / 449;\"></p>\n<blockquote>\n<p>Application 的 <code>onCreate</code>  和 <code>attachBaseContext</code>  是 Application 的两个回调方法，通常我们会在其中做一些初始化操作， <code>attachBaseContext</code>  在 <code>onCreate</code> <strong> 之前执行</strong></p>\n</blockquote>\n<p>其中出现的字符串经过了加密混淆操作，加密函数如下，算法是将所有的字符与 <code>16</code>  进行异或</p>\n<p><img data-src=\"/360-jiagu/image-20230930183731411.png\" alt=\"image-20230930183731411\" style=\"aspect-ratio:604 / 274;\"></p>\n<p>我们写个 jeb 脚本把加密字符串解密来方便后续的静态分析</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding=utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>api <span class=\"token keyword\">import</span> IScript<span class=\"token punctuation\">,</span> IconType<span class=\"token punctuation\">,</span> ButtonGroupType</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> RuntimeProjectUtil</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>java <span class=\"token keyword\">import</span> IJavaSourceUnit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>code <span class=\"token keyword\">import</span> ICodeUnit<span class=\"token punctuation\">,</span> ICodeItem</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> ITextDocument</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>java <span class=\"token keyword\">import</span> IJavaSourceUnit<span class=\"token punctuation\">,</span> IJavaStaticField<span class=\"token punctuation\">,</span> IJavaNewArray<span class=\"token punctuation\">,</span> IJavaConstant<span class=\"token punctuation\">,</span> IJavaCall<span class=\"token punctuation\">,</span> IJavaField<span class=\"token punctuation\">,</span> IJavaMethod<span class=\"token punctuation\">,</span> IJavaClass</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>events <span class=\"token keyword\">import</span> JebEvent<span class=\"token punctuation\">,</span> J</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> com<span class=\"token punctuation\">.</span>pnfsoftware<span class=\"token punctuation\">.</span>jeb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>util <span class=\"token keyword\">import</span> DecompilerHelper</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 解密字符串函数的类名以及方法名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>methodName <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Lcom/qihoo/util/a;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">dec_str_360jiagu</span><span class=\"token punctuation\">(</span>IScript<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start deal with strings'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> ctx</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        engctx <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>getEnginesContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> engctx<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Back-end engines not initialized'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        projects <span class=\"token operator\">=</span> engctx<span class=\"token punctuation\">.</span>getProjects<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> projects<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There is no opened project'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        units <span class=\"token operator\">=</span> RuntimeProjectUtil<span class=\"token punctuation\">.</span>findUnitsByType<span class=\"token punctuation\">(</span>projects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IJavaSourceUnit<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> unit <span class=\"token keyword\">in</span> units<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            javaClass <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span>getClassElement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[+] decrypt:'</span> <span class=\"token operator\">+</span> javaClass<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            self<span class=\"token punctuation\">.</span>cstbuilder <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span>getFactories<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getConstantFactory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            self<span class=\"token punctuation\">.</span>processClass<span class=\"token punctuation\">(</span>javaClass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            unit<span class=\"token punctuation\">.</span>notifyListeners<span class=\"token punctuation\">(</span>JebEvent<span class=\"token punctuation\">(</span>J<span class=\"token punctuation\">.</span>UnitChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">processClass</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> javaClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> javaClass<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> methodName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> method <span class=\"token keyword\">in</span> javaClass<span class=\"token punctuation\">.</span>getMethods<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            block <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span>getBody<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> block<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                stm <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                self<span class=\"token punctuation\">.</span>checkElement<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> stm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">checkElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> IJavaCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                mmethod <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>getMethod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                mname <span class=\"token operator\">=</span> mmethod<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                msig <span class=\"token operator\">=</span> mmethod<span class=\"token punctuation\">.</span>getSignature<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">if</span> mname <span class=\"token operator\">==</span> methodName<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> methodName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> msig<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token keyword\">for</span> arg <span class=\"token keyword\">in</span> e<span class=\"token punctuation\">.</span>getArguments<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> IJavaConstant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                            v<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>getString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        decstr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decryptstring<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        parent<span class=\"token punctuation\">.</span>replaceSubElement<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>cstbuilder<span class=\"token punctuation\">.</span>createString<span class=\"token punctuation\">(</span>decstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">for</span> subelt <span class=\"token keyword\">in</span> e<span class=\"token punctuation\">.</span>getSubElements<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>subelt<span class=\"token punctuation\">,</span> IJavaClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>subelt<span class=\"token punctuation\">,</span> IJavaField<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>subelt<span class=\"token punctuation\">,</span> IJavaMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                self<span class=\"token punctuation\">.</span>checkElement<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> subelt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">decryptstring</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        src <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> char <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            src<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode_escape'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>解密后的效果如下</p>\n<p><img data-src=\"/360-jiagu/image-20230930182440462.png\" alt=\"image-20230930182440462\" style=\"aspect-ratio:1575 / 816;\"></p>\n<p>我们往下进行分析，可以知道 <code>attachBaseContext</code>  的第一个作用是根据目标手机的架构加载 <code>libjiagu_xxx.so</code>  如图</p>\n<p><img data-src=\"/360-jiagu/image-20230930184207278.png\" alt=\"image-20230930184207278\" style=\"aspect-ratio:1304 / 899;\"></p>\n<p>这些 so 在 <code>assets</code>  目录下</p>\n<p><img data-src=\"/360-jiagu/image-20230930184336555.png\" alt=\"image-20230930184336555\" style=\"aspect-ratio:810 / 261;\"></p>\n<p>在加载完 <code>libjiagu_xxx.so</code>  之后，还调用了 <code>DtcLoader</code>  类进行初始化，这里使用的 jadx 的反编译结果，因为 jeb 没有反编译出 <code>DtcLoader.init();</code>  方法来</p>\n<p><img data-src=\"/360-jiagu/image-20230930184605448.png\" alt=\"image-20230930184605448\" style=\"aspect-ratio:765 / 198;\"></p>\n<p><code>DtcLoader</code>  类如图所示</p>\n<p><img data-src=\"/360-jiagu/image-20230930184748578.png\" alt=\"image-20230930184748578\" style=\"aspect-ratio:1344 / 636;\"></p>\n<p>当 <code>DtcLoader</code>  类被加载到 JVM 中时，会去加载 <code>libjgdtc.so</code> , 如果加载失败，则会尝试从 <code>/data/app/com.oacia.apk_protect/lib/arm64/libjgdtc.so</code>  或者 <code>/data/data/com.oacia.apk_protect/lib/libjgdtc.so</code>  中去加载这个 so</p>\n<p>但是当我们去进入到这两个目录进行寻找时，却发现没有这个 <code>libjgdtc.so</code>  存在</p>\n<p><img data-src=\"/360-jiagu/image-20230930190258638.png\" alt=\"image-20230930190258638\" style=\"aspect-ratio:494 / 1023;\"></p>\n<p>所以我们的分析重点是在 <code>libjiagu.so</code>  中，这里我选取了 arm64 架构的 so 文件 <code>libjiagu_a64.so</code>  进行分析</p>\n<h1 id=\"壳elf导入导出表修复\"><a class=\"anchor\" href=\"#壳elf导入导出表修复\">#</a> 壳 ELF 导入导出表修复</h1>\n<p>我们使用 ida 分析 <code>libjiagu_a64.so</code> , 发现导入表和导出表都没有内容，既然是这种情况，那么应该是在 so 装载进内存时导入导出表才会去进行相应的链接操作</p>\n<p><img data-src=\"/360-jiagu/image-20231118145804113.png\" alt=\"image-20231118145804113\" style=\"aspect-ratio:1920 / 596;\"></p>\n<p>所以我们可以先用 frida 把这个 so 给 dump 下来</p>\n<p>首先我们在手机上运行一下 frida server</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS D:<span class=\"token punctuation\">\\</span>frida<span class=\"token operator\">></span> adb shell</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>blueline:/ $ <span class=\"token function\">su</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>blueline:/ <span class=\"token comment\"># cd /data/local/tmp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>blueline:/data/local/tmp <span class=\"token comment\"># ./fs -l 0.0.0.0:1234</span></pre></td></tr></table></figure><p>随后做一下端口转发</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb forward tcp:1234 tcp:1234</pre></td></tr></table></figure><p>frida 命令行语句如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frida <span class=\"token parameter variable\">-H</span> <span class=\"token number\">127.0</span>.0.1:1234 <span class=\"token parameter variable\">-l</span> .<span class=\"token punctuation\">\\</span>hook.js <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"com.oacia.apk_protect\"</span></pre></td></tr></table></figure><p>注入如下脚本</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">my_hook_dlopen</span><span class=\"token punctuation\">(</span>soName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>soName<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">dump_so</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">dump_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">so_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">var</span> libso <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleByName</span><span class=\"token punctuation\">(</span>so_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[name]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[base]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[size]:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[path]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">var</span> file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.oacia.apk_protect/\"</span> <span class=\"token operator\">+</span> libso<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> libso<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">var</span> file_handle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file_handle <span class=\"token operator\">&amp;&amp;</span> file_handle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span><span class=\"token function\">protect</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token string\">'rwx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">var</span> libso_buffer <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readByteArray</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>libso_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[dump]:\"</span><span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token function\">my_hook_dlopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20231118150855726.png\" alt=\"image-20231118150855726\" style=\"aspect-ratio:998 / 155;\"></p>\n<p>随后我们使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Y4TEVGVC9Tb0ZpeGVy\"> SoFixer</span> 修复一下这个 so, 这里的 <code>-m</code>  参数即这个 so 在内存中的 <code>base</code>  基地址</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.<span class=\"token punctuation\">\\</span>SoFixer-Windows-64.exe <span class=\"token parameter variable\">-s</span> .<span class=\"token punctuation\">\\</span>libjiagu_64.so_0x74a2845000_0x274000.so <span class=\"token parameter variable\">-o</span> .<span class=\"token punctuation\">\\</span>libjiagu_64_0x74a2845000_0x274000_fix.so <span class=\"token parameter variable\">-m</span> 0x74a2845000 <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p>修复完成后，导入表和导出表就恢复了</p>\n<p><img data-src=\"/360-jiagu/image-20231118151321228.png\" alt=\"image-20231118151321228\" style=\"aspect-ratio:1537 / 706;\"></p>\n<h1 id=\"加固壳反调试初步分析\"><a class=\"anchor\" href=\"#加固壳反调试初步分析\">#</a> 加固壳反调试初步分析</h1>\n<p>首先我们去 hook 一下打开 so 的函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dlopen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load \"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_dlopen<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>日志如下，所以反调试是在 <code>libjiagu_64.so</code>  中</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>load libstats_jni.so</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>load /data/app/~~P6meiEqXSQZrP2ChUgVgOg<span class=\"token operator\">==</span>/com.oacia.apk_protect-ezyVSLdtBZmLTZejgPlSoQ<span class=\"token operator\">==</span>/oat/arm64/base.odex</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>load /data/data/com.oacia.apk_protect/.jiagu/libjiagu_64.so</pre></td></tr></table></figure><p>然后去 hook 打开文件的函数 <code>open</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">my_hook_dlopen</span><span class=\"token punctuation\">(</span>soName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>soName<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">hook_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">var</span> pth <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>my_hook_dlopen<span class=\"token punctuation\">,</span><span class=\"token string\">\"libjiagu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>日志如下</p>\n<p><img data-src=\"/360-jiagu/image-20231119122024522.png\" alt=\"image-20231119122024522\" style=\"aspect-ratio:849 / 170;\"></p>\n<p>这里我们发现了 <code>/proc/self/maps</code> , 这是常见的反调试，要绕过这个检测，我们可以备份一个正常的 <code>maps</code>  文件，然后用 frida 去 hook  <code>open</code>  函数，如果匹配到字符串 <code>maps</code> , 就将字符串重定向到我们备份的 <code>maps</code>  文件</p>\n<p>首先我们正常打开一次加壳的 apk, 然后使用下列命令备份 maps</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /proc/self/maps /data/data/com.oacia.apk_protect/maps</pre></td></tr></table></figure><p>然后我们注入如下 frida 脚本</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">my_hook_dlopen</span><span class=\"token punctuation\">(</span>soName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>soName<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">hook_proc_self_maps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_proc_self_maps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">const</span> openPtr <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">getExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> open <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeFunction</span><span class=\"token punctuation\">(</span>openPtr<span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">var</span> fakePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.oacia.apk_protect/maps\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>openPtr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pathnameptr<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8String</span><span class=\"token punctuation\">(</span>pathnameptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maps\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find\"</span><span class=\"token punctuation\">,</span>pathname<span class=\"token punctuation\">,</span><span class=\"token string\">\",redirect to\"</span><span class=\"token punctuation\">,</span>fakePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">var</span> filename <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">allocUtf8String</span><span class=\"token punctuation\">(</span>fakePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">var</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>pathnameptr<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>my_hook_dlopen<span class=\"token punctuation\">,</span><span class=\"token string\">\"libjiagu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是当注入这段脚本后，进程由于非法内存访问而退出了，这说明 360 加固不仅读取 maps 文件，并且会尝试访问 maps 文件中所记录的文件或内存映射。这里由于 frida 注入后重启 apk, 但是备份的 maps 文件中记录的是先前的映射起始地址 (这块内存在关闭 apk 后就被抹去了), 所以当壳尝试访问其中的映射时产生了非法内存访问从而让进程崩溃</p>\n<p><img data-src=\"/360-jiagu/image-20240212225108205.png\" alt=\"image-20240212225108205\" style=\"aspect-ratio:1901 / 667;\"></p>\n<p>这里我的解决方式是将上述 frida 代码中的 <code>fakePath</code>  赋值为一个不存在的文件例如 <code>/data/data/com.oacia.apk_protect/maps_nonexistent</code> , 来让壳没有内容可以访问</p>\n<p>修改完 <code>fakePath</code>  后重新注入代码，这个打印出来的日志可以说非常有意思，我们来看一下，相比 hook  <code>open</code>  之前的日志，我们成功的让 360 加固的壳释放出了 dex</p>\n<p><img data-src=\"/360-jiagu/image-20240213225015953.png\" alt=\"image-20240213225015953\" style=\"aspect-ratio:1290 / 632;\"></p>\n<p>然而这个壳似乎是又发现了些什么异常，随后赶紧让 app 退出了，但是由于退出的太过仓促，它甚至还没有来得及把 dex 从文件夹中删除</p>\n<p><img data-src=\"/360-jiagu/image-20231117143717038.png\" alt=\"image-20231117143717038\" style=\"aspect-ratio:467 / 417;\"></p>\n<p>用 010editor 打开 <code>classes.dex</code> , 发现前几位并不是 dex 的魔术头，说明这个 dex 还没有被解密，不过现在我们只需要分析 dex 如何被壳从内存中释放出来的过程就可以了～</p>\n<p><img data-src=\"/360-jiagu/image-20231117143828767.png\" alt=\"image-20231117143828767\" style=\"aspect-ratio:788 / 577;\"></p>\n<p>如何可以定位到是什么位置调用了 <code>open</code>  函数来打开 <code>classes.dex</code>  呢？</p>\n<p>很简单，打印一下堆栈就可以了</p>\n<p>假如我们使用常规的 frida 打印堆栈代码，即使用 <code>DebugSymbol.fromAddress</code>  函数来判断地址所在的 <code>so</code>  的位置，那么进程是会报错退出的</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RegisterNatives called from:\\\\n'</span> <span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">backtrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> Backtracer<span class=\"token punctuation\">.</span><span class=\"token constant\">FUZZY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>DebugSymbol<span class=\"token punctuation\">.</span>fromAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>所以这里 <code>DebugSymbol.fromAddress</code>  所实现的逻辑需要自己编写，即下方的 <code>addr_in_so</code>  函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addr_in_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> process_Obj_Module_Arr <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> process_Obj_Module_Arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">></span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">&amp;&amp;</span> addr<span class=\"token operator\">&lt;</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is in\"</span><span class=\"token punctuation\">,</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"offset: 0x\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">-</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_proc_self_maps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> openPtr <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">getExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> open <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeFunction</span><span class=\"token punctuation\">(</span>openPtr<span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">var</span> fakePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.oacia.apk_protect/maps_nonexistent\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>openPtr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pathnameptr<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8String</span><span class=\"token punctuation\">(</span>pathnameptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//,Process.getCurrentThreadId()</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maps\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find\"</span><span class=\"token punctuation\">,</span>pathname<span class=\"token operator\">+</span><span class=\"token string\">\", redirect to\"</span><span class=\"token punctuation\">,</span>fakePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">var</span> filename <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">allocUtf8String</span><span class=\"token punctuation\">(</span>fakePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dex\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">backtrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> Backtracer<span class=\"token punctuation\">.</span><span class=\"token constant\">FUZZY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>addr_in_so<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">var</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>pathnameptr<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">my_hook_dlopen</span><span class=\"token punctuation\">(</span>soName<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token comment\">//console.log(path);</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>soName<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token function\">hook_proc_self_maps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>my_hook_dlopen<span class=\"token punctuation\">,</span><span class=\"token string\">'libjiagu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>于是我们得到了释放三个 dex 文件的堆栈回溯</p>\n<ul>\n<li><code>classes.dex</code> <br>\n<img data-src=\"/360-jiagu/image-20240213225949584.png\" alt=\"image-20240213225949584\" style=\"aspect-ratio:878 / 513;\"></li>\n<li><code>classes2.dex</code> <br>\n<img data-src=\"/360-jiagu/image-20240213230022534.png\" alt=\"image-20240213230022534\" style=\"aspect-ratio:896 / 518;\"></li>\n<li><code>classes3.dex</code> <br>\n<img data-src=\"/360-jiagu/image-20240213230048818.png\" alt=\"image-20240213230048818\" style=\"aspect-ratio:900 / 259;\"></li>\n</ul>\n<p>这里我们发现 <code>classes.dex</code>  与 <code>classes2.dex</code>  的堆栈回溯完全相同，并且 <code>classes3.dex</code>  的前半部分和前两个 dex 的堆栈一样，随后进程便又退出了</p>\n<p>通过对堆栈的分析，我们可以发现三个 dex 应该是在一个循环中被依次加载的</p>\n<p>接下来我们便跳转到堆栈所打印的偏移来进一步分析下</p>\n<p>然而当我们跳转到堆栈回溯中的 <code>libjiagu_64.so</code>  的偏移 <code>0x19b780</code>  或者 <code>0x134598</code>  时，却发现这些地址的值都是 0</p>\n<p><img data-src=\"/360-jiagu/image-20240213232138840.png\" alt=\"image-20240213232138840\" style=\"aspect-ratio:721 / 104;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240213232208410.png\" alt=\"image-20240213232208410\" style=\"aspect-ratio:751 / 102;\"></p>\n<p>我们很快就能想到这里用到的技术应该是先将一块内存标记为可写可执行，随后将字节码填充进去，所以说，我们只需要在壳打开 dex 时，将此时的 <code>libjiagu_64.so</code>  从内存中 dump 下来就可以了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">dump_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">so_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> libso <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleByName</span><span class=\"token punctuation\">(</span>so_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[name]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[base]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[size]:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[path]:\"</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.oacia.apk_protect/\"</span> <span class=\"token operator\">+</span> libso<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> libso<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> file_handle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file_handle <span class=\"token operator\">&amp;&amp;</span> file_handle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span><span class=\"token function\">protect</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token string\">'rwx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> libso_buffer <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readByteArray</span><span class=\"token punctuation\">(</span>libso<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>libso_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[dump]:\"</span><span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">var</span> dump_once <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为会打开三次 dex, 所以这里我们仅 dump 打开第一次 dex 时的 libjiagu_64.so</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_proc_self_maps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> openPtr <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">getExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> open <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeFunction</span><span class=\"token punctuation\">(</span>openPtr<span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">var</span> fakePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.oacia.apk_protect/maps_nonexistent\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>openPtr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pathnameptr<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">readUtf8String</span><span class=\"token punctuation\">(</span>pathnameptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//,Process.getCurrentThreadId()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maps\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find\"</span><span class=\"token punctuation\">,</span>pathname<span class=\"token operator\">+</span><span class=\"token string\">\", redirect to\"</span><span class=\"token punctuation\">,</span>fakePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">var</span> filename <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">.</span><span class=\"token function\">allocUtf8String</span><span class=\"token punctuation\">(</span>fakePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dex\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dump_once<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                dump_once <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">dump_so</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">var</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>pathnameptr<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后再去用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Y4TEVGVC9Tb0ZpeGVy\"> SoFixer</span> 修复这个 dump 下来的 so</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.<span class=\"token punctuation\">\\</span>SoFixer-Windows-64.exe <span class=\"token parameter variable\">-s</span> .<span class=\"token punctuation\">\\</span>libjiagu_64.so_0x7a69829000_0x274000_open_classes.dex.so <span class=\"token parameter variable\">-o</span> .<span class=\"token punctuation\">\\</span>libjiagu_64.so_0x7a69829000_0x274000_open_classes.dex_fix.so <span class=\"token parameter variable\">-m</span> 0x7a69829000 <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p>再次来到偏移 <code>0x19B780</code>  处，可以发现这块空内存已经被填充了数据</p>\n<p><img data-src=\"/360-jiagu/image-20240213233913165.png\" alt=\"image-20240213233913165\" style=\"aspect-ratio:971 / 383;\"></p>\n<p>接下来我们想知道的是究竟是从什么地方开始被填充了新的数据，所以我们可以用 WinMerge 来让填充和未填充数据的 so 进行比较看看，结果却有了惊人的发现，被填充的数据是从 <code>0xe7000</code>  开始的，它的开头竟然是 ELF 文件的魔数头！？这有意思了，那么就是一个 so 里面藏了另外一个 so 咯～</p>\n<p><img data-src=\"/360-jiagu/image-20240213234737987.png\" alt=\"image-20240213234737987\" style=\"aspect-ratio:1920 / 1080;\"></p>\n<p>我们写个 python 脚本，把这个 ELF 从 <code>0x0e7000</code>  开始后面的所有字节都复制到新的文件里面</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libjiagu_64.so_0x7a69829000_0x274000_open_classes.dex.so'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">=</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libjiagu_0xe7000.so'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0xe7000</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是当把这个 elf 提取出来之后拿 <code>010editor</code>  看却发现 <code>program header table</code>  被加密了</p>\n<p><img data-src=\"/360-jiagu/image-20240220220722659.png\" alt=\"image-20240220220722659\" style=\"aspect-ratio:800 / 434;\"></p>\n<p>这就导致 ida 根本就无法进行正常的分析</p>\n<p><img data-src=\"/360-jiagu/image-20240217212952888.png\" alt=\"image-20240217212952888\" style=\"aspect-ratio:472 / 149;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240217213007622.png\" alt=\"image-20240217213007622\" style=\"aspect-ratio:862 / 371;\"></p>\n<h1 id=\"主elf解密流程分析\"><a class=\"anchor\" href=\"#主elf解密流程分析\">#</a> 主 ELF 解密流程分析</h1>\n<p>壳 elf 加载主 elf, 并且 program header 还被加密了，感觉这种形式很像是 <strong>自实现 linker 加固 so</strong></p>\n<p>对于这种加固方式，壳 elf 在代码中自己实现了解析 ELF 文件的函数，并将解析结果赋值到 <code>soinfo</code>  结构体中，随后调用 <code>dlopen</code>  进行手动加载</p>\n<p>来到 ida 里面在导入表对 <code>dlopen</code>  进行交叉引用，我们看到 dlopen 有 5 个交叉引用</p>\n<p><img data-src=\"/360-jiagu/image-20240218174655222.png\" alt=\"image-20240218174655222\" style=\"aspect-ratio:925 / 277;\"></p>\n<p>看到第二个交叉引用，来到 <code>sub_3C94</code>  函数，这个 for 循环看起来像是在用符号表通过 dlopen 加载依赖项</p>\n<p><img data-src=\"/360-jiagu/image-20240218174801778.png\" alt=\"image-20240218174801778\" style=\"aspect-ratio:759 / 469;\"></p>\n<p>向上面翻翻代码，看到这个 switch 就知道找对地方了，这里应该就是自实现 linker 来加载 so 的</p>\n<p><img data-src=\"/360-jiagu/image-20240218175140788.png\" alt=\"image-20240218175140788\" style=\"aspect-ratio:591 / 784;\"></p>\n<p>因为这和 AOSP 源码 ( <code>android-platform\\bionic\\linker\\linker.cpp</code> ) 中的预链接 ( <code>soinfo::prelink_image</code> ) 这部分的操作极为的相似</p>\n<p><img data-src=\"/360-jiagu/image-20240218175438786.png\" alt=\"image-20240218175438786\" style=\"aspect-ratio:1097 / 757;\"></p>\n<p>那接下来就在 ida 中导入 soinfo 相关的符号就可以啦</p>\n<p>在 ida 中依次点击 <code>View-&gt;Open subviews-&gt;Local Types</code> , 然后按下键盘上的 <code>Insert</code>  将下面的结构体添加到对话框中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//IMPORTANT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//ELF64 启用该宏</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__LP64__</span>  <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//ELF32 启用该宏</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//#define __work_around_b_24465209__  1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//https://android.googlesource.com/platform/bionic/+/master/linker/Android.bp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>架构为 32 位 定义__work_around_b_24465209__宏</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>arch: &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        arm: &#123;cflags: [\"-D__work_around_b_24465209__\"],&#125;,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        x86: &#123;cflags: [\"-D__work_around_b_24465209__\"],&#125;,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\libc\\include\\link.h</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ElfW</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> Elf64_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">type</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ElfW</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> Elf32_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">type</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_common_types.h</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// Android uses RELA for LP64.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USE_RELA</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\libc\\kernel\\uapi\\asm-generic\\int-ll64.h</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//__signed__-->signed</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> __s8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> __u8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">short</span> __s16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> __u16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> __s32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __u32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> __s64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> __u64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//A12-src\\msm-google\\include\\uapi\\linux\\elf.h</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/* 32-bit ELF base types. */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf32_Addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">typedef</span> __u16\tElf32_Half<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf32_Off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">typedef</span> __s32\tElf32_Sword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf32_Word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/* 64-bit ELF base types. */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">typedef</span> __u64\tElf64_Addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">typedef</span> __u16\tElf64_Half<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">typedef</span> __s16\tElf64_SHalf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">typedef</span> __u64\tElf64_Off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">typedef</span> __s32\tElf64_Sword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf64_Word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">typedef</span> __u64\tElf64_Xword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">typedef</span> __s64\tElf64_Sxword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dynamic</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  Elf32_Sword d_tag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">union</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Elf32_Sword\td_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Elf32_Addr\td_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> d_un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Dyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  Elf64_Sxword d_tag<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* entry tag value */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Elf64_Xword d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Elf64_Addr d_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> d_un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Dyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_rel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  Elf32_Addr\tr_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  Elf32_Word\tr_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Rel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_rel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  Elf64_Addr r_offset<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Location at which to apply the action */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  Elf64_Xword r_info<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* index and type of relocation */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Rel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_rela</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  Elf32_Addr\tr_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  Elf32_Word\tr_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  Elf32_Sword\tr_addend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Rela<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_rela</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  Elf64_Addr r_offset<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Location at which to apply the action */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  Elf64_Xword r_info<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* index and type of relocation */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  Elf64_Sxword r_addend<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Constant addend used to compute value */</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Rela<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_sym</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  Elf32_Word\tst_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  Elf32_Addr\tst_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  Elf32_Word\tst_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  Elf32_Half\tst_shndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_sym</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  Elf64_Word st_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Symbol name, index in string tbl */</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_info<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Type and binding attributes */</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_other<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* No defined meaning, 0 */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  Elf64_Half st_shndx<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Associated section index */</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  Elf64_Addr st_value<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Value of the symbol */</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  Elf64_Xword st_size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Associated symbol size */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EI_NIDENT</span>\t<span class=\"token expression\"><span class=\"token number\">16</span></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_hdr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\te_ident<span class=\"token punctuation\">[</span>EI_NIDENT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  Elf32_Half\te_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  Elf32_Half\te_machine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  Elf32_Word\te_version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  Elf32_Addr\te_entry<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Entry point */</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  Elf32_Off\te_phoff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  Elf32_Off\te_shoff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  Elf32_Word\te_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  Elf32_Half\te_ehsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  Elf32_Half\te_phentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  Elf32_Half\te_phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  Elf32_Half\te_shentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  Elf32_Half\te_shnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  Elf32_Half\te_shstrndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Ehdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_hdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\te_ident<span class=\"token punctuation\">[</span>EI_NIDENT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* ELF \"magic number\" */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  Elf64_Half e_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  Elf64_Half e_machine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  Elf64_Word e_version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  Elf64_Addr e_entry<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Entry point virtual address */</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  Elf64_Off e_phoff<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Program header table file offset */</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  Elf64_Off e_shoff<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section header table file offset */</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  Elf64_Word e_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  Elf64_Half e_ehsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  Elf64_Half e_phentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  Elf64_Half e_phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  Elf64_Half e_shentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  Elf64_Half e_shnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  Elf64_Half e_shstrndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Ehdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token comment\">/* These constants define the permissions on sections in the program</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>   header, p_flags. */</pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PF_R</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x4</span></span></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PF_W</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x2</span></span></span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PF_X</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x1</span></span></span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_phdr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  Elf32_Word\tp_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  Elf32_Off\tp_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  Elf32_Addr\tp_vaddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  Elf32_Addr\tp_paddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  Elf32_Word\tp_filesz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  Elf32_Word\tp_memsz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  Elf32_Word\tp_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  Elf32_Word\tp_align<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Phdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_phdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  Elf64_Word p_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  Elf64_Word p_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  Elf64_Off p_offset<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment file offset */</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  Elf64_Addr p_vaddr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment virtual address */</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  Elf64_Addr p_paddr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment physical address */</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  Elf64_Xword p_filesz<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment size in file */</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  Elf64_Xword p_memsz<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment size in memory */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  Elf64_Xword p_align<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment alignment, file &amp; memory */</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Phdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_shdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  Elf32_Word\tsh_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  Elf32_Word\tsh_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  Elf32_Word\tsh_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  Elf32_Addr\tsh_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  Elf32_Off\tsh_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  Elf32_Word\tsh_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>  Elf32_Word\tsh_link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  Elf32_Word\tsh_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  Elf32_Word\tsh_addralign<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  Elf32_Word\tsh_entsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Shdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_shdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>  Elf64_Word sh_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section name, index in string tbl */</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>  Elf64_Word sh_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Type of section */</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  Elf64_Xword sh_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Miscellaneous section attributes */</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>  Elf64_Addr sh_addr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section virtual addr at execution */</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>  Elf64_Off sh_offset<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section file offset */</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  Elf64_Xword sh_size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Size of section in bytes */</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>  Elf64_Word sh_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Index of another section */</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>  Elf64_Word sh_info<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Additional section information */</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  Elf64_Xword sh_addralign<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Section alignment */</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>  Elf64_Xword sh_entsize<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Entry size if section holds table */</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Shdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_soinfo.h</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">linker_dtor_function_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SOINFO_NAME_LEN</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre></pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">soinfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>  <span class=\"token keyword\">char</span> old_name_<span class=\"token punctuation\">[</span>SOINFO_NAME_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> phdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>  <span class=\"token class-name\">size_t</span> phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> unused0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility.</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre></pre></td></tr><tr><td data-num=\"226\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> unused1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// DO NOT USE, maintained for compatibility.</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> dynamic<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> unused2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> unused3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> flags_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> strtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> symtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>  <span class=\"token class-name\">size_t</span> nbucket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>  <span class=\"token class-name\">size_t</span> nchain_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span> bucket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span> chain_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre></pre></td></tr><tr><td data-num=\"248\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> unused4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre></pre></td></tr><tr><td data-num=\"252\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> plt_rela_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token class-name\">size_t</span> plt_rela_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> rela_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  <span class=\"token class-name\">size_t</span> rela_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> plt_rel_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token class-name\">size_t</span> plt_rel_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> rel_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token class-name\">size_t</span> rel_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">*</span> preinit_array_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  <span class=\"token class-name\">size_t</span> preinit_array_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>  <span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">*</span> init_array_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>  <span class=\"token class-name\">size_t</span> init_array_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  <span class=\"token class-name\">linker_dtor_function_t</span><span class=\"token operator\">*</span> fini_array_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token class-name\">size_t</span> fini_array_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>  <span class=\"token class-name\">linker_ctor_function_t</span> init_func_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>  <span class=\"token class-name\">linker_dtor_function_t</span> fini_func_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>#if defined (__arm__)</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>  // ARM EABI section used for stack unwinding.</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>  uint32_t* ARM_exidx;</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>  size_t ARM_exidx_count;</pre></td></tr><tr><td data-num=\"282\"></td><td><pre>#endif</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>  size_t ref_count_;</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>// 怎么找不 link_map 这个类型的声明...</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>  link_map link_map_head;</pre></td></tr><tr><td data-num=\"286\"></td><td><pre></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>  bool constructors_called;</pre></td></tr><tr><td data-num=\"288\"></td><td><pre></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>  // When you read a virtual address from the ELF file, add this</pre></td></tr><tr><td data-num=\"290\"></td><td><pre>  //value to get the corresponding address in the process' address space.</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>  ElfW (Addr) load_bias;</pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>#if !defined (__LP64__)</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>  bool has_text_relocations;</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>#endif</pre></td></tr><tr><td data-num=\"296\"></td><td><pre>  bool has_DT_SYMBOLIC;</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"298\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>导入完成后按下 <code>Y</code>  键，将 <code>a1</code>  定义为 <code>soinfo*</code></p>\n<p><img data-src=\"/360-jiagu/image-20240218175803731.png\" alt=\"image-20240218175803731\" style=\"aspect-ratio:676 / 184;\"></p>\n<p>然后就可以看到这些符号了，但是看这些符号总感觉有些不太对劲，这里不应该出现 <code>a1[1]</code>  或者 <code>a1[2]</code> , 所以我猜测这个 soinfo 有被魔改的痕迹</p>\n<p><img data-src=\"/360-jiagu/image-20240219144353027.png\" alt=\"image-20240219144353027\" style=\"aspect-ratio:750 / 808;\"></p>\n<p>虽然这个 soinfo 可能有被魔改了，我们还是从 <code>sub_3C94</code>  这个预链接相关函数入手好了，交叉引用发现 <code>sub_3C94</code>  是被 <code>sub_49F0</code>  调用</p>\n<p>随后我们来到 <code>sub_49F0</code>  内调用 <code>sub_3C94</code>  函数的位置，向下看，进入 <code>sub_4918</code>  函数中</p>\n<p><img data-src=\"/360-jiagu/image-20240219181823744.png\" alt=\"image-20240219181823744\" style=\"aspect-ratio:782 / 307;\"></p>\n<p><code>sub_4918</code>  中调用了 <code>sub_5E6C</code> , 我们进入 <code>sub_5E6C</code></p>\n<p><img data-src=\"/360-jiagu/image-20240219181928308.png\" alt=\"image-20240219181928308\" style=\"aspect-ratio:1023 / 727;\"></p>\n<p>这个函数中出现了 <code>0x38</code>  这个数字， <code>0x38</code>  是这个循环的步长</p>\n<p><img data-src=\"/360-jiagu/image-20240219184405967.png\" alt=\"image-20240219184405967\" style=\"aspect-ratio:1118 / 714;\"></p>\n<p>0x38 这个数字有什么特殊的含义吗？当然有了！！</p>\n<p>我们把刚刚提取出来的 elf 用 <code>010editor</code>  打开，看到 <code>elf_header</code>  的 <code>phentsize</code>  这个字段，这个字段的含义是一个 <code>Program header table</code>  的长度，它正正好好也是 <code>0x38</code></p>\n<p><img data-src=\"/360-jiagu/image-20240219184824589.png\" alt=\"image-20240219184824589\" style=\"aspect-ratio:1907 / 798;\"></p>\n<p>所以说在 <code>sub_5E6C</code>  中变量 <code>v5</code>  的类型应该是 <code>Elf64_Phdr *</code> , 我们直接重定义类型</p>\n<p><img data-src=\"/360-jiagu/image-20240219185005955.png\" alt=\"image-20240219185005955\" style=\"aspect-ratio:1323 / 307;\"></p>\n<p>既然知道了真正的 <code>program header table</code>  就是在这个位置的，那我们直接在这个地方把 <code>program header table</code>  整个给 dump 下来不就行了</p>\n<p>所以我们直接去 hook <code>sub_5E6C</code>  的三个传入的值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_5E6C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x5E6C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x38</span><span class=\"token operator\">*</span><span class=\"token number\">0x6</span><span class=\"token operator\">+</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">base = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>module<span class=\"token punctuation\">.</span>base<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240219185724473.png\" alt=\"image-20240219185724473\" style=\"aspect-ratio:1718 / 884;\"></p>\n<p>上面的第一个 hexdump 就是 <code>program header table</code> , 我们可以用 <code>cyberchef</code>  将 <code>hexdump</code>  转成数组的形式</p>\n<p><img data-src=\"/360-jiagu/image-20240219190012572.png\" alt=\"image-20240219190012572\" style=\"aspect-ratio:1920 / 973;\"></p>\n<p><code>0x6</code>  则对应着 <code>phnum</code> , 这表示共有 6 个 <code>program header table</code></p>\n<p><code>0x793ca38000</code>  表示这个主 ELF 的基址，因为这个主 ELF 的位置在壳 ELF 基址的偏移 <code>0xe7000</code>  处，而最下面这行也已经打印出了壳 ELF 的基址为 <code>0x793c951000</code> , <code>0x793ca38000==0x793c951000+0xe7000</code>  等式成立</p>\n<p>至此为止，我们拿到了解密之后的 <code>program header table</code> , 同时我们也知道了 <code>sub_5E6C</code>  传入的三个参数分别是 <code>phdr</code> , <code>phnum</code>  以及 <code>base</code></p>\n<p>但是 <code>phdr</code>  成员命名是在 soinfo 偏移的 <code>0x0</code>  的位置</p>\n<p><img data-src=\"/360-jiagu/image-20240219191502430.png\" alt=\"image-20240219191502430\" style=\"aspect-ratio:601 / 296;\"></p>\n<p>那假如 <code>a1</code>  的类型就是 <code>soinfo*</code> , 为什么在 <code>sub_4918</code>  里面调用 <code>sub_5E6C</code>  传入的是偏移是 <code>232</code>  呢？</p>\n<p><img data-src=\"/360-jiagu/image-20240219191628154.png\" alt=\"image-20240219191628154\" style=\"aspect-ratio:1047 / 206;\"></p>\n<p>所以 <code>soinfo*</code>  必定有被魔改，同时我们也可以在 soinfo 前填充一个大小为 232 的 char 类型数组看看是什么情况</p>\n<p><img data-src=\"/360-jiagu/image-20240219191808113.png\" alt=\"image-20240219191808113\" style=\"aspect-ratio:355 / 229;\"></p>\n<p>很好，这验证了我们对于 <code>soinfo*</code>  被魔改的猜测，因为在一切正常的情况之下，函数的调用应该是 <code>sub_5E6C(a1-&gt;phdr, a1-&gt;phnum, a1-&gt;base)</code>  才对</p>\n<p><img data-src=\"/360-jiagu/image-20240219191839316.png\" alt=\"image-20240219191839316\" style=\"aspect-ratio:986 / 145;\"></p>\n<p>但是我很想知道这个壳 ELF 究竟是如何被解密出来的，那么首先来看看主 ELF 的函数调用链是什么样子的吧～</p>\n<p>我写了一个 ida 插件来实现这个过程<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29hY2lhL3N0YWxrZXJfdHJhY2Vfc28=\"> stalker_trace_so</span></p>\n<p>在 IDA 中使用 <code>Edit-&gt;Plugins-&gt;stalker_trace_so</code>  后，在 so 所在的目录下会生成一个 js 脚本，我们用 frida 注入到 apk 中即可，需要注意的是 <code>so_name</code>  需要改成 <code>libjiagu_64.so</code></p>\n<p><img data-src=\"/360-jiagu/image-20231118152818874.png\" alt=\"image-20231118152818874\" style=\"aspect-ratio:733 / 171;\"></p>\n<p>打印出来的完整日志如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>call1<span class=\"token operator\">:</span>JNI_OnLoad</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>call2<span class=\"token operator\">:</span><span class=\"token class-name\">j_interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>call3<span class=\"token operator\">:</span><span class=\"token class-name\">interpreter_wrap_int64_t</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>call4<span class=\"token operator\">:</span>getenv</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>call5<span class=\"token operator\">:</span>sub_13908</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>call6<span class=\"token operator\">:</span>inotify_add_watch</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>call7<span class=\"token operator\">:</span>sub_11220</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>call8<span class=\"token operator\">:</span>fopen</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>call9<span class=\"token operator\">:</span>sub_9DD8</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>call10<span class=\"token operator\">:</span>sub_E3E0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>call11<span class=\"token operator\">:</span>strtol</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>call12<span class=\"token operator\">:</span>feof</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>call13<span class=\"token operator\">:</span>raise</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>call14<span class=\"token operator\">:</span>memset</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>call15<span class=\"token operator\">:</span>sub_C918</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>call16<span class=\"token operator\">:</span>sub_9988</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>call17<span class=\"token operator\">:</span>sub_9964</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>call18<span class=\"token operator\">:</span>sub_9AC4</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>call19<span class=\"token operator\">:</span>j_ffi_prep_cif</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>call20<span class=\"token operator\">:</span>ffi_prep_cif</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>call21<span class=\"token operator\">:</span>j_ffi_prep_cif_machdep</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>call22<span class=\"token operator\">:</span>ffi_prep_cif_machdep</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>call23<span class=\"token operator\">:</span>j_ffi_call</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>call24<span class=\"token operator\">:</span>ffi_call</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>call25<span class=\"token operator\">:</span>sub_1674C</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>call26<span class=\"token operator\">:</span>j_ffi_call_SYSV</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>call27<span class=\"token operator\">:</span>ffi_call_SYSV</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>call28<span class=\"token operator\">:</span>sub_167BC</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>call29<span class=\"token operator\">:</span>sub_1647C</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>call30<span class=\"token operator\">:</span>sub_163DC</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>call31<span class=\"token operator\">:</span>sub_9900</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>call32<span class=\"token operator\">:</span>sub_94BC</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>call33<span class=\"token operator\">:</span>inotify_init</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>call34<span class=\"token operator\">:</span>fmod</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>call35<span class=\"token operator\">:</span>strncpy</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>call36<span class=\"token operator\">:</span>_Z9__arm_a_1P7_JavaVMP7_JNIEnvPvRi</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>call37<span class=\"token operator\">:</span>sub_9E58</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>call38<span class=\"token operator\">:</span>sub_999C</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>call39<span class=\"token operator\">:</span>sub_10964</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>call40<span class=\"token operator\">:</span>j_lseek_1</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>call41<span class=\"token operator\">:</span>lseek</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>call42<span class=\"token operator\">:</span>sub_96E0</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>call43<span class=\"token operator\">:</span>sub_8000</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>call44<span class=\"token operator\">:</span>dlopen</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>call45<span class=\"token operator\">:</span>sub_60E0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>call46<span class=\"token operator\">:</span>sub_6544</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>call47<span class=\"token operator\">:</span>sub_4B54</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>call48<span class=\"token operator\">:</span>sub_6128</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>call49<span class=\"token operator\">:</span>_ZN9__arm_c_19__arm_c_0Ev</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>call50<span class=\"token operator\">:</span>sub_A3EC</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>call51<span class=\"token operator\">:</span>sub_99CC</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>call52<span class=\"token operator\">:</span>sub_9944</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>call53<span class=\"token operator\">:</span>sub_6484</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>call54<span class=\"token operator\">:</span>sub_6590</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>call55<span class=\"token operator\">:</span>prctl</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>call56<span class=\"token operator\">:</span>sub_6698</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>call57<span class=\"token operator\">:</span>sub_9FFC</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>call58<span class=\"token operator\">:</span>j_lseek_3</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>call59<span class=\"token operator\">:</span>j_lseek_2</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>call60<span class=\"token operator\">:</span>j_lseek_0</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>call61<span class=\"token operator\">:</span>sub_9A90</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>call62<span class=\"token operator\">:</span>sub_5F20</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>call63<span class=\"token operator\">:</span>sub_6044</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>call64<span class=\"token operator\">:</span>sub_3574</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>call65<span class=\"token operator\">:</span>uncompress</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>call66<span class=\"token operator\">:</span>sub_49F0</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>call67<span class=\"token operator\">:</span>sub_5400</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>call68<span class=\"token operator\">:</span>sub_5478</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>call69<span class=\"token operator\">:</span>sub_5B08</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>call70<span class=\"token operator\">:</span>sub_5650</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>call71<span class=\"token operator\">:</span>sub_580C</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>call72<span class=\"token operator\">:</span>open</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>call73<span class=\"token operator\">:</span>atoi</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>call74<span class=\"token operator\">:</span>sub_3C94</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>call75<span class=\"token operator\">:</span>strncmp</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>call76<span class=\"token operator\">:</span>sub_4918</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>call77<span class=\"token operator\">:</span>sub_4000</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>call78<span class=\"token operator\">:</span>sub_41B4</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>call79<span class=\"token operator\">:</span>sub_35AC</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>call80<span class=\"token operator\">:</span>sigaction</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>call81<span class=\"token operator\">:</span>sub_5E6C</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>call82<span class=\"token operator\">:</span>sub_5444</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>call83<span class=\"token operator\">:</span>sub_633C</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>call84<span class=\"token operator\">:</span>sub_8130</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>call85<span class=\"token operator\">:</span>sub_4C70</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>call86<span class=\"token operator\">:</span>sub_825C</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>call87<span class=\"token operator\">:</span>sub_8B50</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>call88<span class=\"token operator\">:</span>sub_8ED4</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>call89<span class=\"token operator\">:</span>sub_8430</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>call90<span class=\"token operator\">:</span>interpreter_wrap_int64_t_bridge</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>call91<span class=\"token operator\">:</span>sub_9D60</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>call92<span class=\"token operator\">:</span>sub_166C4</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>call93<span class=\"token operator\">:</span>memcpy</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>call94<span class=\"token operator\">:</span>_Z9__arm_a_2PcmS_Rii</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>call95<span class=\"token operator\">:</span>j_ffi_prep_cif_var</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>call96<span class=\"token operator\">:</span>ffi_prep_cif_var</pre></td></tr></table></figure><p>我们以 <code>sub_3C94</code>  为起点开始分析，因为这是我们通过 <code>dlopen</code>  交叉引用找到的<strong>自实现 linker 加固 so</strong> 的一个功能函数</p>\n<p>对 <code>sub_3C94</code>  不断按下 <code>X</code>  查看交叉引用，得到如下的调用关系 <code>sub_4B54-&gt;sub_49F0-&gt;sub_3C94</code></p>\n<p><code>sub_4B54</code>  可能被 <code>sub_8000</code>  或 <code>sub_8C74</code>  调用</p>\n<p><img data-src=\"/360-jiagu/image-20240219195550519.png\" alt=\"image-20240219195550519\" style=\"aspect-ratio:879 / 220;\"></p>\n<p>我们将 <code>stalker_trace_so</code>  打印出来的内容中，提取关键的部分拿过来看看，说明 <code>sub_4B54</code>  是被 <code>sub_8000</code>  调用的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>call43<span class=\"token operator\">:</span>sub_8000 <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>call44<span class=\"token operator\">:</span>dlopen</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>call45<span class=\"token operator\">:</span>sub_60E0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>call46<span class=\"token operator\">:</span>sub_6544</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>call47<span class=\"token operator\">:</span>sub_4B54 <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>call48<span class=\"token operator\">:</span>sub_6128</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>call49<span class=\"token operator\">:</span>_ZN9__arm_c_19__arm_c_0Ev</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>call50<span class=\"token operator\">:</span>sub_A3EC</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>call51<span class=\"token operator\">:</span>sub_99CC</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>call52<span class=\"token operator\">:</span>sub_9944</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>call53<span class=\"token operator\">:</span>sub_6484</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>call54<span class=\"token operator\">:</span>sub_6590</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>call55<span class=\"token operator\">:</span>prctl</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>call56<span class=\"token operator\">:</span>sub_6698</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>call57<span class=\"token operator\">:</span>sub_9FFC</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>call58<span class=\"token operator\">:</span>j_lseek_3</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>call59<span class=\"token operator\">:</span>j_lseek_2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>call60<span class=\"token operator\">:</span>j_lseek_0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>call61<span class=\"token operator\">:</span>sub_9A90</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>call62<span class=\"token operator\">:</span>sub_5F20</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>call63<span class=\"token operator\">:</span>sub_6044</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>call64<span class=\"token operator\">:</span>sub_3574</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>call65<span class=\"token operator\">:</span>uncompress</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>call66<span class=\"token operator\">:</span>sub_49F0 <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>call67<span class=\"token operator\">:</span>sub_5400</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>call68<span class=\"token operator\">:</span>sub_5478</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>call69<span class=\"token operator\">:</span>sub_5B08</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>call70<span class=\"token operator\">:</span>sub_5650</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>call71<span class=\"token operator\">:</span>sub_580C</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>call72<span class=\"token operator\">:</span>open</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>call73<span class=\"token operator\">:</span>atoi</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>call74<span class=\"token operator\">:</span>sub_3C94 <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span></pre></td></tr></table></figure><p><code>sub_8000</code>  的函数长这个样子，请记住第 25 行 <code>0xB8010</code>  这个数字，后面会派上用场的</p>\n<p><img data-src=\"/360-jiagu/image-20240219200830705.png\" alt=\"image-20240219200830705\" style=\"aspect-ratio:791 / 678;\"></p>\n<p>跟着函数调用链一处一处的在 IDA 中跳转到相应的地址进行查看，在 <code>call62:sub_5F20</code>  我们发现了有意思的代码</p>\n<p>这个函数，一眼 RC4 呀</p>\n<p><img data-src=\"/360-jiagu/image-20240219200139731.png\" alt=\"image-20240219200139731\" style=\"aspect-ratio:1387 / 810;\"></p>\n<p>用 frida 去 hook 一下这个函数看看 RC4 的密钥是什么</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_5f20_guess_rc4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 像是 RC4 的样子，hook 看看</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x5f20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240219200302071.png\" alt=\"image-20240219200302071\" style=\"aspect-ratio:1214 / 231;\"></p>\n<p>所以密钥就是这个咯</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b\"vUV4#\\x91#SVt\"</span></pre></td></tr></table></figure><p>继续跟着函数调用链走，在 <code>call63:sub_6044</code>  我们发现了 RC4 的解密函数</p>\n<p><img data-src=\"/360-jiagu/image-20240219200510607.png\" alt=\"image-20240219200510607\" style=\"aspect-ratio:811 / 731;\"></p>\n<p>hook 一下 <code>call63:sub_6044</code>  看看到底给什么数据解密了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> rc4_enc_text_addr<span class=\"token punctuation\">,</span>rc4_enc_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_rc4_enc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6044</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            rc4_enc_text_addr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            rc4_enc_size <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>rc4_enc_text_addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240219200703480.png\" alt=\"image-20240219200703480\" style=\"aspect-ratio:1193 / 269;\"></p>\n<p>这个函数的第二个参数是 <code>0xb8010</code> , 感觉是解密的数据的长度的样子，而且这个数字，有没有感觉在哪里见过呢？</p>\n<p>没错，这个数字刚刚就出现在 <code>sub_8000</code>  中</p>\n<p><img data-src=\"/360-jiagu/image-20240219201000793.png\" alt=\"image-20240219201000793\" style=\"aspect-ratio:479 / 184;\"></p>\n<p>而 <code>v5[0]</code>  的值是 <code>qword_2E270</code> , 这个数组也是 <code>01 18 25 e7</code>  开头的</p>\n<p><img data-src=\"/360-jiagu/image-20240219201131482.png\" alt=\"image-20240219201131482\" style=\"aspect-ratio:1100 / 471;\"></p>\n<p>继续跟着调用链走，接下来是调用 <code>call65:uncompress</code> , 进行解压缩操作</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_uncompress_res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"uncompress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hook uncompress\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">dump_memory</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">uncompress_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们发现解压缩的数据，前面四个字节 <code>b9 0e 1a 00</code>  没有包含在解压缩的字节之内</p>\n<p><img data-src=\"/360-jiagu/image-20240219202037098.png\" alt=\"image-20240219202037098\" style=\"aspect-ratio:1193 / 464;\"></p>\n<p>现在既然我们已经知道了主 ELF 在壳 ELF 中的位置，以及解密的算法，那我们直接从解压 apk, 找到里面的 <code>assets/libjiagu_a64.so</code> , 不就能直接把壳 ELF 解密出来咯</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> zlib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> struct</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RC4</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    S <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># KSA Phase</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># PRGA Phase</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    i <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        out<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ch <span class=\"token operator\">^</span> S<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> out</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RC4decrypt</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> RC4<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>wrap_elf_start <span class=\"token operator\">=</span> <span class=\"token number\">0x1e270</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>wrap_elf_size <span class=\"token operator\">=</span> <span class=\"token number\">0xb8010</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b\"vUV4#\\x91#SVt\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.oacia.apk_protect/assets/libjiagu_a64.so'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    wrap_elf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 对密文进行解密</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>dec_compress_elf <span class=\"token operator\">=</span> RC4decrypt<span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">[</span>wrap_elf_start<span class=\"token punctuation\">:</span>wrap_elf_start<span class=\"token operator\">+</span>wrap_elf_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>dec_elf <span class=\"token operator\">=</span> zlib<span class=\"token punctuation\">.</span>decompress<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>dec_compress_elf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrap_elf'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>dec_elf<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>解密完成后，我们发现 <code>0x1a0eb9</code>  应该表示解压缩之后数据的大小</p>\n<p><img data-src=\"/360-jiagu/image-20240220214503336.png\" alt=\"image-20240220214503336\" style=\"aspect-ratio:926 / 305;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240220131405321.png\" alt=\"image-20240220131405321\" style=\"aspect-ratio:831 / 258;\"></p>\n<p><code>wrap_elf</code>  的前半部分是一大堆莫名其妙有很多 <code>D3</code>  的东西，但是看到中间还是发现了壳 ELF 的身影</p>\n<p><img data-src=\"/360-jiagu/image-20240219203139130.png\" alt=\"image-20240219203139130\" style=\"aspect-ratio:811 / 423;\"></p>\n<p>我们以 <code>.ELF</code>  为标志将这两部分分离一下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrap_elf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    wrap_elf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ELF_magic <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ELF_magic<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> wrap_elf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ELF_magic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ELF_magic<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrap_elf_part1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrap_elf_part2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr></table></figure><p>跟着函数调用链来到 <code>call69:sub_5B08</code> , 这里又出现了 <code>0x38</code> , 并且 <code>word_38</code>  跳转过去的值为 6</p>\n<p><img data-src=\"/360-jiagu/image-20240220000932490.png\" alt=\"image-20240220000932490\" style=\"aspect-ratio:677 / 365;\"></p>\n<p>这正好和 <code>phentsize</code>  和 <code>phnum</code>  的值相对应</p>\n<p><img data-src=\"/360-jiagu/image-20240220001104708.png\" alt=\"image-20240220001104708\" style=\"aspect-ratio:1079 / 51;\"></p>\n<p>所以可想而知，这又是一个关键点了，往下看一下代码，发现了循环异或，那我们不妨用 frida 把 <code>v4</code>  的值 hook 下来看看是什么</p>\n<p><img data-src=\"/360-jiagu/image-20240220001342895.png\" alt=\"image-20240220001342895\" style=\"aspect-ratio:641 / 741;\"></p>\n<p>v4 的值出现了那么多的 <code>d3</code></p>\n<p><img data-src=\"/360-jiagu/image-20240220001528743.png\" alt=\"image-20240220001528743\" style=\"aspect-ratio:1200 / 470;\"></p>\n<p>而这就是 <code>wrap_elf</code>  的前半部分那一大堆我们看不懂的字节</p>\n<p><img data-src=\"/360-jiagu/image-20240220012621743.png\" alt=\"image-20240220012621743\" style=\"aspect-ratio:794 / 494;\"></p>\n<p>接下来用来解密的循环就是一个 arm64 的 neon 运算</p>\n<p><img data-src=\"/360-jiagu/image-20240220003908902.png\" alt=\"image-20240220003908902\" style=\"aspect-ratio:645 / 327;\"></p>\n<p>官网可以找到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9hcmNoaXRlY3R1cmVzL2luc3RydWN0aW9uLXNldHMvaW50cmluc2ljcy8jcT12ZHVwcV9uX3M4\"> vdupq_n_s8</span> 和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9hcmNoaXRlY3R1cmVzL2luc3RydWN0aW9uLXNldHMvaW50cmluc2ljcy8jcT12ZW9ycV9zOA==\"> veorq_s8</span>, 根据函数描述可以知道这里用向量运算，把向量中的每一个元素都异或了 <code>0xd3</code></p>\n<p><img data-src=\"/360-jiagu/image-20240220004233903.png\" alt=\"image-20240220004233903\" style=\"aspect-ratio:1225 / 511;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240220004029770.png\" alt=\"image-20240220004029770\" style=\"aspect-ratio:1232 / 517;\"></p>\n<p>对 <code>sub_5B08</code>  进行分析之后，我们便可以知道 <code>wrap_elf_part1</code>  的读取方式是第一个字节表示被异或的数字，这里是 <code>0xD3</code> , 后面的四个字节表示一个段的长度，随后读取指定长度的字节并异或，之后再读取四个字节获取到下一个段的长度，以此类推，直到读取到文件末尾</p>\n<p><img data-src=\"/360-jiagu/image-20240220012939262.png\" alt=\"image-20240220012939262\" style=\"aspect-ratio:800 / 628;\"></p>\n<p>在 <code>sub_5B08</code>  的最后，因为 <code>v31</code> , <code>v19</code> , <code>v43</code> , <code>v7</code>  代表对应的数据组的长度，所以这里共有四个数据组，而为了表示每一个数据组的长度共需占用 <code>4*4=16</code>  字节，并且文件开头还有 <code>1</code>  位的异或值，于是这些长度加起来， <code>*(a1 + 0x98)</code>  的偏移就来到了主 ELF 的魔术头 <code>.ELF</code>  的位置了</p>\n<p><img data-src=\"/360-jiagu/image-20240220013039190.png\" alt=\"image-20240220013039190\" style=\"aspect-ratio:630 / 66;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240220013502056.png\" alt=\"image-20240220013502056\" style=\"aspect-ratio:900 / 363;\"></p>\n<p>我们可以在 <code>sub_5B08</code>  中为变量 <code>a1</code>  定义一个结构体，成员分别表示数据组的 1,2,3,4 这四个部分，这样我们就知道这四个部分分别被用到什么地方了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">deal_extra</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> blank<span class=\"token punctuation\">[</span><span class=\"token number\">72</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> phdr_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> blank2<span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>main_elf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240220023743626.png\" alt=\"image-20240220023743626\" style=\"aspect-ratio:656 / 200;\"></p>\n<p>接下来再捋一下函数的调用链 <code>sub_49F0-&gt;sub_5478(&amp;v16, a1, v4)-&gt;sub_5B08(a1, a2, a3)</code> , 在 <code>sub_5B08</code>  中，我们把 <code>a1</code>  的类型定义成了 <code>deal_extra</code> , 所以理所应当的，我们也把 <code>sub_49F0</code>  中的变量 <code>v16</code>  的类型定义为 <code>deal_extra</code></p>\n<p>在 <code>sub_49F0</code>  中我们发现成员 <code>extra_part</code>  赋值给了变量 <code>v7</code> , 所以我们也为 <code>v7</code>  建立一个结构体让 v7 的偏移可以对应这些变量</p>\n<p><img data-src=\"/360-jiagu/image-20240220024254105.png\" alt=\"image-20240220024254105\" style=\"aspect-ratio:507 / 288;\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">deal_extra_B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> blank<span class=\"token punctuation\">[</span><span class=\"token number\">232</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> blank1<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">char</span> blank2<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span> blank3<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>extra_part3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240220024130734.png\" alt=\"image-20240220024130734\" style=\"aspect-ratio:595 / 331;\"></p>\n<p>这样做有什么意义呢？</p>\n<p>我们发现变量 <code>v7</code>  分别被传入到了 <code>sub_3C94</code>  和 <code>sub_4918</code>  中，我们分别进去看看</p>\n<p><img data-src=\"/360-jiagu/image-20240220024433454.png\" alt=\"image-20240220024433454\" style=\"aspect-ratio:785 / 287;\"></p>\n<p>在 <code>sub_3C94</code>  中解析了 <code>extra_part4</code> , 显而易见，这个 <code>switch</code>  是用来处理动态链接库的，即 <code>extra_part4</code>  对应 <code>.dynamic</code>  段</p>\n<p><img data-src=\"/360-jiagu/image-20240220024522541.png\" alt=\"image-20240220024522541\" style=\"aspect-ratio:801 / 716;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240220024831366.png\" alt=\"image-20240220024831366\" style=\"aspect-ratio:1097 / 757;\"></p>\n<p>在 <code>sub_4918</code>  中， <code>extra_part2</code>  和 <code>extra_part3</code>  被传入到 <code>sub_4000</code>  中</p>\n<p><img data-src=\"/360-jiagu/image-20240220024916186.png\" alt=\"image-20240220024916186\" style=\"aspect-ratio:972 / 248;\"></p>\n<p>而这个函数中的 <code>switch</code>  是用来处理重定位的，因为重定位主要有基址重定位和符号重定位，这两个的值分别是 <code>0x403</code>  和 <code>0x402</code></p>\n<p>所以 <code>extra_part2</code>  和 <code>extra_part3</code>  分别对应着 <code>.rela.dyn</code>  (403 重定位) 和 <code>.rela.plt</code>  (402 重定位)</p>\n<p><img data-src=\"/360-jiagu/image-20240220025025814.png\" alt=\"image-20240220025025814\" style=\"aspect-ratio:713 / 577;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240220145850194.png\" alt=\"image-20240220145850194\" style=\"aspect-ratio:1100 / 208;\"></p>\n<p>而之后 <code>extra_part1</code>  被传入到了 <code>sub_5E6C</code>  中</p>\n<p><img data-src=\"/360-jiagu/image-20240220025453629.png\" alt=\"image-20240220025453629\" style=\"aspect-ratio:1189 / 232;\"></p>\n<p>而来到 <code>sub_5E6C</code>  也来到了我们最开始分析的起点 (兜兜转转又回来了), 所以 <code>extra_part1</code>  表示 <code>program header table</code></p>\n<p><img data-src=\"/360-jiagu/image-20240220025540021.png\" alt=\"image-20240220025540021\" style=\"aspect-ratio:1270 / 693;\"></p>\n<p>至此为止，四个数据组所对应的段都分析完成</p>\n<ul>\n<li><code>数据组1</code>  表示 <code>program header table</code></li>\n<li><code>数据组2</code>  表示 <code>.rela.plt</code></li>\n<li><code>数据组3</code>  表示 <code>.rela.dyn</code></li>\n<li><code>数据组4</code>  表示 <code>.dynamic</code></li>\n</ul>\n<p>所以接下来，写个脚本把这四个数据组给分离成单独的文件咯</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> copy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> zlib</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RC4</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    S <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># KSA Phase</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># PRGA Phase</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    i <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        out<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ch <span class=\"token operator\">^</span> S<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> out</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RC4decrypt</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> RC4<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>wrap_elf_start <span class=\"token operator\">=</span> <span class=\"token number\">0x1e270</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wrap_elf_size <span class=\"token operator\">=</span> <span class=\"token number\">0xb8010</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b\"vUV4#\\x91#SVt\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.oacia.apk_protect/assets/libjiagu_a64.so'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    wrap_elf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 对密文进行解密</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>dec_compress_elf <span class=\"token operator\">=</span> RC4decrypt<span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">[</span>wrap_elf_start<span class=\"token punctuation\">:</span>wrap_elf_start <span class=\"token operator\">+</span> wrap_elf_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>dec_elf <span class=\"token operator\">=</span> zlib<span class=\"token punctuation\">.</span>decompress<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>dec_compress_elf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrap_elf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>dec_elf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">part</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">b''</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        self<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>extra_part <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>part<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>seg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"phdr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".rela.plt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".rela.dyn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".dynamic\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>v_xor <span class=\"token operator\">=</span> dec_elf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>dec_elf<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span>index <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    extra_part<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    extra_part<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">^</span> v_xor<span class=\"token punctuation\">,</span> dec_elf<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span>index <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    extra_part<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    index <span class=\"token operator\">+=</span> size</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> extra_part<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>value<span class=\"token operator\">!=</span><span class=\"token string\">b''</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        filename <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"libjiagu.so_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">] get </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, size: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>于是我们得到了这四个文件</p>\n<p><img data-src=\"/360-jiagu/image-20240220220013192.png\" alt=\"image-20240220220013192\" style=\"aspect-ratio:725 / 114;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240220220022117.png\" alt=\"image-20240220220022117\" style=\"aspect-ratio:930 / 150;\"></p>\n<h1 id=\"主elf导入导出表修复\"><a class=\"anchor\" href=\"#主elf导入导出表修复\">#</a> 主 ELF 导入导出表修复</h1>\n<p>需要被修复的主 ELF 是我们在从 <code>assets/libjiagu_a64.so</code>  利用 <code>RC4</code>  和 <code>decompress</code>  解密出来的文件的后半部分那个 ELF</p>\n<p>可以写个 python 脚本分离出后面的 ELF</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrap_elf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    wrap_elf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ELF_magic <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x46</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ELF_magic<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> wrap_elf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ELF_magic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ELF_magic<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libjiagu_0xe7000.so'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>wrap_elf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr></table></figure><p>现在我们拿到了主 ELF 的四个重要的数据段，分别是 <code>phdr</code> , <code>.rela.plt</code> , <code>.rela.dyn</code> , <code>.dynamic</code> , 那么接下来需要做的工作就是修复主 ELF 的导入导出表了，不然导入导出函数都看不见怎么逆嘞～</p>\n<p>在使用自实现 linker 加固 so 时， <code>phdr</code> , <code>.rela.plt</code> , <code>.rela.dyn</code> , <code>.dynamic</code>  这四个段是从待加固的 so 中提取出来，然后加密存储到其他位置，<strong> 原来的位置会使用无关字节直接覆盖</strong></p>\n<p>等到需要为加固的 so 进行预链接和重定位的工作时，才将这些段解密并通过自己实现的预链接和重定位代码，让待加固的 so 可以正确的被壳 so 加载出来</p>\n<p>我们进行修复的方法其实就藏在这句话中 <code>原来的位置会使用无关字节直接覆盖</code> ，我们可以将分离出来的这四个段再塞回到原来的位置</p>\n<p><code>自实现linker加固so</code>  的加固方案既然都把那四个段加密存到其他地方了，那怎么不直接把原来的四个段直接删除而是用无关字节覆盖呢？</p>\n<p>因为直接把段删除掉的话，会影响了一整个 ELF 文件的布局，偏移就会变得和原先不一样，然后产生各种奇奇怪怪的问题</p>\n<blockquote>\n<p>在 010editor 中，按下 <code>ctrl+shift+C</code>  可以复制整块内存，按下 <code>ctrl+shift+V</code>  可以粘贴整块内存</p>\n</blockquote>\n<ol>\n<li>\n<p>修复 <code>program header table</code></p>\n<p>复制 <code>libjiagu.so_0x150_phdr</code>  的所有字节，然后来到 <code>libjiagu_0xe7000.so</code>  中选中 <code>struct program_header_table</code>  粘贴</p>\n<p><img data-src=\"/360-jiagu/image-20240220223148864.png\" alt=\"image-20240220223148864\" style=\"aspect-ratio:835 / 788;\"></p>\n<p>随后按下 <code>F5</code>  刷新模板</p>\n</li>\n<li>\n<p>修复 <code>.dynamic</code></p>\n<p><code>program header table</code>  的 <code>(RW_) Dynamic Segment</code>  的 <code>p_offset</code>  指向 <code>.dynamic</code>  段的位置<br>\n<img data-src=\"/360-jiagu/image-20240220223253986.png\" alt=\"image-20240220223253986\" style=\"aspect-ratio:918 / 471;\"><br>\n 跳转到该位置，复制 <code>libjiagu.so_0x1b0_.dynamic</code>  的内容并粘贴到这个位置</p>\n</li>\n<li>\n<p>修复重定位表<br>\n我们需要通过 <code>.dynamic</code>  段的 <code>d_tag</code>  字段来直到重定位表的位置，下面是 AOSP 中 <code>d_tag</code>  的宏定义<br>\n<img data-src=\"/360-jiagu/image-20240220172348458.png\" alt=\"image-20240220172348458\" style=\"aspect-ratio:480 / 708;\"></p>\n</li>\n</ol>\n<p>所有的 <code>d_tag</code>  标志对应的含义可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvRTI0ODQ3XzAxL2h0bWwvRTIyMTk2L3RvYy5odG1s\"> ORACLE 链接程序和库指南 </span>中找到</p>\n<p>对于我们修复主 ELF 比较重要的 <code>tag</code>  有</p>\n<table>\n<thead>\n<tr>\n<th>d_tag</th>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DT_JMPREL</td>\n<td>0x17</td>\n<td><code>.rela.plt</code>  在文件中的偏移</td>\n</tr>\n<tr>\n<td>DT_PLTRELSZ</td>\n<td>0x2</td>\n<td><code>.rela.plt</code>  的大小</td>\n</tr>\n<tr>\n<td>DT_RELA</td>\n<td>0x7</td>\n<td><code>.rela.dyn</code>  在文件中的偏移</td>\n</tr>\n<tr>\n<td>DT_RELASZ</td>\n<td>0x8</td>\n<td><code>.rela.dyn</code>  的大小</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以在 <code>.dynamic</code>  中发现这些 <code>tag</code>  以及对应的值</p>\n<p><img data-src=\"/360-jiagu/image-20240221131839098.png\" alt=\"image-20240221131839098\" style=\"aspect-ratio:1139 / 558;\"></p>\n<p>看看这两个大小分别是 <code>0x1650</code>  和 <code>0x25188</code> , 这不就和我们刚刚分离出来的文件大小一模一样嘛，说明我们离修复完成不远了</p>\n<p><img data-src=\"/360-jiagu/image-20240220224638674.png\" alt=\"image-20240220224638674\" style=\"aspect-ratio:1175 / 182;\"></p>\n<p>然后就是和之前一样，跳转到 <code>.rela.plt</code>  和 <code>.rela.dyn</code>  的对应地址，然后把这些段本来的数据粘贴进去</p>\n<p>现在我们就修复好啦，拿 ida 打开主 ELF 看看，满满的都是符号！</p>\n<p><img data-src=\"/360-jiagu/image-20240221131944227.png\" alt=\"image-20240221131944227\" style=\"aspect-ratio:1920 / 1080;\"></p>\n<p>随便找个导入函数交叉引用看看，一切正常 <code>(●'◡'●)</code></p>\n<p><img data-src=\"/360-jiagu/image-20240221132044506.png\" alt=\"image-20240221132044506\" style=\"aspect-ratio:1920 / 1080;\"></p>\n<p>为了方便起见，我们可以将主 ELF 的基址定义成在其在壳 ELF 的偏移 <code>0xe7000</code>  方便后续的分析</p>\n<h1 id=\"主dex解密流程初步分析\"><a class=\"anchor\" href=\"#主dex解密流程初步分析\">#</a> 主 DEX 解密流程初步分析</h1>\n<p>还记得在<strong>加固壳反调试初步分析</strong>中，我们拿到了未解密的 dex 嘛</p>\n<p><img data-src=\"/360-jiagu/image-20240220231727044.png\" alt=\"image-20240220231727044\" style=\"aspect-ratio:789 / 448;\"></p>\n<p>那么接下来有个问题就是，这个未解密的 dex 究竟藏在了 apk 的什么地方呢？</p>\n<p>我将未加固的 apk 解压出来，然后用 7zip 压缩其中的 dex, 发现大小依然有 2.8MB</p>\n<p><img data-src=\"/360-jiagu/image-20240220231901275.png\" alt=\"image-20240220231901275\" style=\"aspect-ratio:602 / 59;\"></p>\n<p>随后我将经过 360 加固之后的 apk 解压出来，按大小对文件进行排序之后发现，最大的文件就只有这个壳 <code>classes.dex</code> , 而别的文件甚至连 1MB 都没到，总不可能压缩率可以高到这种地步吧</p>\n<p><img data-src=\"/360-jiagu/image-20240220232029056.png\" alt=\"image-20240220232029056\" style=\"aspect-ratio:465 / 256;\"></p>\n<p>所以我们打开 <code>classes.dex</code>  看看，在这个 <code>classes.dex</code>  的末尾，果然藏着一大堆的数据</p>\n<p><img data-src=\"/360-jiagu/image-20240220232313676.png\" alt=\"image-20240220232313676\" style=\"aspect-ratio:790 / 514;\"></p>\n<p>而末尾的数据是由 <code>71 68 00 01</code>  和我们之前看到的加密的 dex 一模一样</p>\n<p>接下来我们继续用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29hY2lhL3N0YWxrZXJfdHJhY2Vfc28=\"> stalker_trace_so</span> 去看看补充上主 ELF 的函数地址以及名称之后的函数调用链是什么样子的，首先在主 ELF 中运行插件 <code>Edit-&gt;Plugins-&gt;stalker_trace_so</code></p>\n<p>之后同样的，我们需要将 <code>so_name</code>  改成 <code>libjiagu_64.so</code> , 特别注意的是，这里我们需要把壳 ELF 的 <code>func_addr</code>  和 <code>func_name</code>  给复制过来，同时使用 <code>concat</code>  方法将主 ELF 和壳 ELF 的函数地址和函数名拼接成一个新的数组</p>\n<p><img data-src=\"/360-jiagu/image-20240221141755126.png\" alt=\"image-20240221141755126\" style=\"aspect-ratio:1201 / 264;\"></p>\n<p>之前替换 <code>/proc/self/maps</code>  来实现初步反调试的 js 函数 <code>hook_proc_self_maps</code>  也需要同时执行</p>\n<p>输出结果如下， <code>KEkeELF</code>  标志表示壳 ELF, <code>mainELF</code>  表示主 ELF,(为什么是 <code>KEke</code> , 只是为了对齐看着舒服：))</p>\n<p>要判断调用的函数在哪个 ELF 里面，在 <code>trace_so()</code>  里面稍作修改判断一下范围可以了</p>\n<p><img data-src=\"/360-jiagu/image-20240221142103021.png\" alt=\"image-20240221142103021\" style=\"aspect-ratio:1414 / 490;\"></p>\n<p>打印出来的结果如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call1<span class=\"token operator\">:</span><span class=\"token function\">JNI_OnLoad</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call2<span class=\"token operator\">:</span><span class=\"token class-name\">j_interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call3<span class=\"token operator\">:</span><span class=\"token class-name\">interpreter_wrap_int64_t</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call4<span class=\"token operator\">:</span><span class=\"token function\">getenv</span>                    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call5<span class=\"token operator\">:</span><span class=\"token function\">sub_13908</span>                 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call6<span class=\"token operator\">:</span><span class=\"token function\">inotify_add_watch</span>         </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call7<span class=\"token operator\">:</span><span class=\"token function\">sub_11220</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call8<span class=\"token operator\">:</span><span class=\"token function\">fopen</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call9<span class=\"token operator\">:</span><span class=\"token function\">sub_9DD8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call10<span class=\"token operator\">:</span><span class=\"token function\">sub_E3E0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call11<span class=\"token operator\">:</span><span class=\"token function\">strtol</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call12<span class=\"token operator\">:</span><span class=\"token function\">feof</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call13<span class=\"token operator\">:</span><span class=\"token function\">raise</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call14<span class=\"token operator\">:</span><span class=\"token function\">memset</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call15<span class=\"token operator\">:</span><span class=\"token function\">sub_C918</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call16<span class=\"token operator\">:</span><span class=\"token function\">sub_9988</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call17<span class=\"token operator\">:</span><span class=\"token function\">sub_9964</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call18<span class=\"token operator\">:</span><span class=\"token function\">sub_9AC4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call19<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call20<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call21<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif_machdep</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call22<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif_machdep</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call23<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_call</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call24<span class=\"token operator\">:</span><span class=\"token function\">ffi_call</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call25<span class=\"token operator\">:</span><span class=\"token function\">sub_1674C</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call26<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_call_SYSV</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call27<span class=\"token operator\">:</span><span class=\"token function\">ffi_call_SYSV</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call28<span class=\"token operator\">:</span><span class=\"token function\">sub_167BC</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call29<span class=\"token operator\">:</span><span class=\"token function\">sub_1647C</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call30<span class=\"token operator\">:</span><span class=\"token function\">sub_163DC</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call31<span class=\"token operator\">:</span><span class=\"token function\">sub_9900</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call32<span class=\"token operator\">:</span><span class=\"token function\">sub_94BC</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call33<span class=\"token operator\">:</span><span class=\"token function\">inotify_init</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call34<span class=\"token operator\">:</span><span class=\"token function\">fmod</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call35<span class=\"token operator\">:</span><span class=\"token function\">strncpy</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call36<span class=\"token operator\">:</span><span class=\"token function\">_Z9__arm_a_1P7_JavaVMP7_JNIEnvPvRi</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call37<span class=\"token operator\">:</span><span class=\"token function\">sub_9E58</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call38<span class=\"token operator\">:</span><span class=\"token function\">sub_999C</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call39<span class=\"token operator\">:</span><span class=\"token function\">sub_10964</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call40<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_1</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call41<span class=\"token operator\">:</span><span class=\"token function\">lseek</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call42<span class=\"token operator\">:</span><span class=\"token function\">sub_96E0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call43<span class=\"token operator\">:</span><span class=\"token function\">sub_8000</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call44<span class=\"token operator\">:</span><span class=\"token function\">dlopen</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call45<span class=\"token operator\">:</span><span class=\"token function\">sub_60E0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call46<span class=\"token operator\">:</span><span class=\"token function\">sub_6544</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call47<span class=\"token operator\">:</span><span class=\"token function\">sub_4B54</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call48<span class=\"token operator\">:</span><span class=\"token function\">sub_6128</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call49<span class=\"token operator\">:</span><span class=\"token function\">_ZN9__arm_c_19__arm_c_0Ev</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call50<span class=\"token operator\">:</span><span class=\"token function\">sub_A3EC</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call51<span class=\"token operator\">:</span><span class=\"token function\">sub_99CC</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call52<span class=\"token operator\">:</span><span class=\"token function\">sub_9944</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call53<span class=\"token operator\">:</span><span class=\"token function\">sub_6484</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call54<span class=\"token operator\">:</span><span class=\"token function\">sub_6590</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call55<span class=\"token operator\">:</span><span class=\"token function\">prctl</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call56<span class=\"token operator\">:</span><span class=\"token function\">sub_6698</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call57<span class=\"token operator\">:</span><span class=\"token function\">sub_9FFC</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call58<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_3</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call59<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_2</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call60<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_0</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call61<span class=\"token operator\">:</span><span class=\"token function\">sub_9A90</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call62<span class=\"token operator\">:</span><span class=\"token function\">sub_5F20</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call63<span class=\"token operator\">:</span><span class=\"token function\">sub_6044</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call64<span class=\"token operator\">:</span><span class=\"token function\">sub_3574</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call65<span class=\"token operator\">:</span><span class=\"token function\">uncompress</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call66<span class=\"token operator\">:</span><span class=\"token function\">sub_49F0</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call67<span class=\"token operator\">:</span><span class=\"token function\">sub_5400</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call68<span class=\"token operator\">:</span><span class=\"token function\">sub_5478</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call69<span class=\"token operator\">:</span><span class=\"token function\">sub_5B08</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call70<span class=\"token operator\">:</span><span class=\"token function\">sub_5650</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call71<span class=\"token operator\">:</span><span class=\"token function\">sub_580C</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call72<span class=\"token operator\">:</span><span class=\"token function\">open</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call73<span class=\"token operator\">:</span><span class=\"token function\">atoi</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call74<span class=\"token operator\">:</span><span class=\"token function\">sub_3C94</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call75<span class=\"token operator\">:</span><span class=\"token function\">strncmp</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call76<span class=\"token operator\">:</span><span class=\"token function\">sub_4918</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call77<span class=\"token operator\">:</span><span class=\"token function\">sub_4000</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call78<span class=\"token operator\">:</span><span class=\"token function\">sub_41B4</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call79<span class=\"token operator\">:</span><span class=\"token function\">sub_35AC</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call80<span class=\"token operator\">:</span><span class=\"token function\">sigaction</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call81<span class=\"token operator\">:</span><span class=\"token function\">sub_5E6C</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call82<span class=\"token operator\">:</span><span class=\"token function\">sub_5444</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call83<span class=\"token operator\">:</span><span class=\"token function\">sub_11603C</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call84<span class=\"token operator\">:</span><span class=\"token function\">j__Znwm</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call85<span class=\"token operator\">:</span><span class=\"token function\">_Znwm</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call86<span class=\"token operator\">:</span><span class=\"token function\">malloc</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call87<span class=\"token operator\">:</span><span class=\"token function\">__cxa_atexit</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call88<span class=\"token operator\">:</span><span class=\"token function\">sub_1160B4</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call89<span class=\"token operator\">:</span><span class=\"token function\">sub_1160C4</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call90<span class=\"token operator\">:</span><span class=\"token function\">strlen</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call91<span class=\"token operator\">:</span><span class=\"token function\">memcpy</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call92<span class=\"token operator\">:</span><span class=\"token function\">sub_1161FC</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call93<span class=\"token operator\">:</span><span class=\"token function\">sub_1164AC</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call94<span class=\"token operator\">:</span><span class=\"token function\">sub_1164D8</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call95<span class=\"token operator\">:</span><span class=\"token function\">sub_116528</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call96<span class=\"token operator\">:</span><span class=\"token function\">sub_1165C8</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call97<span class=\"token operator\">:</span><span class=\"token function\">sub_1A32C0</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call98<span class=\"token operator\">:</span><span class=\"token function\">sub_1A3150</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call99<span class=\"token operator\">:</span><span class=\"token function\">sub_1A3204</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call100<span class=\"token operator\">:</span><span class=\"token function\">sub_1166FC</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call101<span class=\"token operator\">:</span><span class=\"token function\">sub_116728</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call102<span class=\"token operator\">:</span><span class=\"token function\">sub_116750</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call103<span class=\"token operator\">:</span><span class=\"token function\">sub_116830</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call104<span class=\"token operator\">:</span><span class=\"token function\">sub_116BA0</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call105<span class=\"token operator\">:</span><span class=\"token function\">sub_633C</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call106<span class=\"token operator\">:</span><span class=\"token function\">sub_8130</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call107<span class=\"token operator\">:</span><span class=\"token function\">sub_4C70</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call108<span class=\"token operator\">:</span><span class=\"token function\">sub_825C</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call109<span class=\"token operator\">:</span><span class=\"token function\">sub_8B50</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call110<span class=\"token operator\">:</span><span class=\"token function\">sub_8ED4</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call111<span class=\"token operator\">:</span><span class=\"token function\">sub_8430</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call112<span class=\"token operator\">:</span><span class=\"token function\">JNI_OnLoad</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call113<span class=\"token operator\">:</span><span class=\"token class-name\">j_interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call114<span class=\"token operator\">:</span><span class=\"token class-name\">interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call115<span class=\"token operator\">:</span><span class=\"token function\">interpreter_wrap_int64_t_bridge</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call116<span class=\"token operator\">:</span><span class=\"token function\">sub_9D60</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call117<span class=\"token operator\">:</span><span class=\"token function\">sub_1B3F0C</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call118<span class=\"token operator\">:</span><span class=\"token function\">gettimeofday</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call119<span class=\"token operator\">:</span><span class=\"token function\">sub_11BD9C</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call120<span class=\"token operator\">:</span><span class=\"token function\">sub_1182D8</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call121<span class=\"token operator\">:</span><span class=\"token function\">sub_123970</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call122<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6448</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call123<span class=\"token operator\">:</span><span class=\"token function\">getenv</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call124<span class=\"token operator\">:</span><span class=\"token function\">sub_11F130</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call125<span class=\"token operator\">:</span><span class=\"token function\">sub_12047C</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call126<span class=\"token operator\">:</span><span class=\"token function\">j__ZdlPv</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call127<span class=\"token operator\">:</span><span class=\"token function\">_ZdlPv</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call128<span class=\"token operator\">:</span><span class=\"token function\">free</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call129<span class=\"token operator\">:</span><span class=\"token function\">sub_1427E8</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call130<span class=\"token operator\">:</span><span class=\"token function\">dlopen</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call131<span class=\"token operator\">:</span><span class=\"token function\">sub_11BDA8</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call132<span class=\"token operator\">:</span><span class=\"token function\">sub_11BE58</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call133<span class=\"token operator\">:</span><span class=\"token function\">sub_11F69C</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call134<span class=\"token operator\">:</span><span class=\"token function\">sub_117BE0</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call135<span class=\"token operator\">:</span><span class=\"token function\">sub_117CA0</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call136<span class=\"token operator\">:</span><span class=\"token function\">fopen</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call137<span class=\"token operator\">:</span><span class=\"token function\">sub_117E90</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call138<span class=\"token operator\">:</span><span class=\"token function\">sub_14285C</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call139<span class=\"token operator\">:</span><span class=\"token function\">sub_1429CC</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call140<span class=\"token operator\">:</span><span class=\"token function\">sub_11C1AC</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call141<span class=\"token operator\">:</span><span class=\"token function\">sub_11C1B4</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call142<span class=\"token operator\">:</span><span class=\"token function\">sub_11C210</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call143<span class=\"token operator\">:</span><span class=\"token function\">sub_166C4</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call144<span class=\"token operator\">:</span><span class=\"token function\">memcpy</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call145<span class=\"token operator\">:</span><span class=\"token function\">sub_123324</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call146<span class=\"token operator\">:</span><span class=\"token function\">sub_1205A0</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call147<span class=\"token operator\">:</span><span class=\"token function\">sub_11F768</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call148<span class=\"token operator\">:</span><span class=\"token function\">memcmp</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call149<span class=\"token operator\">:</span><span class=\"token function\">opendir</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call150<span class=\"token operator\">:</span><span class=\"token function\">closedir</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call151<span class=\"token operator\">:</span><span class=\"token function\">sub_11859C</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call152<span class=\"token operator\">:</span><span class=\"token function\">sub_11C268</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call153<span class=\"token operator\">:</span><span class=\"token function\">sub_11C300</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call154<span class=\"token operator\">:</span><span class=\"token function\">sub_117B68</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call155<span class=\"token operator\">:</span><span class=\"token function\">sub_1186B8</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call156<span class=\"token operator\">:</span><span class=\"token function\">sub_143964</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call157<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66A8</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call158<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_lock</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call159<span class=\"token operator\">:</span><span class=\"token function\">sub_142EA0</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call160<span class=\"token operator\">:</span><span class=\"token function\">sub_143A38</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call161<span class=\"token operator\">:</span><span class=\"token function\">sub_11CF8C</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call162<span class=\"token operator\">:</span><span class=\"token function\">sub_131D58</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call163<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66D0</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call164<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_unlock</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call165<span class=\"token operator\">:</span><span class=\"token function\">sub_1178E8</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call166<span class=\"token operator\">:</span><span class=\"token function\">sub_13D70C</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call167<span class=\"token operator\">:</span><span class=\"token function\">sub_19F984</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call168<span class=\"token operator\">:</span><span class=\"token function\">sub_11F1C8</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call169<span class=\"token operator\">:</span><span class=\"token function\">atoi</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call170<span class=\"token operator\">:</span><span class=\"token function\">sub_12D2F8</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call171<span class=\"token operator\">:</span><span class=\"token function\">sub_17ABE8</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call172<span class=\"token operator\">:</span><span class=\"token function\">sub_172660</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call173<span class=\"token operator\">:</span><span class=\"token function\">sub_13BFF0</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call174<span class=\"token operator\">:</span><span class=\"token function\">sub_172AA4</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call175<span class=\"token operator\">:</span><span class=\"token function\">sub_13BD80</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call176<span class=\"token operator\">:</span><span class=\"token function\">sub_13BE2C</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call177<span class=\"token operator\">:</span><span class=\"token function\">sub_13BE4C</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call178<span class=\"token operator\">:</span><span class=\"token function\">memmove</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call179<span class=\"token operator\">:</span><span class=\"token function\">sub_13BE64</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call180<span class=\"token operator\">:</span><span class=\"token function\">sub_172D78</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call181<span class=\"token operator\">:</span><span class=\"token function\">sub_13E510</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call182<span class=\"token operator\">:</span><span class=\"token function\">sub_1926F0</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call183<span class=\"token operator\">:</span><span class=\"token function\">sub_13DB7C</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call184<span class=\"token operator\">:</span><span class=\"token function\">sub_1B7A08</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call185<span class=\"token operator\">:</span><span class=\"token function\">sub_1B7ABC</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call186<span class=\"token operator\">:</span><span class=\"token function\">pthread_cond_broadcast</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call187<span class=\"token operator\">:</span><span class=\"token function\">sub_12FA34</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call188<span class=\"token operator\">:</span><span class=\"token function\">sub_120664</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call189<span class=\"token operator\">:</span><span class=\"token function\">sub_1332B8</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call190<span class=\"token operator\">:</span><span class=\"token function\">sub_13E0F8</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call191<span class=\"token operator\">:</span><span class=\"token function\">sub_12743C</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call192<span class=\"token operator\">:</span><span class=\"token function\">sub_124C68</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call193<span class=\"token operator\">:</span><span class=\"token function\">sub_125DC4</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call194<span class=\"token operator\">:</span><span class=\"token function\">sub_124510</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call195<span class=\"token operator\">:</span><span class=\"token function\">sub_126888</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call196<span class=\"token operator\">:</span><span class=\"token function\">strdup</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call197<span class=\"token operator\">:</span><span class=\"token function\">sub_126920</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call198<span class=\"token operator\">:</span><span class=\"token function\">sub_122180</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call199<span class=\"token operator\">:</span><span class=\"token function\">sub_11BC1C</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call200<span class=\"token operator\">:</span><span class=\"token function\">sub_13DF34</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call201<span class=\"token operator\">:</span><span class=\"token function\">getpid</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call202<span class=\"token operator\">:</span><span class=\"token function\">memset</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call203<span class=\"token operator\">:</span><span class=\"token function\">snprintf</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call204<span class=\"token operator\">:</span><span class=\"token function\">sub_124FA0</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call205<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6498</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call206<span class=\"token operator\">:</span><span class=\"token function\">sub_1A0C88</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call207<span class=\"token operator\">:</span><span class=\"token function\">sub_217444</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call208<span class=\"token operator\">:</span><span class=\"token function\">sub_2175E0</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call209<span class=\"token operator\">:</span><span class=\"token function\">read</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call210<span class=\"token operator\">:</span><span class=\"token function\">strncmp</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call211<span class=\"token operator\">:</span><span class=\"token function\">close</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call212<span class=\"token operator\">:</span><span class=\"token function\">sub_1B578C</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call213<span class=\"token operator\">:</span><span class=\"token function\">j___self_lseek</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call214<span class=\"token operator\">:</span><span class=\"token function\">__self_lseek</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call215<span class=\"token operator\">:</span><span class=\"token function\">sub_1B586C</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call216<span class=\"token operator\">:</span><span class=\"token function\">j_j___read_self</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call217<span class=\"token operator\">:</span><span class=\"token function\">j___read_self</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call218<span class=\"token operator\">:</span><span class=\"token function\">__read_self</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call219<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6528</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call220<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6578</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call221<span class=\"token operator\">:</span><span class=\"token function\">mmap</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call222<span class=\"token operator\">:</span><span class=\"token function\">sub_1B5B50</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call223<span class=\"token operator\">:</span><span class=\"token function\">calloc</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call224<span class=\"token operator\">:</span><span class=\"token function\">memchr</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call225<span class=\"token operator\">:</span><span class=\"token function\">sub_1B5D04</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call226<span class=\"token operator\">:</span><span class=\"token function\">sub_1B5EC4</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call227<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6270</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call228<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6180</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call229<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6678</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call230<span class=\"token operator\">:</span><span class=\"token function\">inflateInit2_</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call231<span class=\"token operator\">:</span><span class=\"token function\">inflate</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call232<span class=\"token operator\">:</span><span class=\"token function\">inflateEnd</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call233<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6540</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call234<span class=\"token operator\">:</span><span class=\"token function\">munmap</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call235<span class=\"token operator\">:</span><span class=\"token function\">sub_1B56F8</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call236<span class=\"token operator\">:</span><span class=\"token function\">sub_19BC9C</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call237<span class=\"token operator\">:</span><span class=\"token function\">sub_19CCD4</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call238<span class=\"token operator\">:</span><span class=\"token function\">sub_12D470</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call239<span class=\"token operator\">:</span><span class=\"token function\">sub_142FE0</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call240<span class=\"token operator\">:</span><span class=\"token function\">sub_143008</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call241<span class=\"token operator\">:</span><span class=\"token function\">sub_142ABC</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call242<span class=\"token operator\">:</span><span class=\"token function\">sub_143848</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call243<span class=\"token operator\">:</span><span class=\"token function\">sub_143B48</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call244<span class=\"token operator\">:</span><span class=\"token function\">sub_143088</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call245<span class=\"token operator\">:</span><span class=\"token function\">sub_1222D0</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call246<span class=\"token operator\">:</span><span class=\"token function\">sub_14316C</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call247<span class=\"token operator\">:</span><span class=\"token function\">sub_142954</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call248<span class=\"token operator\">:</span><span class=\"token function\">_Z9__arm_a_2PcmS_Rii</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call249<span class=\"token operator\">:</span><span class=\"token function\">sub_142894</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call250<span class=\"token operator\">:</span><span class=\"token function\">sub_1428BC</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call251<span class=\"token operator\">:</span><span class=\"token function\">sub_127DCC</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call252<span class=\"token operator\">:</span><span class=\"token function\">sub_14292C</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call253<span class=\"token operator\">:</span><span class=\"token function\">sub_121B78</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call254<span class=\"token operator\">:</span><span class=\"token function\">sub_121BE0</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call255<span class=\"token operator\">:</span><span class=\"token function\">sub_123CE8</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call256<span class=\"token operator\">:</span><span class=\"token function\">sub_123BC0</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call257<span class=\"token operator\">:</span><span class=\"token function\">sub_11959C</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call258<span class=\"token operator\">:</span><span class=\"token function\">sub_1AC170</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call259<span class=\"token operator\">:</span><span class=\"token function\">pthread_create</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call260<span class=\"token operator\">:</span><span class=\"token function\">sub_1AC210</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call261<span class=\"token operator\">:</span><span class=\"token function\">sub_1B5DE4</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call262<span class=\"token operator\">:</span><span class=\"token function\">sub_1B60E8</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call263<span class=\"token operator\">:</span><span class=\"token function\">sub_19F7C4</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call264<span class=\"token operator\">:</span><span class=\"token function\">sub_1B2DC8</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call265<span class=\"token operator\">:</span><span class=\"token function\">sub_1B1CE8</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call266<span class=\"token operator\">:</span><span class=\"token function\">sub_1B0974</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call267<span class=\"token operator\">:</span><span class=\"token function\">sub_1AFE6C</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call268<span class=\"token operator\">:</span><span class=\"token function\">sub_126ED8</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call269<span class=\"token operator\">:</span><span class=\"token function\">sub_1AFE8C</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call270<span class=\"token operator\">:</span><span class=\"token function\">sub_1AFE90</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call271<span class=\"token operator\">:</span><span class=\"token function\">sub_1AB87C</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call272<span class=\"token operator\">:</span><span class=\"token function\">sub_1B26D4</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call273<span class=\"token operator\">:</span><span class=\"token function\">sub_1B26F4</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call274<span class=\"token operator\">:</span><span class=\"token function\">sub_1B27C8</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call275<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif_var</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call276<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif_var</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call277<span class=\"token operator\">:</span><span class=\"token function\">sub_1AAF48</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call278<span class=\"token operator\">:</span><span class=\"token function\">sub_1AAF54</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call279<span class=\"token operator\">:</span><span class=\"token function\">sub_2162D4</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call280<span class=\"token operator\">:</span><span class=\"token function\">sub_1B2898</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call281<span class=\"token operator\">:</span><span class=\"token function\">sub_1B2918</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call282<span class=\"token operator\">:</span><span class=\"token function\">sub_1ABE90</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call283<span class=\"token operator\">:</span><span class=\"token function\">sub_13E0EC</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call284<span class=\"token operator\">:</span><span class=\"token function\">sub_124900</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call285<span class=\"token operator\">:</span><span class=\"token function\">sub_1A0C34</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call286<span class=\"token operator\">:</span><span class=\"token function\">sub_217188</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call287<span class=\"token operator\">:</span><span class=\"token function\">j_strcmp</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call288<span class=\"token operator\">:</span><span class=\"token function\">strcmp</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call289<span class=\"token operator\">:</span><span class=\"token function\">sub_194514</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call290<span class=\"token operator\">:</span><span class=\"token function\">sub_1A2380</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call291<span class=\"token operator\">:</span><span class=\"token function\">sub_1A23CC</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call292<span class=\"token operator\">:</span><span class=\"token function\">sub_1A2718</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call293<span class=\"token operator\">:</span><span class=\"token function\">sub_1A2A94</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call294<span class=\"token operator\">:</span><span class=\"token function\">sub_1A25E0</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call295<span class=\"token operator\">:</span>sub_1A2984</pre></td></tr></table></figure><p>分析输出的结果，我们发现了三个有趣的函数 <code>inflateInit2_</code> , <code>inflate</code> , <code>inflateEnd</code> , 这不是 zlib 用来解压缩的函数嘛～</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call230<span class=\"token operator\">:</span><span class=\"token function\">inflateInit2_</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call231<span class=\"token operator\">:</span><span class=\"token function\">inflate</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call232<span class=\"token operator\">:</span>inflateEnd</pre></td></tr></table></figure><p>对 <code>inflateInit2_</code> 交叉引用，发现有两个函数调用了它</p>\n<p><img data-src=\"/360-jiagu/image-20240221160528463.png\" alt=\"image-20240221160528463\" style=\"aspect-ratio:879 / 220;\"></p>\n<p>那么要怎么知道是哪一个函数先调用的 <code>inflateInit2_</code> 呢？向上看看函数调用链就行了</p>\n<p>于是我们发现是 <code>sub_1B6270</code>  调用了 <code>inflateInit2_</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call227<span class=\"token operator\">:</span>sub_1B6270 <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call228<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6180</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call229<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6678</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call230<span class=\"token operator\">:</span><span class=\"token function\">inflateInit2_</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call231<span class=\"token operator\">:</span><span class=\"token function\">inflate</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call232<span class=\"token operator\">:</span>inflateEnd</pre></td></tr></table></figure><p>我们来到 <code>sub_1B6270</code> , 先到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hZGxlci96bGli\"> https://github.com/madler/zlib</span> 把 <code>zlib.h</code>  中的 <code>z_stream_s</code> , 导入的方法和之前一样</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">z_const</span> <span class=\"token expression\"><span class=\"token keyword\">const</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>  Byte<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 8 bits */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>   uInt<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 16 bits or more */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>  uLong<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 32 bits or more */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">z_stream_s</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    z_const Bytef <span class=\"token operator\">*</span>next_in<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* next input byte */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    uInt     avail_in<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* number of bytes available at next_in */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    uLong    total_in<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* total number of input bytes read so far */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Bytef    <span class=\"token operator\">*</span>next_out<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* next output byte will go here */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    uInt     avail_out<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* remaining free space at next_out */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    uLong    total_out<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* total number of bytes output so far */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> z_stream<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重定义 <code>s</code>  的类型为 <code>z_stream</code> , 这四个字段的含义如下</p>\n<ul>\n<li><code>s.next_in</code> : 压缩数据</li>\n<li><code>s.avail_in</code> : 压缩数据的长度</li>\n<li><code>s.next_out</code> : 解压后的数据</li>\n<li><code>s.avail_out</code> : 解压后数据的长度</li>\n</ul>\n<p><img data-src=\"/360-jiagu/image-20240221162607623.png\" alt=\"image-20240221162607623\" style=\"aspect-ratio:542 / 368;\"></p>\n<p>各个成员的偏移如图所示</p>\n<p><img data-src=\"/360-jiagu/image-20240221162856663.png\" alt=\"image-20240221162856663\" style=\"aspect-ratio:328 / 195;\"></p>\n<p>随后我们用 frida 去 hook 一下 <code>inflate</code>  函数看看解压缩之后的数据是什么</p>\n<p>这里有个技巧，就是如何可以 hook 到主 ELF 中的函数，因为在壳 ELF 加载进内存时，主 ELF 还没有被加载，所以假如在壳 ELF 通过 <code>android_dlopen_ext</code>  打开时我们进行 hook, 是会 hook 失败的</p>\n<p>那么如何才能获取到主 ELF 的 hook 时机呢？我们可以通过统计外部函数的调用次数来判断是否已经加载了主 ELF, 例如我这里，我通过 <code>zlib_count</code>  统计外部函数 <code>inflate</code>  调用次数，因为在壳 ELF 会使用 <code>uncompress</code>  调用一次 <code>inflate</code> , 所以当第二次调用 <code>inflate</code> , 我们就知道这肯定是主 ELF 调用的，所以我们也可以在这个位置放心大胆的 hook 了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">dump_memory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.oacia.apk_protect/\"</span> <span class=\"token operator\">+</span> filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> file_handle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file_handle <span class=\"token operator\">&amp;&amp;</span> file_handle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> libso_buffer <span class=\"token operator\">=</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">readByteArray</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span><span class=\"token function\">toUInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>libso_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        file_handle<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[dump]:\"</span><span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_zlib_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1B63F0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inflate result\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>next_in<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>next_out<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">dump_memory</span><span class=\"token punctuation\">(</span>next_out<span class=\"token punctuation\">,</span>avail_out<span class=\"token punctuation\">,</span><span class=\"token string\">\"dex001\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">var</span> zlib_count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">var</span> next_in<span class=\"token punctuation\">,</span>avail_in<span class=\"token punctuation\">,</span>next_out<span class=\"token punctuation\">,</span>avail_out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_zlib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"inflate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            zlib_count<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zlib_count<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token function\">hook_zlib_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            next_in<span class=\"token operator\">=</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            avail_in<span class=\"token operator\">=</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            next_out<span class=\"token operator\">=</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            avail_out<span class=\"token operator\">=</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span>next_in<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>              <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>              <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>              <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>              <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解压缩之后的输出如下，在输出的文件头，我们发现了 <code>dex035</code> , 所以我们把这块内存 dump 下来看看，使用上方的 <code>dump_memory(start,size,filename)</code>  函数即可</p>\n<p><img data-src=\"/360-jiagu/image-20240221170453897.png\" alt=\"image-20240221170453897\" style=\"aspect-ratio:1182 / 361;\"></p>\n<p>把这个解压缩之后的 dex 拖入到 jadx 里面，却发现这个类名怎么和壳 DEX 的类名一模一样，通过校验哈希发现 dump 下来的 dex 和壳 dex 其实是同一个文件</p>\n<p><img data-src=\"/360-jiagu/image-20240221170627481.png\" alt=\"image-20240221170627481\" style=\"aspect-ratio:386 / 224;\"></p>\n<p>我们在之前的分析中知道壳 dex 的末尾附带了一大串的加密数据，所以通过将这个解压缩得到了这个 dex, 就说明马上要进行加密主 DEX 的解密操作了</p>\n<p>解压缩的函数是 <code>sub_1B6270</code> , 接下来我们继续通过 <code>stalker_trace_so</code>  打印出来的内容，并利用交叉引用来追踪该函数的调用链</p>\n<p>就比如说对于函数 <code>sub_1B6270</code> , 它有两个交叉引用</p>\n<p><img data-src=\"/360-jiagu/image-20240221172325310.png\" alt=\"image-20240221172325310\" style=\"aspect-ratio:879 / 220;\"></p>\n<p>通过 <code>stalker_trace_so</code>  打印出来的函数调用链，我们发现是 <code>sub_1A0C88</code>  在 <code>sub_1B6270</code>  之前调用，所以函数的调用关系就是 <code>sub_1A0C88-&gt;sub_1B6270</code> , 以此类推</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call206<span class=\"token operator\">:</span><span class=\"token function\">sub_1A0C88</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call227<span class=\"token operator\">:</span>sub_1B6270</pre></td></tr></table></figure><p>所以一路跟过来之后，函数的调用链为 <code>sub_1332B8-&gt;sub_124FA0-&gt;sub_1A0C88-&gt;sub_1B6270-&gt;inflate</code> , <code>sub_1332B8</code>  函数之后就没有交叉引用了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call189<span class=\"token operator\">:</span><span class=\"token function\">sub_1332B8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call204<span class=\"token operator\">:</span><span class=\"token function\">sub_124FA0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call206<span class=\"token operator\">:</span><span class=\"token function\">sub_1A0C88</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call227<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6270</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call230<span class=\"token operator\">:</span><span class=\"token function\">inflateInit2_</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call231<span class=\"token operator\">:</span><span class=\"token function\">inflate</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call232<span class=\"token operator\">:</span>inflateEnd</pre></td></tr></table></figure><p>在这个函数中，我们发现了 <code>apk@classes.dex</code> , 而它的作用，正是为了找到已加载到内存且优化后的壳 dex</p>\n<p><img data-src=\"/360-jiagu/image-20240221172717168.png\" alt=\"image-20240221172717168\" style=\"aspect-ratio:1261 / 182;\"></p>\n<hr>\n<p>在<strong>加固壳反调试初步分析</strong>的后半部分，我们打印出了加固壳打开 dex 的堆栈回溯，现在我们直接跳转到相对应的地方看看</p>\n<p><img data-src=\"/360-jiagu/image-20240220225331054.png\" alt=\"image-20240220225331054\" style=\"aspect-ratio:878 / 513;\"></p>\n<p>我们到 <code>0x19b780</code>  看看，看起来是一个标准的打开并写入文件的函数</p>\n<p><img data-src=\"/360-jiagu/image-20240221133619261.png\" alt=\"image-20240221133619261\" style=\"aspect-ratio:983 / 665;\"></p>\n<p>随后对该函数进行交叉引用，我们发现 <code>sub_1332B8</code>  竟然调用了它，就在刚刚我们就分析出这个函数中可是同时也执行了从内存中获取壳 dex 的操作的呢</p>\n<p><img data-src=\"/360-jiagu/image-20240221173657553.png\" alt=\"image-20240221173657553\" style=\"aspect-ratio:879 / 258;\"></p>\n<p>我们对这两处调用都 hook 一下看看是什么情况，打印的结果如下，说明这两处调用都打开了 dex, <code>sub_1332B8</code>  中的前一个调用打开了 <code>classes.dex</code> , 后一个调用打开了 <code>classes2.dex</code>  和 <code>classes3.dex</code> , 而 <code>classes.dex</code>  文件中的内容就是加密的主 dex</p>\n<p><img data-src=\"/360-jiagu/image-20240221174419522.png\" alt=\"image-20240221174419522\" style=\"aspect-ratio:892 / 298;\"></p>\n<p>在创建完 <code>classes2.dex</code>  和 <code>classes3.dex</code> , 通过 hook 发现调用在调用 <code>sub_128D44</code>  之后进程就退出了</p>\n<p><img data-src=\"/360-jiagu/image-20240221180350649.png\" alt=\"image-20240221180350649\" style=\"aspect-ratio:1079 / 268;\"></p>\n<p>我们去 hook 一下 <code>sub_128D44</code>  这个函数，发现传入的参数 <code>v8</code>  正是加密的主 DEX</p>\n<p><img data-src=\"/360-jiagu/image-20240221184130805.png\" alt=\"image-20240221184130805\" style=\"aspect-ratio:1196 / 273;\"></p>\n<p>而 <code>sub_128D44</code>  函数是这个样子的，并且在壳 ELF 加载时启动 <code>stalker_trace_so</code>  的 <code>trace_so()</code>  函数所打印出的结果中，并没有这个函数的调用被打印出来</p>\n<p><img data-src=\"/360-jiagu/image-20240221180415665.png\" alt=\"image-20240221180415665\" style=\"aspect-ratio:925 / 106;\"></p>\n<p>这该怎么办呢？</p>\n<p>很简单，在调用 <code>sub_128D44</code>  的位置再去调用一次 <code>trace_so()</code>  函数从现在的位置开始打印函数的调用链不就行咯：)</p>\n<p><img data-src=\"/360-jiagu/image-20240221180705025.png\" alt=\"image-20240221180705025\" style=\"aspect-ratio:1218 / 366;\"></p>\n<p>函数调用关系如下，我们发现再 <code>mainELF</code>  调用完 <code>sub_128D44</code>  之后，通过一系列操作又回到了壳 ELF 中，最终调用 <code>raise</code>  导致进程退出</p>\n<p><img data-src=\"/360-jiagu/image-20240221185357390.png\" alt=\"image-20240221185357390\" style=\"aspect-ratio:721 / 605;\"></p>\n<p>然而，当我跳转到最后调用的几个函数时，可以说函数复杂到让人咋舌</p>\n<p><img data-src=\"/360-jiagu/image-20240222005607295.png\" alt=\"image-20240222005607295\" style=\"aspect-ratio:1351 / 497;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240222005639325.png\" alt=\"image-20240222005639325\" style=\"aspect-ratio:1619 / 626;\"></p>\n<p>这么复杂，是给人分析的吗！？所以我便卡在这里了很久</p>\n<p>我想了想现在摆在面前的有两条路，是和一眼望不到尽头的这俩函数死磕到底，还是选择把 360 加固的反调试搞定？</p>\n<p>我选择后者，因为明显搞定反调试要比把这两个函数分析明白要稍微简单一点</p>\n<h1 id=\"加固壳反调试深入分析\"><a class=\"anchor\" href=\"#加固壳反调试深入分析\">#</a> 加固壳反调试深入分析</h1>\n<p>在<strong>加固壳反调试初步分析</strong>中，我曾尝试过 <code>dbus</code> , <code>TracerPid</code> , <code>readlink</code> , <code>strstr</code>  都没有明显的效果，只有 hook  <code>open</code>  函数让我看到了些许的曙光，那么现在应该还有一种非常重要的反调试手段没有用到，那就是 <code>pthread_create</code>  反调试</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">check_pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> pthread_create_addr <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pthread_create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> pthread_create <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeFunction</span><span class=\"token punctuation\">(</span>pthread_create_addr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>pthread_create_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parg0<span class=\"token punctuation\">,</span> parg1<span class=\"token punctuation\">,</span> parg2<span class=\"token punctuation\">,</span> parg3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">var</span> so_name <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByAddress</span><span class=\"token punctuation\">(</span>parg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">var</span> so_path <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByAddress</span><span class=\"token punctuation\">(</span>parg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> so_base <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">getBaseAddress</span><span class=\"token punctuation\">(</span>so_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">var</span> offset <span class=\"token operator\">=</span> parg2 <span class=\"token operator\">-</span> so_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> <span class=\"token constant\">PC</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>so_name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jiagu\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find thread func offset\"</span><span class=\"token punctuation\">,</span> so_name<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">backtrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> Backtracer<span class=\"token punctuation\">.</span><span class=\"token constant\">ACCURATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>addr_in_so<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">var</span> check_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">//1769036,1771844</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check_list<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"check bypass\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token constant\">PC</span> <span class=\"token operator\">=</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>parg0<span class=\"token punctuation\">,</span> parg1<span class=\"token punctuation\">,</span> parg2<span class=\"token punctuation\">,</span> parg3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token constant\">PC</span> <span class=\"token operator\">=</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>parg0<span class=\"token punctuation\">,</span> parg1<span class=\"token punctuation\">,</span> parg2<span class=\"token punctuation\">,</span> parg3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">PC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addr_in_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">var</span> process_Obj_Module_Arr <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> process_Obj_Module_Arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">></span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">&amp;&amp;</span> addr<span class=\"token operator\">&lt;</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is in\"</span><span class=\"token punctuation\">,</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"offset: 0x\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">-</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注入代码之后， <code>pthread_create</code>  的调用都指向了同一个地址 <code>0x17710</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222010902622.png\" alt=\"image-20240222010902622\" style=\"aspect-ratio:735 / 781;\"></p>\n<p>我们跳转到这个地址之后却发现为什么会没有 <code>pthread_create</code>  呢？？</p>\n<p><img data-src=\"/360-jiagu/image-20240222011044885.png\" alt=\"image-20240222011044885\" style=\"aspect-ratio:1113 / 306;\"></p>\n<p>看了一眼这个代码所在的函数的名称 <code>ffi_call_SYSV</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222011143427.png\" alt=\"image-20240222011143427\" style=\"aspect-ratio:947 / 186;\"></p>\n<p>hmmm, 看来是用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGV4Y29kZTIuZ2l0Ym9vay5pby9pb3MtZGV2ZWxvcG1lbnQtZ3VpZGVsaW5lcy9pb3MtemEtdGFuL2xpYmZmaS1kb25nLXRhaS10aWFvLXlvbmctaGUtZGluZy15aS1jLWhhbi1zaHU=\"> libffi 动态调用函数</span>呀</p>\n<p><img data-src=\"/360-jiagu/image-20240222011351754.png\" alt=\"image-20240222011351754\" style=\"aspect-ratio:1012 / 715;\"></p>\n<p>直接到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpYmZmaQ==\"> libffi 的 github 仓库</span>看一眼<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpYmZmaS9saWJmZmkvYmxvYi9tYXN0ZXIvc3JjL2FhcmNoNjQvc3lzdi5T\"> ffi_call_SYSV 的源码</span></p>\n<p>一进去注释都写得清清楚楚了</p>\n<p><img data-src=\"/360-jiagu/image-20240222012001816.png\" alt=\"image-20240222012001816\" style=\"aspect-ratio:803 / 502;\"></p>\n<p>利用注释就可以知道每行汇编都代表什么了，所以 <code>BLR X24</code>  表示去动态调用函数，而前面的 <code>X0</code> , <code>X2</code> , <code>X4</code> , <code>X6</code>  是用来传参的</p>\n<p><img data-src=\"/360-jiagu/image-20240222012543471.png\" alt=\"image-20240222012543471\" style=\"aspect-ratio:1845 / 790;\"></p>\n<p>我们 hook 一下 <code>x0</code>  看看有没有什么敏感的字符串</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">anti_frida_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1770C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而神奇的是，我仅仅去 hook 并打印 x0 字符串，其他什么事情都不干，apk 竟然神奇的进去了，只不过会没有响应，感觉距离成功不远了呢</p>\n<p><img data-src=\"/360-jiagu/image-20240222013454838.png\" alt=\"image-20240222013454838\" style=\"aspect-ratio:489 / 922;\"></p>\n<p>有点意思，筛选一下看看有没有什么敏感的字符串好咯</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">anti_frida_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1770C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frida'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gum-js-loop'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gmain'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'linjector'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/proc/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>竟然还真有，那就把这些字符串全部替换成无意义的字符串看看咯</p>\n<p><img data-src=\"/360-jiagu/image-20240222013944879.png\" alt=\"image-20240222013944879\" style=\"aspect-ratio:1633 / 205;\"></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">anti_frida_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1770C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frida'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gum-js-loop'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gmain'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'linjector'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/proc/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span><span class=\"token function\">protect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">.</span>pointerSize<span class=\"token punctuation\">,</span> <span class=\"token string\">'rwx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">var</span> replace_str<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        replace_str<span class=\"token operator\">+=</span><span class=\"token string\">\"0\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8String</span><span class=\"token punctuation\">(</span>replace_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而这样做进程却一个劲的崩溃！！</p>\n<p>没事，寄存器 <code>x0</code>  用不了，还有 <code>x2</code> , <code>x4</code> , <code>x6</code>  没替换过呢！我一个一个的试过去，终于，当我将寄存器改成 x6 时，进程终于不再崩溃成功的进入了 apk!</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">anti_frida_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1770C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x6<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frida'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gum-js-loop'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gmain'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'linjector'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/proc/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token comment\">//console.log(s)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span><span class=\"token function\">protect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">.</span>pointerSize<span class=\"token punctuation\">,</span> <span class=\"token string\">'rwx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">var</span> replace_str<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        replace_str<span class=\"token operator\">+=</span><span class=\"token string\">\"0\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8String</span><span class=\"token punctuation\">(</span>replace_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240222015211639.png\" alt=\"image-20240222015211639\" style=\"aspect-ratio:492 / 984;\"></p>\n<p>看一眼检测的字符串，怎么全是 <code>/memfd:frida-agent-64.so</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222015139528.png\" alt=\"image-20240222015139528\" style=\"aspect-ratio:920 / 269;\"></p>\n<h1 id=\"主dex加载流程分析\"><a class=\"anchor\" href=\"#主dex加载流程分析\">#</a> 主 DEX 加载流程分析</h1>\n<p>回到这个卡了我们很久位置，现在过了反调试之后这里的代码终于可以继续执行下去了</p>\n<p><img data-src=\"/360-jiagu/image-20240222015651090.png\" alt=\"image-20240222015651090\" style=\"aspect-ratio:1109 / 304;\"></p>\n<p>向下看找到这一个函数 <code>sub_18FEA8</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222030003433.png\" alt=\"image-20240222030003433\" style=\"aspect-ratio:1425 / 230;\"></p>\n<p>在这个函数中的字符串全部都是加密的，颇有种此地无银三百两的感觉，我们把字符串解密后发现了 <code>DexFileLoader</code>  相关的字符串，说明这个函数肯定和加载 dex 有某种关联</p>\n<p><img data-src=\"/360-jiagu/image-20240222030104410.png\" alt=\"image-20240222030104410\" style=\"aspect-ratio:1527 / 470;\"></p>\n<p>我们 hook 一下这个函数，发现这个函数共调用了三次，而且传入的值都是已经解密了的 dex, <code>classes.dex</code> , <code>classes2.dex</code> , <code>classes3.dex</code>  分别通过这个函数加载</p>\n<p><code>classes.dex</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222030239507.png\" alt=\"image-20240222030239507\" style=\"aspect-ratio:1192 / 363;\"></p>\n<p><code>classes2.dex</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222030345127.png\" alt=\"image-20240222030345127\" style=\"aspect-ratio:1181 / 364;\"></p>\n<p><code>classes3.dex</code></p>\n<p><img data-src=\"/360-jiagu/image-20240222030355010.png\" alt=\"image-20240222030355010\" style=\"aspect-ratio:1193 / 358;\"></p>\n<p>把这三个 dex 给 dump 下来看看，于是我们得到了这三个文件</p>\n<p><img data-src=\"/360-jiagu/image-20240222030924824.png\" alt=\"image-20240222030924824\" style=\"aspect-ratio:632 / 96;\"></p>\n<p>把最大的那个 dex 拖到 jadx 分析里面，发现这正是我们要找的主 DEX</p>\n<p><img data-src=\"/360-jiagu/image-20240222172233276.png\" alt=\"image-20240222172233276\" style=\"aspect-ratio:1920 / 1078;\"></p>\n<p>其他函数都很正常，唯独 <code>onCreate</code>  函数变成了 <code>native</code>  声明，要是有同样分析到这里的朋友可以去研究研究 <code>onCreate</code>  函数对应的 <code>native</code>  本地函数究竟在什么地方，相信有了本文的铺垫，对于进行后续 <code>onCreate</code>  函数的分析应该是有所帮助的吧～</p>\n<p>而除此之外的别的类和直接反编译未加固的 apk 的类是一样的</p>\n<p><img data-src=\"/360-jiagu/image-20240222031222988.png\" alt=\"image-20240222031222988\" style=\"aspect-ratio:1920 / 1079;\"></p>\n<h1 id=\"主dex解密算法分析\"><a class=\"anchor\" href=\"#主dex解密算法分析\">#</a> 主 DEX 解密算法分析</h1>\n<p>我们在<strong>加固壳反调试深入分析</strong>成功的绕过了 360 加固的 frida 检测，现在我们再次回到 <code>sub_1332B8</code>  中的 <code>sub_128D44</code> , 来进行后续的解密算法的分析</p>\n<p>下图是<strong>主 DEX 解密流程初步分析</strong>末尾部分的内容，我们将以这个函数 <code>sub_128D44</code>  为起点进行解密算法的分析，因为参数 <code>v8</code>  传入的值是加密之后的主 DEX</p>\n<p><img data-src=\"/360-jiagu/image-20240307115103478.png\" alt=\"image-20240307115103478\" style=\"aspect-ratio:1080 / 642;\"></p>\n<p>我们在这个内存用 frida 打一个内存读写断点来看看是究竟是什么函数读取了主 DEX, 同时需要注意加上我们的反调试函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> so_name <span class=\"token operator\">=</span> <span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dex_dec_enter_in_main_elf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1346B4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">//memory breakpoint</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            MemoryAccessMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span><span class=\"token number\">40</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token function-variable function\">onAccess</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>operation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_addr_in_so</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">var</span> zlib_count<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_zlib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"inflate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            zlib_count<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zlib_count<span class=\"token operator\">===</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token function\">hook_dex_dec_enter_in_main_elf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">anti_frida_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1770C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x6<span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frida'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gum-js-loop'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gmain'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'linjector'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/proc/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token comment\">//console.log(s)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span><span class=\"token function\">protect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">.</span>pointerSize<span class=\"token punctuation\">,</span> <span class=\"token string\">'rwx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">var</span> replace_str<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                        replace_str<span class=\"token operator\">+=</span><span class=\"token string\">\"0\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">writeUtf8String</span><span class=\"token punctuation\">(</span>replace_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get_addr_in_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">var</span> process_Obj_Module_Arr <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> process_Obj_Module_Arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">></span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">&amp;&amp;</span> addr<span class=\"token operator\">&lt;</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" is in \"</span><span class=\"token operator\">+</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" offset: 0x\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">-</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_dlopen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">//hook_call_constructors();</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">findExportByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"android_dlopen_ext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">var</span> pathptr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathptr <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> pathptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span>pathptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dlopen \"</span><span class=\"token operator\">+</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>so_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">retval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>is_can_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    <span class=\"token comment\">//you can do any thing before stalker trace so</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    <span class=\"token comment\">//trace_so();</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token function\">hook_zlib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    <span class=\"token function\">anti_frida_check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token comment\">//hook_C918();</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>hook_dlopen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打印日志如下</p>\n<p><img data-src=\"/360-jiagu/image-20240307120002564.png\" alt=\"image-20240307120002564\" style=\"aspect-ratio:718 / 67;\"></p>\n<p>说明是在 <code>0xd364</code>  处读取了这个主 DEX</p>\n<p>跳转到 <code>0xd364</code>  之后发现这个地址在函数 <code>sub_C918</code>  中，看起来这个函数的形状像一个火车头一样 XD</p>\n<p><img data-src=\"/360-jiagu/image-20240307120118309.png\" alt=\"image-20240307120118309\" style=\"aspect-ratio:1920 / 520;\"></p>\n<p>接下来我们继续使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29hY2lhL3N0YWxrZXJfdHJhY2Vfc28=\"> staker_trace_so</span> 生成的 <code>trace_so()</code>  函数去看看函数的调用链是什么样子的，trace 的起点就是在 <code>sub_1332B8</code>  中的 <code>sub_128D44</code> , 同时注意加上我们的反调试函数</p>\n<p><img data-src=\"/360-jiagu/image-20240307120333178.png\" alt=\"image-20240307120333178\" style=\"aspect-ratio:1218 / 229;\"></p>\n<p>打印出来的函数调用链如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>start Stalker<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Stalker end<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call1<span class=\"token operator\">:</span><span class=\"token function\">sub_128D44</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call2<span class=\"token operator\">:</span><span class=\"token class-name\">j_interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call3<span class=\"token operator\">:</span><span class=\"token class-name\">interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call4<span class=\"token operator\">:</span><span class=\"token function\">interpreter_wrap_int64_t_bridge</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call5<span class=\"token operator\">:</span><span class=\"token function\">getenv</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call6<span class=\"token operator\">:</span><span class=\"token function\">sub_13908</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call7<span class=\"token operator\">:</span><span class=\"token function\">inotify_add_watch</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call8<span class=\"token operator\">:</span><span class=\"token function\">sub_11220</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call9<span class=\"token operator\">:</span><span class=\"token function\">fopen</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call10<span class=\"token operator\">:</span><span class=\"token function\">sub_9DD8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call11<span class=\"token operator\">:</span><span class=\"token function\">sub_E3E0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call12<span class=\"token operator\">:</span><span class=\"token function\">strtol</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call13<span class=\"token operator\">:</span><span class=\"token function\">feof</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call14<span class=\"token operator\">:</span><span class=\"token function\">raise</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call15<span class=\"token operator\">:</span><span class=\"token function\">memset</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call16<span class=\"token operator\">:</span>sub_C918<span class=\"token comment\">// 这个函数中读取加密之后的 dex</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call17<span class=\"token operator\">:</span><span class=\"token function\">sub_9964</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call18<span class=\"token operator\">:</span><span class=\"token function\">sub_9AC4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call19<span class=\"token operator\">:</span><span class=\"token function\">sub_9988</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call20<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call21<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call22<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif_machdep</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call23<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif_machdep</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call24<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_call</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call25<span class=\"token operator\">:</span><span class=\"token function\">ffi_call</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call26<span class=\"token operator\">:</span><span class=\"token function\">sub_1674C</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call27<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_call_SYSV</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call28<span class=\"token operator\">:</span><span class=\"token function\">ffi_call_SYSV</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call29<span class=\"token operator\">:</span><span class=\"token function\">sub_167BC</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call30<span class=\"token operator\">:</span><span class=\"token function\">sub_1647C</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call31<span class=\"token operator\">:</span><span class=\"token function\">sub_163DC</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call32<span class=\"token operator\">:</span><span class=\"token function\">_Znwm</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call33<span class=\"token operator\">:</span><span class=\"token function\">malloc</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call34<span class=\"token operator\">:</span><span class=\"token function\">sub_128D64</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call35<span class=\"token operator\">:</span><span class=\"token function\">sub_9E58</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call36<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call37<span class=\"token operator\">:</span><span class=\"token function\">lseek</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call38<span class=\"token operator\">:</span><span class=\"token function\">sub_A3EC</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call39<span class=\"token operator\">:</span><span class=\"token function\">sub_99CC</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call40<span class=\"token operator\">:</span><span class=\"token function\">sub_9944</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call41<span class=\"token operator\">:</span><span class=\"token function\">sub_999C</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call42<span class=\"token operator\">:</span><span class=\"token function\">sub_128D70</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call43<span class=\"token operator\">:</span><span class=\"token function\">memcpy</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call44<span class=\"token operator\">:</span><span class=\"token function\">sub_14283C</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call45<span class=\"token operator\">:</span><span class=\"token function\">j__Znwm</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call46<span class=\"token operator\">:</span><span class=\"token function\">sub_1429CC</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call47<span class=\"token operator\">:</span><span class=\"token function\">sub_142FE0</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call48<span class=\"token operator\">:</span><span class=\"token function\">sub_10964</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call49<span class=\"token operator\">:</span><span class=\"token function\">sub_9D60</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call50<span class=\"token operator\">:</span><span class=\"token function\">sub_143008</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call51<span class=\"token operator\">:</span><span class=\"token function\">sub_142ABC</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call52<span class=\"token operator\">:</span><span class=\"token function\">sub_142EA0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call53<span class=\"token operator\">:</span><span class=\"token function\">sub_143A38</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call54<span class=\"token operator\">:</span><span class=\"token function\">sub_11CF8C</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call55<span class=\"token operator\">:</span><span class=\"token function\">sub_12047C</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call56<span class=\"token operator\">:</span><span class=\"token function\">strlen</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call57<span class=\"token operator\">:</span><span class=\"token function\">memcmp</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call58<span class=\"token operator\">:</span><span class=\"token function\">sub_117B68</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call59<span class=\"token operator\">:</span><span class=\"token function\">sub_166C4</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call60<span class=\"token operator\">:</span><span class=\"token function\">memcpy</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call61<span class=\"token operator\">:</span><span class=\"token function\">sub_143848</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call62<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66A8</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call63<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_lock</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call64<span class=\"token operator\">:</span><span class=\"token function\">sub_143B48</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call65<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66D0</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call66<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_unlock</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call67<span class=\"token operator\">:</span><span class=\"token function\">sub_143088</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call68<span class=\"token operator\">:</span><span class=\"token function\">sub_11F768</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call69<span class=\"token operator\">:</span><span class=\"token function\">j__ZdlPv</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call70<span class=\"token operator\">:</span><span class=\"token function\">_ZdlPv</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call71<span class=\"token operator\">:</span><span class=\"token function\">free</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call72<span class=\"token operator\">:</span><span class=\"token function\">sub_1178E8</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call73<span class=\"token operator\">:</span><span class=\"token function\">sub_1222D0</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call74<span class=\"token operator\">:</span><span class=\"token function\">sub_14316C</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call75<span class=\"token operator\">:</span><span class=\"token function\">sub_142954</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call76<span class=\"token operator\">:</span><span class=\"token function\">_Z9__arm_a_2PcmS_Rii</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call77<span class=\"token operator\">:</span><span class=\"token class-name\">j_interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call78<span class=\"token operator\">:</span><span class=\"token class-name\">interpreter_wrap_int64_t</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call79<span class=\"token operator\">:</span><span class=\"token function\">sub_9FFC</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call80<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_3</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call81<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_2</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call82<span class=\"token operator\">:</span><span class=\"token function\">sub_9A90</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call83<span class=\"token operator\">:</span><span class=\"token function\">sub_142894</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call84<span class=\"token operator\">:</span><span class=\"token function\">sub_1428BC</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call85<span class=\"token operator\">:</span><span class=\"token function\">sub_127DCC</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call86<span class=\"token operator\">:</span><span class=\"token function\">sub_14292C</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call87<span class=\"token operator\">:</span><span class=\"token function\">sub_14285C</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call88<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_0</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call89<span class=\"token operator\">:</span><span class=\"token function\">_Znam</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call90<span class=\"token operator\">:</span><span class=\"token function\">sub_128E88</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call91<span class=\"token operator\">:</span><span class=\"token function\">_ZdaPv</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call92<span class=\"token operator\">:</span><span class=\"token function\">sub_142AA4</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call93<span class=\"token operator\">:</span><span class=\"token function\">sub_142A10</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call94<span class=\"token operator\">:</span><span class=\"token function\">sub_12036C</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call95<span class=\"token operator\">:</span><span class=\"token function\">sub_1B6680</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call96<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_destroy</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call97<span class=\"token operator\">:</span><span class=\"token function\">sub_131D58</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call98<span class=\"token operator\">:</span><span class=\"token function\">sub_11F3A4</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call99<span class=\"token operator\">:</span>sub_18FEA8<span class=\"token comment\">// 这个函数中传入解密之后的 dex, 位置如下图所示</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240307120808017.png\" alt=\"image-20240307120808017\" style=\"aspect-ratio:1473 / 142;\"></p>\n<p>追踪函数调用链，我们发现了两个有趣的函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call50<span class=\"token operator\">:</span><span class=\"token function\">sub_143008</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call51<span class=\"token operator\">:</span>sub_142ABC</pre></td></tr></table></figure><p><code>sub_143008</code>  看起来是一个解密的函数，先加上 0x70 再异或 0x36, 我们 hook 一下传入的参数看看是什么情况</p>\n<p><img data-src=\"/360-jiagu/image-20240307120941018.png\" alt=\"image-20240307120941018\" style=\"aspect-ratio:914 / 874;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240307121240701.png\" alt=\"image-20240307121240701\" style=\"aspect-ratio:1188 / 232;\"></p>\n<p>我们再去看看加密的 dex, 发现这个函数传入的就是加密的主 dex</p>\n<p><img data-src=\"/360-jiagu/image-20240307121409507.png\" alt=\"image-20240307121409507\" style=\"aspect-ratio:792 / 329;\"></p>\n<p>把这部分解密看看里面是什么内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ke_classes.dex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dexA <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0x31A4</span><span class=\"token punctuation\">:</span><span class=\"token number\">0x31A4</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x41E</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dexA <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span>dexA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dexA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    dexA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dexA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x36</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dexA.dex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>dexA<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>简单看了看， <code>APPKEY</code> , <code>activityName</code>  等等像是一些配置信息的样子</p>\n<p><img data-src=\"/360-jiagu/image-20240307121648094.png\" alt=\"image-20240307121648094\" style=\"aspect-ratio:793 / 738;\"></p>\n<p>这部分内容解密完之后，在 <code>sub_142ABC</code>  中以 <code>pk</code>  为标志读取各个配置信息</p>\n<p><img data-src=\"/360-jiagu/image-20240307124356084.png\" alt=\"image-20240307124356084\" style=\"aspect-ratio:807 / 355;\"></p>\n<p>之后我继续一个一个跳转到打印出来的函数中看，却一直都没有发现后续部分的解密算法的身影，随后我又仔细的看了一下调用的函数，突然有了惊喜的发现，这里的 <code>pthread_mutex_lock</code>  不就意味着要用互斥锁来切换到另外一个线程了吗！？</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call61<span class=\"token operator\">:</span><span class=\"token function\">sub_143848</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call62<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66A8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call63<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_lock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call64<span class=\"token operator\">:</span><span class=\"token function\">sub_143B48</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call65<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66D0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call66<span class=\"token operator\">:</span>pthread_mutex_unlock</pre></td></tr></table></figure><p>我们 hook 一下 <code>sub_143848</code> , 并同时打印出 pid 来看看是什么情况</p>\n<p><img data-src=\"/360-jiagu/image-20240307191208065.png\" alt=\"image-20240307191208065\" style=\"aspect-ratio:728 / 588;\"></p>\n<p>果不其然，在这里我们发现除了主线程外，还有三个不同的线程调用了这个函数</p>\n<p><img data-src=\"/360-jiagu/image-20240307191316415.png\" alt=\"image-20240307191316415\" style=\"aspect-ratio:948 / 537;\"></p>\n<p>那我们在 pid 和主线程不同的时候，用 <code>stalker_trace_so</code>  的 <code>trace_so</code>  函数在去看看究竟调用了什么函数吧</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> stalker_trace_once <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x143848</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>main_thread<span class=\"token operator\">!==</span>Process<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stalker_trace_once<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    stalker_trace_once <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token function\">trace_so</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印出的内容如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>main thread <span class=\"token number\">9434</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>start Stalker<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> pid<span class=\"token operator\">:</span> <span class=\"token number\">9472</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Stalker end<span class=\"token operator\">!</span>             </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call1<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66A8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call2<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_lock</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call3<span class=\"token operator\">:</span><span class=\"token function\">sub_143B48</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call4<span class=\"token operator\">:</span><span class=\"token function\">memcmp</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call5<span class=\"token operator\">:</span><span class=\"token function\">sub_142EA0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call6<span class=\"token operator\">:</span><span class=\"token function\">sub_143A38</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call7<span class=\"token operator\">:</span><span class=\"token function\">sub_1B66D0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call8<span class=\"token operator\">:</span><span class=\"token function\">pthread_mutex_unlock</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call9<span class=\"token operator\">:</span><span class=\"token function\">memset</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call10<span class=\"token operator\">:</span><span class=\"token function\">inotify_add_watch</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call11<span class=\"token operator\">:</span><span class=\"token function\">sub_9AC4</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call12<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call13<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call14<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_prep_cif_machdep</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call15<span class=\"token operator\">:</span><span class=\"token function\">ffi_prep_cif_machdep</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call16<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_call</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call17<span class=\"token operator\">:</span><span class=\"token function\">ffi_call</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call18<span class=\"token operator\">:</span><span class=\"token function\">fopen</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call19<span class=\"token operator\">:</span><span class=\"token function\">sub_1674C</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call20<span class=\"token operator\">:</span><span class=\"token function\">j_ffi_call_SYSV</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call21<span class=\"token operator\">:</span><span class=\"token function\">ffi_call_SYSV</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call22<span class=\"token operator\">:</span><span class=\"token function\">sub_167BC</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call23<span class=\"token operator\">:</span><span class=\"token function\">sub_1647C</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call24<span class=\"token operator\">:</span><span class=\"token function\">sub_163DC</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call25<span class=\"token operator\">:</span><span class=\"token function\">sub_1178E8</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call26<span class=\"token operator\">:</span><span class=\"token function\">sub_9988</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call27<span class=\"token operator\">:</span><span class=\"token function\">sub_1236B8</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call28<span class=\"token operator\">:</span><span class=\"token function\">strlen</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call29<span class=\"token operator\">:</span><span class=\"token function\">sub_1222D0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call30<span class=\"token operator\">:</span><span class=\"token function\">sub_128D70</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call31<span class=\"token operator\">:</span><span class=\"token function\">memcpy</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call32<span class=\"token operator\">:</span><span class=\"token function\">getenv</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call33<span class=\"token operator\">:</span><span class=\"token function\">sub_9E58</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call34<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call35<span class=\"token operator\">:</span><span class=\"token function\">lseek</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call36<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1AE8</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call37<span class=\"token operator\">:</span><span class=\"token function\">j_strcmp</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call38<span class=\"token operator\">:</span><span class=\"token function\">strcmp</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call39<span class=\"token operator\">:</span><span class=\"token function\">sub_19F7C4</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call40<span class=\"token operator\">:</span><span class=\"token function\">j__Znwm</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call41<span class=\"token operator\">:</span><span class=\"token function\">_Znwm</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call42<span class=\"token operator\">:</span><span class=\"token function\">malloc</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call43<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1B64</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call44<span class=\"token operator\">:</span><span class=\"token function\">sub_9964</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call45<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1B7C</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call46<span class=\"token operator\">:</span><span class=\"token function\">memset</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call47<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1D84</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call48<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1E74</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call49<span class=\"token operator\">:</span><span class=\"token function\">j_j__ZdlPv_12</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call50<span class=\"token operator\">:</span><span class=\"token function\">j__ZdlPv</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call51<span class=\"token operator\">:</span><span class=\"token function\">_ZdlPv</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call52<span class=\"token operator\">:</span><span class=\"token function\">free</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call53<span class=\"token operator\">:</span><span class=\"token function\">sub_18DC28</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call54<span class=\"token operator\">:</span><span class=\"token function\">sub_18DC4C</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call55<span class=\"token operator\">:</span><span class=\"token function\">sub_9FFC</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call56<span class=\"token operator\">:</span><span class=\"token function\">sub_19B7EC</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call57<span class=\"token operator\">:</span><span class=\"token function\">mmap</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call58<span class=\"token operator\">:</span><span class=\"token function\">sub_A3EC</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call59<span class=\"token operator\">:</span><span class=\"token function\">sub_9944</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call60<span class=\"token operator\">:</span><span class=\"token function\">sub_18DCC0</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call61<span class=\"token operator\">:</span><span class=\"token function\">sub_18F6AC</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call62<span class=\"token operator\">:</span><span class=\"token function\">sub_18DDA8</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call63<span class=\"token operator\">:</span><span class=\"token function\">sub_18DD94</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call64<span class=\"token operator\">:</span><span class=\"token function\">sub_18DDB8</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call65<span class=\"token operator\">:</span><span class=\"token function\">sub_18E8D0</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call66<span class=\"token operator\">:</span><span class=\"token function\">sub_18E244</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call67<span class=\"token operator\">:</span><span class=\"token function\">j_j__ZdlPv_5</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call68<span class=\"token operator\">:</span><span class=\"token function\">sub_129468</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call69<span class=\"token operator\">:</span><span class=\"token function\">sub_12D478</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call70<span class=\"token operator\">:</span><span class=\"token function\">sub_1A19EC</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call71<span class=\"token operator\">:</span><span class=\"token function\">raise</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call72<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_2</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call73<span class=\"token operator\">:</span><span class=\"token function\">sub_9A90</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call74<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_0</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">(</span>KEkeELF<span class=\"token punctuation\">)</span>call75<span class=\"token operator\">:</span><span class=\"token function\">j_lseek_3</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call76<span class=\"token operator\">:</span><span class=\"token function\">sub_19BC9C</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call77<span class=\"token operator\">:</span><span class=\"token function\">sub_11CF8C</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call78<span class=\"token operator\">:</span><span class=\"token function\">sub_131D58</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call79<span class=\"token operator\">:</span>memmove</pre></td></tr></table></figure><p>继续跟着调用的函数一处一处到 ida 里面看，在下面的函数中我们终于有了收获</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call45<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1B7C</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call46<span class=\"token operator\">:</span><span class=\"token function\">memset</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call47<span class=\"token operator\">:</span><span class=\"token function\">sub_1A1D84</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call48<span class=\"token operator\">:</span>sub_1A1E74</pre></td></tr></table></figure><p>这个算法，看起来又是 RC4 呐</p>\n<p><img data-src=\"/360-jiagu/image-20240307191840395.png\" alt=\"image-20240307191840395\" style=\"aspect-ratio:999 / 749;\"></p>\n<p>hook 一下这个函数，发现密钥是 <code>b&quot;\\x68\\x76\\x99\\x72\\x96\\x60\\x9f\\x63\\x96\\x2c\\x98\\x30\\xc2\\x36\\x51\\x42&quot;</code></p>\n<p><img data-src=\"/360-jiagu/image-20240307192203905.png\" alt=\"image-20240307192203905\" style=\"aspect-ratio:1171 / 392;\"></p>\n<p>再去 hook  <code>sub_1A1E74</code>  看看传入了什么数据，我们发现前三部分都是 <code>f7 4f e8 0e</code>  开头的</p>\n<p><img data-src=\"/360-jiagu/image-20240307193744892.png\" alt=\"image-20240307193744892\" style=\"aspect-ratio:1200 / 819;\"></p>\n<p>看到这些数据，终于离成功又更进一步了，因为这些数据就是我们读取完壳 DEX 尾部的前 <code>0x41E</code>  个加密数据并解密出配置信息之后的那部分加密数据，同时我们也可以在 010editor 中通过搜索壳 DEX 找到它们，这三部分加密数据段所在的位置分别为 <code>0x35CE</code> , <code>0x3A93AD</code> , <code>0x417064</code></p>\n<p><img data-src=\"/360-jiagu/image-20240307194101403.png\" alt=\"image-20240307194101403\" style=\"aspect-ratio:309 / 168;\"></p>\n<p>我们先来到第一个数据段的位置来分析数据段的结构，这个位置是在 <code>0x31A4+0x41E</code> , 即 <code>0x35c2</code>  之后</p>\n<p><img data-src=\"/360-jiagu/image-20240308004303427.png\" alt=\"image-20240308004303427\" style=\"aspect-ratio:1031 / 349;\"></p>\n<p>所以这 dex 的第一个解密算法如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RC4</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    S <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># KSA Phase</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># PRGA Phase</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    i <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        out<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ch <span class=\"token operator\">^</span> S<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> out</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">RC4decrypt</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> RC4<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b\"\\x68\\x76\\x99\\x72\\x96\\x60\\x9f\\x63\\x96\\x2c\\x98\\x30\\xc2\\x36\\x51\\x42\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.oacia.apk_protect/classes.dex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    enc_data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>start <span class=\"token operator\">=</span> <span class=\"token number\">0x35C2</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>dexcount <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>enc_data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>start<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>start<span class=\"token operator\">+=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>dexcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    total_data_len <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>enc_data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>start<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    start<span class=\"token operator\">+=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    rc4_data_len <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>enc_data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>start<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    start<span class=\"token operator\">+=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    enc_dex <span class=\"token operator\">=</span> enc_data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>start<span class=\"token operator\">+</span>rc4_data_len<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    start<span class=\"token operator\">+=</span>rc4_data_len</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    dec_dex <span class=\"token operator\">=</span> RC4decrypt<span class=\"token punctuation\">(</span>enc_dex<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    dec2_data_len <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>dec_dex<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'dex</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.dex'</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>dec_dex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    extra <span class=\"token operator\">=</span> enc_data<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>start<span class=\"token operator\">+</span>total_data_len<span class=\"token operator\">-</span>rc4_data_len<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    extra_data_base <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>dec_dex<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'little'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    extra_data_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>extra<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    start<span class=\"token operator\">+=</span>total_data_len<span class=\"token operator\">-</span>rc4_data_len<span class=\"token operator\">-</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"part</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: total_data_len: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>total_data_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, rc4_data_len: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>rc4_data_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"rc4_dec_part</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: extra_data_base: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>extra_data_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,extra_data_len: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>extra_data_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, dec2_data_len: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>dec2_data_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'dex</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_extra.dex'</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>extra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240308110813489.png\" alt=\"image-20240308110813489\" style=\"aspect-ratio:1370 / 203;\"></p>\n<p>但是光这还不够，因为 rc4 解密出来的数据仍然不是 DEX 格式</p>\n<p><img data-src=\"/360-jiagu/image-20240308005514430.png\" alt=\"image-20240308005514430\" style=\"aspect-ratio:791 / 222;\"></p>\n<p>之后继续跟着函数调用链走，找到这些函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call60<span class=\"token operator\">:</span><span class=\"token function\">sub_18DCC0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call61<span class=\"token operator\">:</span><span class=\"token function\">sub_18F6AC</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call62<span class=\"token operator\">:</span><span class=\"token function\">sub_18DDA8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call63<span class=\"token operator\">:</span><span class=\"token function\">sub_18DD94</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call64<span class=\"token operator\">:</span>sub_18DDB8</pre></td></tr></table></figure><p>在 <code>sub_18F6AC</code>  中的代码感觉很像是算法相关</p>\n<p><img data-src=\"/360-jiagu/image-20240308005825649.png\" alt=\"image-20240308005825649\" style=\"aspect-ratio:1123 / 715;\"></p>\n<p>通过 hook 其中的 <code>sub_18DDB8</code>  函数发现 a3 是 rc4 解密之后的从 0xc 开始的数据段</p>\n<p><img data-src=\"/360-jiagu/image-20240308010341488.png\" alt=\"image-20240308010341488\" style=\"aspect-ratio:1178 / 167;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240308010411747.png\" alt=\"image-20240308010411747\" style=\"aspect-ratio:802 / 244;\"></p>\n<p>而前面的 0xc 位额外数据的读取方式为 5+4+4, 在 <code>sub_18DCC0</code>  中有读取操作，通过这样的读取操作我们可以依次得到 <code>0x010000005D</code> , <code>0x400000</code> , <code>0x109492</code></p>\n<p><img data-src=\"/360-jiagu/image-20240308010524472.png\" alt=\"image-20240308010524472\" style=\"aspect-ratio:1015 / 418;\"></p>\n<p>这里的 <code>0x109492</code>  表示的是第二次解密的数据段的大小，那么 <code>0x40000</code>  表示什么呢？</p>\n<p>还记得我们的加密数据段是有前后两部分的嘛，前半部分用 rc4 解密，那么后半部分我们来看看长什么样子好了</p>\n<p><img data-src=\"/360-jiagu/image-20240308011028793.png\" alt=\"image-20240308011028793\" style=\"aspect-ratio:797 / 383;\"></p>\n<p>后半部分的数据看起来十分的规整，不像是有加密的样子</p>\n<p>而在<strong>主 DEX 加载流程分析</strong>中，我们成功的 dump 出了主 DEX, 那么我们不妨把这个这里的数据到主 DEX 中搜索一番看看有什么发现吧</p>\n<p>在主 DEX 中搜索第一行的字节，我们惊喜的发现竟然可以搜索到，并且它的位置正好就是 <code>0x400000</code> !</p>\n<p><img data-src=\"/360-jiagu/image-20240308011259938.png\" alt=\"image-20240308011259938\" style=\"aspect-ratio:829 / 332;\"></p>\n<p>所以说经过 RC4 解密之后的这部分的数据结构我们也就可以知道了</p>\n<p><img data-src=\"/360-jiagu/image-20240308011627096.png\" alt=\"image-20240308011627096\" style=\"aspect-ratio:793 / 310;\"></p>\n<p>接下来我们只要搞清楚在 <code>sub_18DDB8</code>  中第二次解密的算法是什么就可以了</p>\n<p>我们再回到分析的起点 <code>sub_128D44</code>  函数，来看看能不能有其他的发现</p>\n<p><img data-src=\"/360-jiagu/image-20240308012120417.png\" alt=\"image-20240308012120417\" style=\"aspect-ratio:1071 / 141;\"></p>\n<p>通过 hook  <code>sub_128D44</code>  的返回值 v150 之后发现，三级指针指向着解密之后的 dex</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexdump</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readS64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">offset</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 相对偏移</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//dump 的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">ansi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/360-jiagu/image-20240308012312135.png\" alt=\"image-20240308012312135\" style=\"aspect-ratio:1191 / 172;\"></p>\n<p>而倘若我们观察这个解密数据所在的内存 <code>703bc75000</code> , 它正好是 <code>0x1000</code>  的倍数，而 <code>0x1000</code>  正好就是一页的大小</p>\n<p>这意味着什么呢？</p>\n<p>这说明 dex 所在的内存极有可能是通过 <code>mmap</code>  函数分配的！</p>\n<p>而在 <code>stalker_trace_so</code>  打印的数据中，正好就有这个函数被调用了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>mainELF<span class=\"token punctuation\">)</span>call57<span class=\"token operator\">:</span>mmap</pre></td></tr></table></figure><p>于是我们来到 mmap 被调用的函数</p>\n<p><img data-src=\"/360-jiagu/image-20240308012704595.png\" alt=\"image-20240308012704595\" style=\"aspect-ratio:688 / 359;\"></p>\n<p>使用 frida hook mmap 返回的内存指针，然后打上内存读写断点，就可以帮助我们快速定位到最终解密算法完成之后赋值的地址</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hook_mmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">findModuleByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjiagu_64.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x19B81C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// fd, buff, len</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function-variable function\">onEnter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmap!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            MemoryAccessMonitor<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token function-variable function\">onAccess</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>operation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_addr_in_so</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function-variable function\">onLeave</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ret</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get_addr_in_so</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">var</span> process_Obj_Module_Arr <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> process_Obj_Module_Arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">></span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">&amp;&amp;</span> addr<span class=\"token operator\">&lt;</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" is in \"</span><span class=\"token operator\">+</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" offset: 0x\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">-</span>process_Obj_Module_Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>0x18ebd4</code>  中将值写入最终的目标内存，这个地址在 <code>sub_18E8D0</code>  中</p>\n<p><img data-src=\"/360-jiagu/image-20240308014607722.png\" alt=\"image-20240308014607722\" style=\"aspect-ratio:737 / 132;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240308012938693.png\" alt=\"image-20240308012938693\" style=\"aspect-ratio:532 / 211;\"></p>\n<p>在这个函数的开头，有对参数 a1 的读取操作</p>\n<p><img data-src=\"/360-jiagu/image-20240308112313375.png\" alt=\"image-20240308112313375\" style=\"aspect-ratio:560 / 429;\"></p>\n<p>我们 hook 一下值来看看 a1 各个部分都有什么含义</p>\n<p><img data-src=\"/360-jiagu/image-20240308112226813.png\" alt=\"image-20240308112226813\" style=\"aspect-ratio:1198 / 581;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240308112237431.png\" alt=\"image-20240308112237431\" style=\"aspect-ratio:1408 / 457;\"></p>\n<p>给 a1 写一个结构体好了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dec2_struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> shift_bit<span class=\"token punctuation\">;</span><span class=\"token comment\">// 移位的位数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> reversed0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> reversed1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> constA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> dest<span class=\"token punctuation\">;</span><span class=\"token comment\">// 解密后的 dex 存储的地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> constB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> constC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> extra_dex_base<span class=\"token punctuation\">;</span><span class=\"token comment\">// 额外数据将要复制到的基址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> guess_count2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> reversed2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> reversed3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> reversed4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> reversed5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> data_len<span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录额外数据的长度</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> input_read_index<span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录读取输入的加密数据的下标</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0x112</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录额外数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后带着我们的结构体逛逛这个解密算法的函数好咯</p>\n<p>sub_18F6AC</p>\n<p><img data-src=\"/360-jiagu/image-20240309004158571.png\" alt=\"image-20240309004158571\" style=\"aspect-ratio:1044 / 623;\"></p>\n<p>sub_18DDB8</p>\n<p><img data-src=\"/360-jiagu/image-20240309004238199.png\" alt=\"image-20240309004238199\" style=\"aspect-ratio:1413 / 766;\"></p>\n<p>sub_18E244</p>\n<p><img data-src=\"/360-jiagu/image-20240309004324883.png\" alt=\"image-20240309004324883\" style=\"aspect-ratio:1186 / 669;\"></p>\n<p>sub_18E8D0</p>\n<p><img data-src=\"/360-jiagu/image-20240309004410712.png\" alt=\"image-20240309004410712\" style=\"aspect-ratio:1635 / 623;\"></p>\n<p>这些函数无壳无花无打乱，也没有 vmp 加固，显得相当的干净，看起来是一个自定义算法</p>\n<p>算法千变万化，但是加固永远不是重在算法</p>\n<p>逆向一款优秀的加固壳，从中学习到的知识可以受益终生，同时也可以借此思考如何避免让别人轻易找到加固方案的突破口</p>\n<p>逢山开路，遇水搭桥。兵来将挡，水来土掩。</p>\n<p>我们最后来 hook 一下下面这个地方来为我们的分析画上圆满的句号吧</p>\n<p><img data-src=\"/360-jiagu/image-20240309011700849.png\" alt=\"image-20240309011700849\" style=\"aspect-ratio:939 / 265;\"></p>\n<p><img data-src=\"/360-jiagu/image-20240309013111976.png\" alt=\"image-20240309013111976\" style=\"aspect-ratio:558 / 225;\"></p>\n<p>至此，360 加固分析完毕</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>360 加固和常规的加固方案类似，都是 <code>壳DEX-&gt;壳ELF-&gt;主ELF-&gt;主DEX</code>  这样的过程，其中壳 ELF 解密主 ELF 所用到的算法是 <code>RC4</code>  和 <code>uncompress</code> , 壳 ELF 加载主 ELF 所用到的技术是自实现 linker 加固 so</p>\n<p>当然 360 加固还有许多值得继续研究分析的地方，例如分发 so 函数的 vmp 其内部逻辑究竟是什么样子呢？native 化的 <code>onCreate</code>  函数，dex2c 的原理究竟是什么呢？这些就留给未来的不眠之夜吧～</p>\n<p>月遇从云，花遇和风，今晚上的夜空很美</p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNzcxNjkubmV0L2h0bWwvMTcwNzI0Lmh0bWw=\">360 加固保关键技术浅析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcnlwdGF4Lm1lZGl1bS5jb20vZGVjcnlwdGluZy1zdHJpbmdzLXdpdGgtYS1qZWItc2NyaXB0LTFhZjUyMmZhNDk3OQ==\">Decrypting strings with a JEB script</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmV2ZXJjYy9wLzE3MTAwMzA4Lmh0bWw=\">自实现 linker 加固 so</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjYwMDQ5Lmh0bQ==\">360 加固保分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMua2FueHVlLmNvbS90aHJlYWQtMjc1ODExLmh0bQ==\">误入虎穴，喜得虎子 —— 记一次手游加固的脱壳与修复</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/ElfReader/",
            "url": "https://oacia.dev/ElfReader/",
            "title": "ELF结构分析及ElfReader",
            "date_published": "2024-02-17T06:11:23.000Z",
            "content_html": "<p>在 Android 中使用 <code>System.load</code>  加载一个 so 时，是通过 <code>ElfReader</code>  去解析这个 so 的重要结构及属性的，本文将对 ELF 的结构，链接过程，装载过程进行分析，并研究 ELF 在 AOSP 中的解析过程</p>\n<h1 id=\"elf结构简析\"><a class=\"anchor\" href=\"#elf结构简析\">#</a> ELF 结构简析</h1>\n<p>ELF 文件主要分为 3 个部分:</p>\n<ul>\n<li>ELF Header<br>\n 描述整个文件的组织</li>\n<li>Program Header Table<br>\n 包含了<strong>运行时</strong>加载程序所需要的信息</li>\n<li>Section Header Table<br>\n 包含了<strong>链接时</strong>所需要用到的信息</li>\n</ul>\n<h2 id=\"elf-header\"><a class=\"anchor\" href=\"#elf-header\">#</a> ELF Header</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//https://github.com/bminor/glibc/blob/glibc-2.27/elf/elf.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EI_NIDENT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\te_ident<span class=\"token punctuation\">[</span>EI_NIDENT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Magic number and other info */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Elf32_Half\te_type<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">/* Object file type */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Elf32_Half\te_machine<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Architecture */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Elf32_Word\te_version<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Object file version */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Elf32_Addr\te_entry<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Entry point virtual address */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Elf32_Off\te_phoff<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Program header table file offset */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Elf32_Off\te_shoff<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section header table file offset */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  Elf32_Word\te_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Processor-specific flags */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  Elf32_Half\te_ehsize<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* ELF header size in bytes */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Elf32_Half\te_phentsize<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Program header table entry size */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  Elf32_Half\te_phnum<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Program header table entry count */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Elf32_Half\te_shentsize<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section header table entry size */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  Elf32_Half\te_shnum<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section header table entry count */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  Elf32_Half\te_shstrndx<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section header string table index */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Ehdr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"e_identei_nident\"><a class=\"anchor\" href=\"#e_identei_nident\">#</a> e_ident[EI_NIDENT]</h3>\n<p>该变量给出了用于解码和解释文件中与机器无关的数据的方式。这个数组对于不同的下标的含义如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">宏名称</th>\n<th style=\"text-align:left\">下标</th>\n<th style=\"text-align:left\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">EI_MAG0</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">文件标识</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_MAG1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">文件标识</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_MAG2</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">文件标识</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_MAG3</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">文件标识</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_CLASS</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">文件类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_DATA</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">数据编码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_VERSION</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">文件版本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EI_PAD</td>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">补齐字节开始处</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"e_identei_mag0ei_mag3\"><a class=\"anchor\" href=\"#e_identei_mag0ei_mag3\">#</a> e_ident[EI_MAG0…EI_MAG3]</h4>\n<p>这是 ELF 文件的头 4 个字节，被称作 “魔数”，标识该文件是一个 ELF 目标文件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">位置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ELFMAG0</td>\n<td style=\"text-align:left\">0x7f</td>\n<td style=\"text-align:left\">e_ident[EI_MAG0]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFMAG1</td>\n<td style=\"text-align:left\">‘E’</td>\n<td style=\"text-align:left\">e_ident[EI_MAG1]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFMAG2</td>\n<td style=\"text-align:left\">‘L’</td>\n<td style=\"text-align:left\">e_ident[EI_MAG2]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFMAG3</td>\n<td style=\"text-align:left\">‘F’</td>\n<td style=\"text-align:left\">e_ident[EI_MAG3]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"e_identei_class\"><a class=\"anchor\" href=\"#e_identei_class\">#</a> e_ident[EI_CLASS]</h4>\n<p>标识文件的类型或容量</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ELFCLASSNONE</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">无效类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFCLASS32</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">32 位文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFCLASS64</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">64 位文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"e_identei_data\"><a class=\"anchor\" href=\"#e_identei_data\">#</a> e_ident[EI_DATA]</h4>\n<p>给出目标文件中的特定处理器数据的编码方式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ELFDATANONE</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">无效数据编码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFDATA2LSB</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">小端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ELFDATA2MSB</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">大端</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"e_type\"><a class=\"anchor\" href=\"#e_type\">#</a> e_type</h3>\n<p><code>e_type</code>  标识目标文件类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ET_NONE</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">无文件类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ET_REL</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">可重定位文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ET_EXEC</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">可执行文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ET_DYN</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">共享目标文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ET_CORE</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">核心转储文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ET_LOPROC</td>\n<td style=\"text-align:left\">0xff00</td>\n<td style=\"text-align:left\">处理器指定下限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ET_HIPROC</td>\n<td style=\"text-align:left\">0xffff</td>\n<td style=\"text-align:left\">处理器指定上限</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"e_machine\"><a class=\"anchor\" href=\"#e_machine\">#</a> e_machine</h3>\n<p>这一项指定了当前文件可以运行的机器架构，EM 是  <code>ELF Machine</code>  的简写</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">EM_NONE</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">无机器类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_M32</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">AT&amp;T WE 32100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_SPARC</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">SPARC</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_386</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">Intel 80386</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_68K</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">Motorola 68000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_88K</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">Motorola 88000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_860</td>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">Intel 80860</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EM_MIPS</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">MIPS RS3000</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"e_version\"><a class=\"anchor\" href=\"#e_version\">#</a> e_version</h3>\n<p>标识目标文件的版本。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">EV_NONE</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">无效版本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EV_CURRENT</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">当前版本</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"e_entry\"><a class=\"anchor\" href=\"#e_entry\">#</a> e_entry</h3>\n<p>这一项为系统转交控制权给 ELF 中相应代码的虚拟地址。如果没有相关的入口项，则这一项为 0。</p>\n<p>例如当 <code>e_entry</code>  为 <code>00 00 80 00</code>  时，得到可执行程序的入口地址为 <code>0x8000</code></p>\n<p>它是程序的入口虚拟地址，注意不是 main 函数的地址，而是 <code>.text</code>  段的首地址 <code>_start</code> 。当然这也要求程序本身非 PIE ( <code>-no-pie</code> ) 编译的且 ASLR 关闭的情况下，对于非 <code>ET_EXEC</code>  类型通常并不是实际的虚拟地址值.</p>\n<h3 id=\"e_phoff\"><a class=\"anchor\" href=\"#e_phoff\">#</a> e_phoff</h3>\n<p>这一项给出<strong>程序头部表</strong>在文件中的字节偏移（<strong>Program Header table OFFset</strong>）。如果文件中没有程序头部表，则为 0。</p>\n<h3 id=\"e_shoff\"><a class=\"anchor\" href=\"#e_shoff\">#</a> e_shoff</h3>\n<p>这一项给出<strong>节头表</strong>在文件中的字节偏移（ <strong>Section Header table OFFset</strong> ）。如果文件中没有节头表，则为 0。</p>\n<h3 id=\"e_flags\"><a class=\"anchor\" href=\"#e_flags\">#</a> e_flags</h3>\n<p>这一项给出文件中与特定处理器相关的标志，这些标志命名格式为 <code>EF_machine_flag</code> 。</p>\n<h3 id=\"e_ehsize\"><a class=\"anchor\" href=\"#e_ehsize\">#</a> e_ehsize</h3>\n<p>这一项给出 ELF 文件头部的字节长度（ELF Header Size）。</p>\n<h3 id=\"e_phentsize\"><a class=\"anchor\" href=\"#e_phentsize\">#</a> e_phentsize</h3>\n<p>这一项给出程序头部表中每个表项的字节长度（<strong>Program Header ENTry SIZE</strong>）。每个表项的大小相同。</p>\n<h3 id=\"e_phnum\"><a class=\"anchor\" href=\"#e_phnum\">#</a> e_phnum</h3>\n<p>这一项给出程序头部表的项数（ <strong>Program Header entry NUMber</strong> ）。因此， <code>e_phnum</code>  与  <code>e_phentsize</code>  的乘积即为程序头部表的字节长度。如果文件中没有程序头部表，则该项值为 0。</p>\n<h3 id=\"e_shentsize\"><a class=\"anchor\" href=\"#e_shentsize\">#</a> e_shentsize</h3>\n<p>这一项给出节头的字节长度（<strong>Section Header ENTry SIZE</strong>）。一个节头是节头表中的一项；节头表中所有项占据的空间大小相同。</p>\n<h3 id=\"e_shnum\"><a class=\"anchor\" href=\"#e_shnum\">#</a> e_shnum</h3>\n<p>这一项给出节头表中的项数（<strong>Section Header NUMber</strong>）。因此，  <code>e_shnum</code>  与  <code>e_shentsize</code>  的乘积即为节头表的字节长度。如果文件中没有节头表，则该项值为 0。</p>\n<h3 id=\"e_shstrndx\"><a class=\"anchor\" href=\"#e_shstrndx\">#</a> e_shstrndx</h3>\n<p>这一项给出节头表中与节名字符串表相关的表项的索引值（<strong>Section Header table InDeX related with section name STRing table</strong>）, 即 section table 中的第<em> e_shstrndx</em> 项元素，保存了所有 section table 名称的字符串信息。如果文件中没有节名字符串表，则该项值为 <code>SHN_UNDEF</code></p>\n<h2 id=\"program-header\"><a class=\"anchor\" href=\"#program-header\">#</a> Program Header</h2>\n<p>Program Header Table 是一个结构体数组，每一个元素的类型是  <code>Elf32_Phdr</code> ，描述了一个段或者其它系统在准备程序执行时所需要的信息。其中，ELF 头中的  <code>e_phentsize</code>  和  <code>e_phnum</code>  指定了该数组每个元素的大小以及元素个数。一个目标文件的段包含一个或者多个节。<strong>程序的头部只有对于可执行文件和共享目标文件有意义。</strong></p>\n<p>可以说，Program Header Table 就是专门为 ELF 文件运行时中的段所准备的。</p>\n<p><code>Elf32_Phdr</code>  的数据结构如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word\tp_type<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">/* Segment type */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Elf32_Off\t    p_offset<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment file offset */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Elf32_Addr\tp_vaddr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment virtual address */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Elf32_Addr\tp_paddr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment physical address */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Elf32_Word\tp_filesz<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment size in file */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Elf32_Word\tp_memsz<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment size in memory */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Elf32_Word\tp_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment flags */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Elf32_Word\tp_align<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment alignment */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Phdr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每个字段的说明如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">p_type</td>\n<td style=\"text-align:left\">该字段为段的类型，或者表明了该结构的相关信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_offset</td>\n<td style=\"text-align:left\">该字段给出了从文件开始到该段开头的第一个字节的偏移。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_vaddr</td>\n<td style=\"text-align:left\">该字段给出了该段第一个字节在内存中的虚拟地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_paddr</td>\n<td style=\"text-align:left\">该字段仅用于物理地址寻址相关的系统中， 由于 “System V” 忽略了应用程序的物理寻址，可执行文件和共享目标文件的该项内容并未被限定。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_filesz</td>\n<td style=\"text-align:left\">该字段给出了文件镜像中该段的大小，可能为 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_memsz</td>\n<td style=\"text-align:left\">该字段给出了内存镜像中该段的大小，可能为 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_flags</td>\n<td style=\"text-align:left\">该字段给出了与段相关的标记。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p_align</td>\n<td style=\"text-align:left\">可加载的程序的段的 p_vaddr 以及 p_offset 的大小必须是 page 的整数倍。该成员给出了段在文件以及内存中的对齐方式。如果该值为 0 或 1 的话，表示不需要对齐。除此之外，p_align 应该是 2 的整数指数次方，并且 p_vaddr 与 p_offset 在模 p_align 的意义下，应该相等。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"p_type\"><a class=\"anchor\" href=\"#p_type\">#</a> p_type</h3>\n<p>可执行文件中的段类型如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">取值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">PT_NULL</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">表明段未使用，其结构中其他成员都是未定义的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_LOAD</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">此类型段为一个可加载的段，大小由 p_filesz 和 p_memsz 描述。文件中的字节被映射到相应内存段开始处。如果 p_memsz 大于 p_filesz，“剩余” 的字节都要被置为 0。p_filesz 不能大于 p_memsz。可加载的段在程序头部中按照 p_vaddr 的升序排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_DYNAMIC</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">此类型段给出动态链接信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_INTERP</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">此类型段给出了一个以 NULL 结尾的字符串的位置和长度，该字符串将被当作解释器调用。这种段类型仅对可执行文件有意义（也可能出现在共享目标文件中）。此外，这种段在一个文件中最多出现一次。而且这种类型的段存在的话，它必须在所有可加载段项的前面。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_NOTE</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">此类型段给出附加信息的位置和大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_SHLIB</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">该段类型被保留，不过语义未指定。而且，包含这种类型的段的程序不符合 ABI 标准。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_PHDR</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">该段类型的数组元素如果存在的话，则给出了程序头部表自身的大小和位置，既包括在文件中也包括在内存中的信息。此类型的段在文件中最多出现一次。<strong>此外，只有程序头部表是程序的内存映像的一部分时，它才会出现</strong>。如果此类型段存在，则必须在所有可加载段项目的前面。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PT_LOPROC~PT_HIPROC</td>\n<td style=\"text-align:left\">0x70000000 ~0x7fffffff</td>\n<td style=\"text-align:left\">此范围的类型保留给处理器专用语义。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"p_flags\"><a class=\"anchor\" href=\"#p_flags\">#</a> p_flags</h3>\n<p>被系统加载到内存中的程序至少有一个可加载的段。当系统为可加载的段创建内存镜像时，它会按照 p_flags 将段<strong>设置为对应的权限</strong>。可能的段权限位有</p>\n<p><img data-src=\"/ElfReader/segment_flag_bits.png\" alt=\"img\" style=\"aspect-ratio:809 / 251;\"></p>\n<p>其中，所有在 PF_MASKPROC 中的比特位都是被保留用于与处理器相关的语义信息。</p>\n<p>如果一个权限位被设置为 0，这种类型的段是不可访问的。实际的内存权限取决于相应的内存管理单元，不同的系统可能操作方式不一样。尽管所有的权限组合都是可以的，但是系统一般会授予比请求更多的权限。在任何情况下，除非明确说明，一个段不会有写权限。下面给出了所有的可能组合。</p>\n<p><img data-src=\"/ElfReader/segment-permission.png\" alt=\"img\" style=\"aspect-ratio:842 / 375;\"></p>\n<p>例如，一般来说，.text 段一般具有读和执行权限，但是不会有写权限。数据段一般具有写，读，以及执行权限。</p>\n<h2 id=\"section-header\"><a class=\"anchor\" href=\"#section-header\">#</a> Section Header</h2>\n<p>ELF 头中的  <code>e_shoff</code>  项给出了从文件开头到节头表位置的字节偏移。 <code>e_shnum</code>  告诉了我们节头表包含的项数； <code>e_shentsize</code>  给出了每一项的字节大小。</p>\n<p>节头表是一个数组，每个数组的元素的类型是  <code>ELF32_Shdr</code>  ，每一个元素都描述了一个节区的概要内容。每个节区头部可以用下面的数据结构进行描述：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Elf32_Word\tsh_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section name (string tbl index) */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Elf32_Word\tsh_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section type */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Elf32_Word\tsh_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section flags */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Elf32_Addr\tsh_addr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section virtual addr at execution */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Elf32_Off\tsh_offset<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section file offset */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Elf32_Word\tsh_size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section size in bytes */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Elf32_Word\tsh_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Link to another section */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Elf32_Word\tsh_info<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Additional section information */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Elf32_Word\tsh_addralign<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section alignment */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Elf32_Word\tsh_entsize<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Entry size if section holds table */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Shdr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每个字段的含义如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sh_name</td>\n<td style=\"text-align:left\">节名称，是节区头字符串表节区中（Section Header String Table Section）的索引，因此该字段实际是一个数值。在字符串表中的具体内容是以 NULL 结尾的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_type</td>\n<td style=\"text-align:left\">根据节的内容和语义进行分类，具体的类型下面会介绍。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_flags</td>\n<td style=\"text-align:left\">每一比特代表不同的标志，描述节是否可写，可执行，需要分配内存等属性。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_addr</td>\n<td style=\"text-align:left\">如果节区将出现在进程的内存映像中，此成员给出节区的第一个字节应该在进程镜像中的位置。否则，此字段为 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_offset</td>\n<td style=\"text-align:left\">给出节区的第一个字节与文件开始处之间的偏移。SHT_NOBITS 类型的节区不占用文件的空间，因此其 sh_offset 成员给出的是概念性的偏移。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_size</td>\n<td style=\"text-align:left\">此成员给出节区的字节大小。除非节区的类型是 SHT_NOBITS ，否则该节占用文件中的 sh_size 字节。类型为 SHT_NOBITS 的节区长度可能非零，不过却不占用文件中的空间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_link</td>\n<td style=\"text-align:left\">此成员给出节区头部表索引链接，其具体的解释依赖于节区类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_info</td>\n<td style=\"text-align:left\">此成员给出附加信息，其解释依赖于节区类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_addralign</td>\n<td style=\"text-align:left\">某些节区的地址需要对齐。例如，如果一个节区有一个 doubleword 类型的变量，那么系统必须保证整个节区按双字对齐。也就是说， <code>sh_addr%sh_addralign=0</code> 。目前它仅允许为 0，以及 2 的正整数幂数。 0 和 1 表示没有对齐约束。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sh_entsize</td>\n<td style=\"text-align:left\">某些节区中存在具有固定大小的表项的表，如符号表。对于这类节区，该成员给出每个表项的字节大小。反之，此成员取值为 0。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sh_type\"><a class=\"anchor\" href=\"#sh_type\">#</a> sh_type</h3>\n<p>节类型目前有下列可选范围，其中 SHT 是 <strong>Section Header Table</strong> 的简写。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">取值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SHT_NULL</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">该类型节区是非活动的，这种类型的节头中的其它成员取值无意义。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_PROGBITS</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">该类型节区包含程序定义的信息，它的格式和含义都由程序来决定。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_SYMTAB</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">该类型节区包含一个符号表（<strong>SYMbol TABle</strong>）。目前目标文件对每种类型的节区都只 能包含一个，不过这个限制将来可能发生变化。 一般，SHT_SYMTAB 节区提供用于链接编辑（指 ld 而言） 的符号，尽管也可用来实现动态链接。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_STRTAB</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">该类型节区包含字符串表（ <strong>STRing TABle</strong> ）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_RELA</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">该类型节区包含显式指定位数的重定位项（ <strong>RELocation entry with Addends</strong> ），例如，32 位目标文件中的 Elf32_Rela 类型。此外，目标文件可能拥有多个重定位节区。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_HASH</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">该类型节区包含符号哈希表（ <strong>HASH table</strong> ）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_DYNAMIC</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">该类型节区包含动态链接的信息（ <strong>DYNAMIC linking</strong> ）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_NOTE</td>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">该类型节区包含以某种方式标记文件的信息（<strong>NOTE</strong>）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_NOBITS</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">该类型节区不占用文件的空间，其它方面和 SHT_PROGBITS 相似。尽管该类型节区不包含任何字节，其对应的节头成员 sh_offset 中还是会包含概念性的文件偏移。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_REL</td>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">该类型节区包含重定位表项（<strong>RELocation entry without Addends</strong>），不过并没有指定位数。例如，32 位目标文件中的 Elf32_rel 类型。目标文件中可以拥有多个重定位节区。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_SHLIB</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">该类型此节区被保留，不过其语义尚未被定义。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_DYNSYM</td>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">作为一个完整的符号表，它可能包含很多对动态链接而言不必 要的符号。因此，目标文件也可以包含一个 SHT_DYNSYM 节区，其中保存动态链接符号的一个最小集合，以节省空间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_LOPROC</td>\n<td style=\"text-align:left\">0X70000000</td>\n<td style=\"text-align:left\">此值指定保留给处理器专用语义的下界（ <strong>LOw PROCessor-specific semantics</strong> ）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_HIPROC</td>\n<td style=\"text-align:left\">OX7FFFFFFF</td>\n<td style=\"text-align:left\">此值指定保留给处理器专用语义的上界（ <strong>HIgh PROCessor-specific semantics</strong> ）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_LOUSER</td>\n<td style=\"text-align:left\">0X80000000</td>\n<td style=\"text-align:left\">此值指定保留给应用程序的索引下界。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_HIUSER</td>\n<td style=\"text-align:left\">0X8FFFFFFF</td>\n<td style=\"text-align:left\">此值指定保留给应用程序的索引上界。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sh_flags\"><a class=\"anchor\" href=\"#sh_flags\">#</a> sh_flags</h3>\n<p>节头中  <code>sh_flags</code>  字段的每一个比特位都可以给出其相应的标记信息，其定义了对应的节区的内容是否可以被修改、被执行等信息。如果一个标志位被设置，则该位取值为 1，未定义的位都为 0。目前已定义值如下，其他值保留。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SHF_WRITE</td>\n<td style=\"text-align:left\">0x1</td>\n<td style=\"text-align:left\">这种节包含了进程运行过程中可以被写的数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHF_ALLOC</td>\n<td style=\"text-align:left\">0x2</td>\n<td style=\"text-align:left\">这种节在进程运行时占用内存。对于不占用目标文件的内存镜像空间的某些控制节，该属性处于关闭状态 (off)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHF_EXECINSTR</td>\n<td style=\"text-align:left\">0x4</td>\n<td style=\"text-align:left\">这种节包含可执行的机器指令（<strong>EXECutable INSTRuction</strong>）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHF_MASKPROC</td>\n<td style=\"text-align:left\">0xf0000000</td>\n<td style=\"text-align:left\">所有在这个掩码中的比特位用于特定处理器语义。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sh_link-sh_info\"><a class=\"anchor\" href=\"#sh_link-sh_info\">#</a> sh_link &amp; sh_info</h3>\n<p>当节区类型的不同的时候，sh_link 和 sh_info 也会具有不同的含义。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">sh_type</th>\n<th style=\"text-align:left\">sh_link</th>\n<th style=\"text-align:left\">sh_info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SHT_DYNAMIC</td>\n<td style=\"text-align:left\">节区中使用的字符串表的节头索引</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_HASH</td>\n<td style=\"text-align:left\">此哈希表所使用的符号表的节头索引</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_REL/SHT_RELA</td>\n<td style=\"text-align:left\">与符号表相关的节头索引</td>\n<td style=\"text-align:left\">重定位应用到的节的节头索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHT_SYMTAB/SHT_DYNSYM</td>\n<td style=\"text-align:left\">操作系统特定信息，Linux 中的 ELF 文件中该项指向符号表中符号所对应的字符串节区在 Section Header Table 中的偏移。</td>\n<td style=\"text-align:left\">操作系统特定信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">other</td>\n<td style=\"text-align:left\"><code>SHN_UNDEF</code></td>\n<td style=\"text-align:left\">0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"elf-sections\"><a class=\"anchor\" href=\"#elf-sections\">#</a> ELF sections</h2>\n<h3 id=\"节的分类\"><a class=\"anchor\" href=\"#节的分类\">#</a> 节的分类</h3>\n<h4 id=\"text节\"><a class=\"anchor\" href=\"#text节\">#</a> .text 节</h4>\n<p><code>.text</code>  节是保存了程序代码指令的<strong>代码节</strong>。<strong>一段可执行程序，如果存在 Phdr，则 <code>.text</code>  节就会存在于 <code>text</code>  段中</strong>。由于 <code>.text</code>  节保存了程序代码，所以节类型为 <code>SHT_PROGBITS</code> 。</p>\n<h4 id=\"rodata节\"><a class=\"anchor\" href=\"#rodata节\">#</a> .rodata 节</h4>\n<p><code>rodata</code>  节保存了只读的数据，如一行 C 语言代码中的字符串。由于 <code>.rodata</code>  节是只读的，所以只能存在于一个可执行文件的<strong>只读段</strong>中。因此，只能在 <code>text</code>  段（不是 <code>data</code>  段）中找到 <code>.rodata</code>  节。由于 <code>.rodata</code>  节是只读的，所以节类型为 <code>SHT_PROGBITS</code> 。</p>\n<h4 id=\"plt节过程链接表\"><a class=\"anchor\" href=\"#plt节过程链接表\">#</a> .plt 节（过程链接表）</h4>\n<p><code>.plt</code>  节也称为<strong>过程链接表（Procedure Linkage Table）</strong>，<strong>其包含了动态链接器调用从共享库导入的函数所必需的相关代码</strong>。由于 <code>.plt</code>  节保存了代码，所以节类型为 <code>SHT_PROGBITS</code> 。</p>\n<h4 id=\"data节\"><a class=\"anchor\" href=\"#data节\">#</a> .data 节</h4>\n<p><code>.data</code>  节存在于 <code>data</code>  段中，<strong>其保存了初始化的全局变量等数据</strong>。由于 <code>.data</code>  节保存了程序的变量数据，所以节类型为 <code>SHT_PROGBITS</code> 。</p>\n<h4 id=\"bss节\"><a class=\"anchor\" href=\"#bss节\">#</a> .bss 节</h4>\n<p><code>.bss</code>  节存在于 <code>data</code>  段中，占用空间不超过 4 字节，仅表示这个节本省的空间。<strong> <code>.bss</code>  节保存了未进行初始化的全局数据</strong>。程序加载时数据被初始化为 0，在程序执行期间可以进行赋值。由于 <code>.bss</code>  节未保存实际的数据，所以节类型为 <code>SHT_NOBITS</code> 。</p>\n<h4 id=\"gotplt节全局偏移表-过程链接表\"><a class=\"anchor\" href=\"#gotplt节全局偏移表-过程链接表\">#</a> .got.plt 节（全局偏移表 - 过程链接表）</h4>\n<p><code>.got</code>  节保存了<strong>全局偏移表</strong>。<strong> <code>.got</code>  节和 <code>.plt</code>  节一起提供了对导入的共享库函数的访问入口，由动态链接器在运行时进行修改</strong>。由于 <code>.got.plt</code>  节与程序执行有关，所以节类型为 <code>SHT_PROGBITS</code> 。</p>\n<h4 id=\"dynsym节动态链接符号表\"><a class=\"anchor\" href=\"#dynsym节动态链接符号表\">#</a> .dynsym 节（动态链接符号表）</h4>\n<p><code>.dynsym</code>  节保存在 <code>text</code>  段中。<strong>其保存了从共享库导入的动态符号表</strong>。节类型为 <code>SHT_DYNSYM</code> 。</p>\n<h4 id=\"dynstr节动态链接字符串表\"><a class=\"anchor\" href=\"#dynstr节动态链接字符串表\">#</a> .dynstr 节（动态链接字符串表）</h4>\n<p><code>.dynstr</code>  保存了动态链接字符串表，表中存放了一系列字符串，这些字符串代表了符号名称，以空字符作为终止符。</p>\n<h4 id=\"rel节重定位表\"><a class=\"anchor\" href=\"#rel节重定位表\">#</a> .rel.* 节（重定位表）</h4>\n<p>重定位表保存了重定位相关的信息，<strong>这些信息描述了如何在链接或运行时，对 ELF 目标文件的某部分或者进程镜像进行补充或修改</strong>。由于重定位表保存了重定位相关的数据，所以节类型为 <code>SHT_REL</code> 。</p>\n<h4 id=\"hash节\"><a class=\"anchor\" href=\"#hash节\">#</a> .hash 节</h4>\n<p><code>.hash</code>  节也称为 <code>.gnu.hash</code> ，其保存了一个用于查找符号的散列表。</p>\n<h4 id=\"symtab节符号表\"><a class=\"anchor\" href=\"#symtab节符号表\">#</a> .symtab 节（符号表）</h4>\n<p><code>.symtab</code>  节是一个 <code>ElfN_Sym</code>  的数组，保存了符号信息。节类型为 <code>SHT_SYMTAB</code> 。</p>\n<h4 id=\"strtab节字符串表\"><a class=\"anchor\" href=\"#strtab节字符串表\">#</a> .strtab 节（字符串表）</h4>\n<p><code>.strtab</code>  节保存的是符号字符串表，表中的内容会被 <code>.symtab</code>  的 <code>ElfN_Sym</code>  结构中的 <code>st_name</code>  引用。节类型为 <code>SHT_STRTAB</code> 。</p>\n<h4 id=\"ctors节和dtors节\"><a class=\"anchor\" href=\"#ctors节和dtors节\">#</a> .ctors 节和.dtors 节</h4>\n<p><code>.ctors</code> （<strong>构造器</strong>）节和 <code>.dtors</code> （<strong>析构器</strong>）节分别保存了指向构造函数和析构函数的函数指针，<strong>构造函数是在 main 函数执行之前需要执行的代码；析构函数是在 main 函数之后需要执行的代码</strong>。</p>\n<h3 id=\"符号表\"><a class=\"anchor\" href=\"#符号表\">#</a> 符号表</h3>\n<p><strong>符号是对某些类型的数据或代码（如全局变量或函数）的符号引用，函数名或变量名就是符号名</strong>。例如， <code>printf()</code>  函数会在动态链接符号表 <code>.dynsym</code>  中存有一个指向该函数的符号项（以 <code>Elf_Sym</code>  数据结构表示）。在大多数共享库和动态链接可执行文件中，存在两个符号表。即 <code>.dynsym</code>  和 <code>.symtab</code> 。</p>\n<p><strong> <code>.dynsym</code>  保存了引用来自外部文件符号的全局符号</strong>。如 <code>printf</code>  库函数。<strong> <code>.dynsym</code>  保存的符号是 <code>.symtab</code>  所保存符合的子集， <code>.symtab</code>  中还保存了可执行文件的本地符号</strong>。如全局变量，代码中定义的本地函数等。</p>\n<p>既然 <code>.dynsym</code>  是 <code>.symtab</code>  的子集，那为何要同时存在两个符号表呢？</p>\n<p>通过 <code>readelf -S</code>  命令可以查看可执行文件的输出，一部分节标志位（ <code>sh_flags</code> ）被标记为了<strong> A（ALLOC）、WA（WRITE/ALLOC）、AX（ALLOC/EXEC）</strong>。其中， <code>.dynsym</code>  被标记为 ALLOC，而 <code>.symtab</code>  则没有标记。</p>\n<p>ALLOC 表示有该标记的节会在运行时分配并装载进入内存，而 <code>.symtab</code>  不是在运行时必需的，因此不会被装载到内存中。<strong> <code>.dynsym</code>  保存的符号只能在运行时被解析，因此是运行时动态链接器所需的唯一符号</strong>。 <code>.dynsym</code>  对于动态链接可执行文件的执行是必需的，而 <code>.symtab</code>  只是用来进行调试和链接的。</p>\n<p><img data-src=\"/ElfReader/elf-symtab-strtab.png\" alt=\"img\" style=\"aspect-ratio:2148 / 1428;\"></p>\n<p>上图所示为通过符号表索引字符串表的示意图。符号表中的每一项都是一个 <code>Elf_Sym</code>  结构，对应可以在字符串表中索引得到一个字符串。该数据结构中成员的含义如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">st_name</td>\n<td style=\"text-align:left\">符号名。该值为该符号名在字符串表中的偏移地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st_value</td>\n<td style=\"text-align:left\">符号对应的值。存放符号的值（可能是地址或位置偏移量）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st_size</td>\n<td style=\"text-align:left\">符号的大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st_other</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st_shndx</td>\n<td style=\"text-align:left\">符号所在的节</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">st_info</td>\n<td style=\"text-align:left\">符号类型及绑定属性</td>\n</tr>\n</tbody>\n</table>\n<p>使用 readelf 工具我们也能够看到符号表的相关信息。</p>\n<pre><code>$ readelf -s hello.o\n\nSymbol table '.symtab' contains 11 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1\n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3\n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4\n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5\n     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    8\n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    6\n     9: 0000000000000000    21 FUNC    GLOBAL DEFAULT    1 main\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND puts\n</code></pre>\n<h3 id=\"字符串表\"><a class=\"anchor\" href=\"#字符串表\">#</a> 字符串表</h3>\n<p>类似于符号表，在大多数共享库和动态链接可执行文件中，也存在两个字符串表。即 <code>.dynstr</code>  和 <code>.strtab</code> ，分别对应于 <code>.dynsym</code>  和 <code>symtab</code> 。此外，还有一个 <code>.shstrtab</code>  的节头字符串表，用于保存节头表中用到的字符串，可通过 <code>sh_name</code>  进行索引。</p>\n<p>ELF 文件中所有字符表的结构基本一致，如上图所示。</p>\n<h3 id=\"重定位表\"><a class=\"anchor\" href=\"#重定位表\">#</a> 重定位表</h3>\n<p><strong>重定位就是将符号定义和符号引用进行连接的过程</strong>。可重定位文件需要包含描述如何修改节内容的相关信息，从而使可执行文件和共享目标文件能够保存进程的程序镜像所需要的正确信息。</p>\n<p>重定位表是进行重定位的重要依据。我们可以使用 objdump 工具查看目标文件的重定位表：</p>\n<pre><code>$ objdump -r hello.o\n\n\nhello.o:     file format elf64-x86-64\n\nRELOCATION RECORDS FOR [.text]:\nOFFSET           TYPE              VALUE\n0000000000000005 R_X86_64_32       .rodata\n000000000000000a R_X86_64_PC32     puts-0x0000000000000004\n\n\nRELOCATION RECORDS FOR [.eh_frame]:\nOFFSET           TYPE              VALUE\n0000000000000020 R_X86_64_PC32     .text\n</code></pre>\n<p>重定位表是一个 <code>Elf_Rel</code>  类型的数组结构，每一项对应一个需要进行重定位的项。 其成员含义如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">r_offset</td>\n<td style=\"text-align:left\">重定位入口的偏移。对于<strong>可重定位文件</strong>来说，这个值是该重定位入口所要修正的位置的第一个字节相对于节起始的偏移；对于<strong>可执行文件或共享对象文件</strong>来说，这个值是该重定位入口所要修正的位置的第一个字节的虚拟地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r_info</td>\n<td style=\"text-align:left\">重定位入口的类型和符号。因为不同处理器的指令系统不一样，所以重定位所要修正的指令地址格式也不一样。每种处理器都有自己的一套重定位入口的类型。对于<strong>可执行文件和共享目标文件</strong>来说，它们的重定位入口是动态链接类型的。</td>\n</tr>\n</tbody>\n</table>\n<p>重定位是目标文件链接成为可执行文件的关键。</p>\n<h1 id=\"elf的链接过程\"><a class=\"anchor\" href=\"#elf的链接过程\">#</a> ELF 的链接过程</h1>\n<blockquote>\n<p>此处的内容来源于<span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNi8wMy9saW5raW5nLXN0YXRpYy1saW5raW5nLWR5bmFtaWMtbGlua2luZy8=\">计算机那些事 (5)—— 链接、静态链接、动态链接</span>，仅作学习记录和备份用</p>\n</blockquote>\n<h2 id=\"链接概述\"><a class=\"anchor\" href=\"#链接概述\">#</a> 链接概述</h2>\n<p>模块化设计是软件开发中最常用的设计思想。<strong>链接（Linking）</strong> 本质上就是把各个模块之间相互引用的部分处理好，使得各个模块之间能够正确衔接。比如：</p>\n<blockquote>\n<p>我们在模块 <code>main.c</code>  中使用另一个模块 <code>func.c</code>  中的 <code>foo()</code>  函数。我们在 <code>main.c</code>  模块中每一处调用 <code>foo</code>  时都必须确切知道 <code>foo</code>  函数的地址。但由于每个模块都是单独编译的。编译器在编译 <code>main.c</code>  的时候并不知道 <code>foo</code>  函数的地址。所以编译器会暂时把这些调用 <code>foo</code>  的指令的目标地址搁置，等待最后链接时由链接器将这些指令的目标地址修正。这就是静态链接最基本的过程和作用。</p>\n</blockquote>\n<p>如下图所示为最基本的静态链接过程示意图。每个模块的源代码文件（如 <code>.c</code> ）文件经过编译器编译成<strong>目标文件</strong>（Object File，一般扩展名为 <code>.o</code>  或 <code>.obj</code> ）。目标文件和 <strong>库（Library）</strong> 一起链接形成最终的可执行文件。</p>\n<p>其中，最常见的库就是<strong>运行时库（Runtime Library）</strong>，它是支持程序运行的基本函数的集合。<strong>库本质上是一组目标文件的包，由一些最常用的代码编译成目标文件后打包而成</strong>。</p>\n<p><img data-src=\"/ElfReader/linking-process.png\" alt=\"img\" style=\"aspect-ratio:2148 / 2595;\"></p>\n<p>链接过程主要包含了三个步骤：</p>\n<ol>\n<li><strong>地址与空间分配（Address and Storage Allocation）</strong></li>\n<li><strong>符号解析（Symbol Resolution）</strong></li>\n<li><strong>重定位（Relocation）</strong></li>\n</ol>\n<p>下面，我们以两个源代码文件 <code>a.c</code>  和 <code>b.c</code>  为例展开分析。</p>\n<pre><code>// a.c\nextern int shared;\n\nint main() &#123;\n    int a = 100;\n    swap(&amp;a, &amp;shared);\n&#125;\n// b.c\nint shared = 1;\n\nvoid swap(int *a, int *b) &#123;\n    *a ^= *b ^= *a ^= *b;\n&#125;\n</code></pre>\n<p>其中， <code>b.c</code>  中定义了两个全局符号：变量 <code>shared</code> 、函数 <code>swap</code> ； <code>a.c</code>  中定义了一个全局符号： <code>main</code> 。 <code>a.c</code>  引用了 <code>b.c</code>  中的 <code>swap</code>  和 <code>shared</code> 。接下来我们要将两个目标文件链接在一起并最终形成一个执行程文件 <code>ab</code> 。</p>\n<p>使用 <code>gcc -c</code>  命令我们可以分别编译得到 <code>a.o</code>  和 <code>b.o</code>  两个目标文件。</p>\n<h3 id=\"地址与空间分配\"><a class=\"anchor\" href=\"#地址与空间分配\">#</a> 地址与空间分配</h3>\n<p>在介绍 ELF 文件结构关于段与节的区别时，我们就提到过可执行文件中的段是由目标文件中的节合并而来的。那么，我们的第一个问题是：对于多个输入目标文件，链接器如何将它们的各个节合并到输出文件呢？或者说，输出文件中的空间如何分配给输入文件。</p>\n<h4 id=\"按序叠加\"><a class=\"anchor\" href=\"#按序叠加\">#</a> 按序叠加</h4>\n<p>一个最简单的方案就是将输入的文件按序叠加，如下图所示。</p>\n<p><img data-src=\"/ElfReader/elf-simple-merge.png\" alt=\"img\" style=\"aspect-ratio:2148 / 2595;\"></p>\n<p>虽然这种方法非常简单，但是它存在一个问题：在有很多输入文件的情况下，输出文件会有很多零散的节。这种做法非常浪费空间，因为每个节都需要有一定的地址和空间对齐要求。x86 硬件的对齐要求是 4KB。如果一个节的大小只有 1 个字节，它也要在内存在重用 4KB。这样会造成大量内部碎片。所以不是一个好的方案。</p>\n<h4 id=\"合并相似节\"><a class=\"anchor\" href=\"#合并相似节\">#</a> 合并相似节</h4>\n<p>一个更加实际的方法便是合并相同性质的节，比如：将所有输入文件的 <strong> <code>.text</code>  节</strong>合并到输出文件的 <strong> <code>text</code>  段</strong>（注意，此时出现了段和节两个概念），如下图所示。</p>\n<p><img data-src=\"/ElfReader/elf-similar-merge.png\" alt=\"img\" style=\"aspect-ratio:2148 / 2595;\"></p>\n<p>其中 <code>.bss</code>  节在目标文件和可执行文件中不占用文件的空间，但是它在装载时占用地址空间。事实上，这里的<strong>空间和地址</strong>有两层含义:</p>\n<ol>\n<li>在输出的可执行文件中的空间</li>\n<li>在装载后的虚拟地址中的空间</li>\n</ol>\n<p>对于有实际数据的节，如 <code>.text</code>  和 <code>.data</code> ，它们在文件中和虚拟地址中都要分配空间，因为它们在这两者中都存在；对于 <code>.bss</code>  来，分配空间的意义只局限于虚拟地址空间，因为它在文件中并没有内容。<strong>我们在这里谈到的空间分配只关注于虚拟地址空间的分配</strong>，因为这关系到链接器后面的关于地址计算的步骤，而可执行文件本身的空间分配与链接的关系并不大。</p>\n<p>现在的链接器空间分配的策略基本上都采用 “合并相似节” 的方法，使用这种方法的链接器一般采用一种叫 <strong>两步链接（Two-pass Linking）</strong> 的方法。即整个链接过程分为两步：</p>\n<ul>\n<li><strong>第一步 地址与空间分配</strong><br>\n扫描所有的输入目标文件，获得它们的各个节的长度、属性、位置，并将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，统一放到一个全局的符号表。这一步，链接器能够获得所有输入目标文件的节的长度，并将它们合并，计算出输出文件中各个节合并后的长度与位置，并建立映射关系。</li>\n<li><strong>第二步 符号解析与重定位</strong><br>\n使用前一步中收集到的所有信息，读取输入文件中节的输数据、重定位信息，并且进行符号解析与重定位、调整代码、调整代码中的地址等。事实上，第二步是链接过程的核心，尤其是重定位。</li>\n</ul>\n<p><img data-src=\"/ElfReader/two-step-linking.png\" alt=\"img\" style=\"aspect-ratio:2148 / 1257;\"></p>\n<p>在地址与空间分配步骤完成之后，相似权限的节会被合并成段，并生成了<span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNS8yMS9lbGYtaW50cm9kdWNlLw==\"> ELF 文件结构</span>一文中没有介绍的 <strong>程序头表（Program Header Table）</strong> 结构。如下右图可执行文件结构所示，主要生成两个段：代码段（  <code>text</code>  段）、数据段（  <code>data</code>  段 ）。</p>\n<p><img data-src=\"/ElfReader/different-elf-type.png\" alt=\"img\" style=\"aspect-ratio:2148 / 1257;\"></p>\n<p>我们使用 ld 或 gcc 将 <code>a.o</code>  和 <code>b.o</code>  链接起来，然后使用 objdump 工具来查看链接前后的地址分配情况。</p>\n<pre><code>$ objdump -h a.o\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .text         0000004f  0000000000000000  0000000000000000  00000040  2**0\n                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE\n  1 .data         00000000  0000000000000000  0000000000000000  0000008f  2**0\n                  CONTENTS, ALLOC, LOAD, DATA\n  2 .bss          00000000  0000000000000000  0000000000000000  0000008f  2**0\n                  ALLOC\n  ...\n$ objdump -h b.o\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .text         0000004b  0000000000000000  0000000000000000  00000040  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .data         00000004  0000000000000000  0000000000000000  0000008c  2**2\n                  CONTENTS, ALLOC, LOAD, DATA\n  2 .bss          00000000  0000000000000000  0000000000000000  00000090  2**0\n                  ALLOC\n  ...\n$ objdump -h ab\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  ...\n  13 .text         00000202  0000000000400450  0000000000400450  00000450  2**4\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  ...\n  24 .data         00000014  0000000000601028  0000000000601028  00001028  2**3\n                  CONTENTS, ALLOC, LOAD, DATA\n  25 .bss          00000004  000000000060103c  000000000060103c  0000103c  2**0\n                  ALLOC\n  ...\n</code></pre>\n<p>可以发现，链接前目标文件中所有节的 <strong>VMA（Virtual Memory Address）</strong> 都是 0，因为虚拟空间还没有分配。链接后，可执行文件 <code>ab</code>  中各个节被分配到了相应的虚拟地址，如 <code>.text</code>  节被分配到了地址 <code>0x0000000000400450</code> 。</p>\n<p>那么，为什么链接器要将可执行文件 <code>ab</code>  的 <code>.text</code>  节分配到 <code>0x0000000000400450</code> ？而不是从虚拟空间的 0 地址开始分配呢？这涉及到操作系统的进程虚拟地址空间的分配规则。在 Linux x86-64 系统中，代码段总是从 <code>0x0000000000400000</code>  开始的，另外 <code>.text</code>  节之前还有 <code>ELF Header</code> 、 <code>Program Header Table</code> 、 <code>.init</code>  等占用了一定的空间，所以就被分配到了 <code>0x0000000000400450</code> 。</p>\n<h3 id=\"符号解析\"><a class=\"anchor\" href=\"#符号解析\">#</a> 符号解析</h3>\n<p>在<strong>两步链接</strong>中，这一步和重定位被合并成了一步，这是因为重定位的过程是伴随着符号解析的。这里我们分开介绍。</p>\n<p>链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来。对那些和引用定义在相同模块的局部符号的引用，符号解析是非常简单的。编译器只允许每个模块中每个局部符号有一个定义。静态局部变量也会有本地链接器符号，编译器还要确保它们拥有唯一的名字。</p>\n<p>然而，对于全局符号的解析要复杂得多。当编译器遇到一个不是在当前模块中定义的符号（变量或函数名）时，会假设该符号是在其他某个模块中定义的，生成一个链接器符号表条目，并把它交给链接器处理。如果链接器在它的任何输入模块中都找不到这个被引用符号的定义，就输出一条错误信息并终止。</p>\n<p>另一方面，对全局符号的解析，经常会面临多个目标文件可能会定义相同名字的全局符号。这种情况下，链接器必须要么标志一个错误，要么以某种方法选出一个定义并抛弃其他定义。</p>\n<h4 id=\"多重定义的全局符号解析\"><a class=\"anchor\" href=\"#多重定义的全局符号解析\">#</a> 多重定义的全局符号解析</h4>\n<p>链接器的输入是一组可重定位目标模块。每个模块定义一组符号，有些是局部符号（只对定义该符号的模块可见），有些是全局符号（对其他模块也可见）。如果多个模块定义同名的全局符号，该如何进行取舍？</p>\n<p>Linux 编译系统采用如下的方法解决多重定义的全局符号解析：</p>\n<p><strong>在编译时，编译器想汇编器输出每个全局符号，或者是强（strong）或者是弱（weak），而汇编器把这个信息隐含地编码在可重定位目标文件的符号表中。</strong></p>\n<p>根据强弱符号的定义，Linux 链接器使用下面的规则来处理多重定义的符号名：</p>\n<ul>\n<li><strong>规则 1：不允许有多个同名的强符号。</strong></li>\n<li><strong>规则 2：如果有一个强符号和多个弱符号同名，则选择强符号。</strong></li>\n<li><strong>规则 3：如果有多个弱符号同名，则从这些弱符号中任意选择一个。</strong></li>\n</ul>\n<p>另一方面，由于允许一个符号定义在多个文件中，所以可能会导致一个问题：如果一个弱符号定义在多个目标文件中，而它们的类型不同，怎么办？这种情况主要有三种：</p>\n<ul>\n<li><strong>情况 1：两个或两个以上的强符号类型不一致。</strong></li>\n<li><strong>情况 2：有一个强符号，其他都是弱符号，出现类型不一致。</strong></li>\n<li><strong>情况 3：两个或两个以上弱符号类型不一致。</strong></li>\n</ul>\n<p>其中，情况 1 由于多个强符号定义本身就是非法的，所以链接器就会报错。对于后两种情况，编译器和链接器采用一种叫 <strong>COMMON 块（Common Block ）</strong> 的机制来处理。其过程如下：</p>\n<p><strong>首先，编译器将未初始化的全局变量定义为弱符号处理。对于情况 3，最终链接时选择最大的类型。对于情况 2，最终输出结果中的符号所占空间与强符号相同，如果链接过程中有弱符号大于强符号，链接器会发出警告。</strong></p>\n<h3 id=\"重定位\"><a class=\"anchor\" href=\"#重定位\">#</a> 重定位</h3>\n<p>事实上，重定位过程也伴随着符号的解析过程。链接的前两步完成之后，链接器就已经确定所有符号的虚拟地址了，那么链接器就可以根据符号的地址对每个需要重定位的指令进行地址修正。</p>\n<p>那么链接器如何知道哪些指令是要被调整的呢？事实上，我们前面提到的 ELF 文件中的 <strong>重定位表（Relocation Table）</strong> 专门用来保存这些与重定位相关的信息。</p>\n<p>对于可重定位的 ELF 文件来说，它必须包含重定位表，用来描述如何修改相应的节的内容。对于每个要被重定位的 ELF 节都有一个对应的重定位表。如果 <code>.text</code>  节需要被重定位，则会有一个相对应叫 <code>.rel.text</code>  的节保存了代码节的重定位表；如果 <code>.data</code>  节需要被重定位，则会有一个相对应的 <code>.rel.tdata</code>  的节保存了数据节的重定位表。</p>\n<p>我们可以使用 objdump 工具来查看目标文件中的重定位表：</p>\n<pre><code>$ objdump -r a.o\n\na.o:     file format elf64-x86-64\n\nRELOCATION RECORDS FOR [.text]:\nOFFSET           TYPE              VALUE\n0000000000000023 R_X86_64_32       share\n0000000000000030 R_X86_64_PC32     swap-0x0000000000000004\n0000000000000049 R_X86_64_PC32     __stack_chk_fail-0x0000000000000004\n\n\nRELOCATION RECORDS FOR [.eh_frame]:\nOFFSET           TYPE              VALUE\n0000000000000020 R_X86_64_PC32     .text\n</code></pre>\n<p>我们可以看到每个要被重定位的地方是一个 <strong>重定位入口（Relocation Entry）</strong>。利用数据结构成员包含的信息，即可完成重定位。</p>\n<h2 id=\"静态链接\"><a class=\"anchor\" href=\"#静态链接\">#</a> 静态链接</h2>\n<p>事实上，静态链接的过程就是上文所描述的过程。在 Linux 中，静态链接器（static linker） <code>ld</code>  以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的、可以加载和运行的可执行目标文件作为输出。输入的可重定位目标文件由各种不同的节组成，每一节都是一个连续的字节序列。</p>\n<h2 id=\"动态链接\"><a class=\"anchor\" href=\"#动态链接\">#</a> 动态链接</h2>\n<p>静态链接使得进行模块化开发，大大提供了程序的开发效率。随着，程序规模的扩大，静态链接的诸多缺点也逐渐暴露出来，如：浪费内存和磁盘空间、模块更新困难等。在静态链接中，C 语言静态库是很典型的浪费空间的例子。关于模块更新，静态链接的程序有任何更新，都必须重新编译链接，用户则需要重新下载安装该程序。</p>\n<p>解决空间浪费和更新困难最简单的方法便是将程序的模块相互分割开来，形成独立文件。简而言之，就是不对那些组成程序的目标文件进行链接，而是等到程序要运行时才进行链接。</p>\n<h3 id=\"动态链接的基本实现\"><a class=\"anchor\" href=\"#动态链接的基本实现\">#</a> 动态链接的基本实现</h3>\n<p>动态链接涉及运行时的链接以及多个文件的装载，必需要有操作系统的支持。因为动态链接的情况下，进程的虚拟地址空间的分布会比静态链接情况下更为复杂，还有一些存储管理、内存共享、进程线程等机制在动态链接下也会有一些微妙的变化。</p>\n<p>目前，主流操作系统都支持动态链接。在 Linux 中，ELF 动态链接文件被称为 <strong>动态共享对象（DSO，Dynamic Shared Objects）</strong>，一般以 <code>.so</code>  为后缀；在 Windows 中，动态链接文件被称为 <strong>动态链接库（Dynamic Linking Library）</strong>，一般以 <code>.dll</code>  为后缀。</p>\n<p>在 Linux 中，常用的 C 语言库的运行库 glibc，其动态链接形式的版本保留在  <code>/lib</code>  目录下，文件名为  <code>libc.so</code> 。整个系统只保留一份 C 语言动态链接文件 <code>libc.so</code> ，所有的 C 语言编写的、动态链接的程序都可以在运行时使用它。当程序被装载时，系统的<strong>动态链接器</strong>会将程序所需要的所有动态链接库装载到进程的地址空间，并将程序中所有未解析的符号绑定到相应的动态链接库中，并进行重定位。</p>\n<h3 id=\"动态链接程序运行时地址空间分布\"><a class=\"anchor\" href=\"#动态链接程序运行时地址空间分布\">#</a> 动态链接程序运行时地址空间分布</h3>\n<p>对于静态链接的可执行文件来说，整个进程只有一个文件要被映射，即可执行文件。而对于动态链接，除了可执行文件，还有它所依赖的共享目标文件。</p>\n<p>关于共享目标文件在内存中的地址分配，主要有两种解决方案，分别是：</p>\n<ul>\n<li><strong>静态共享库（Static Shared Library）</strong>（地址固定）</li>\n<li><strong>动态共享库（Dynamic Shared Libary）</strong>（地址不固定）</li>\n</ul>\n<h4 id=\"静态共享库\"><a class=\"anchor\" href=\"#静态共享库\">#</a> 静态共享库</h4>\n<p>静态共享库的做法是将程序的各个模块统一交给操作系统进行管理，操作系统在<strong>某个特定的地址</strong>划分出一些地址块，为那些已知的模块预留足够的空间。因为这个地址对于不同的应用程序来说，都是固定的，所以称之为<strong>静态</strong>。</p>\n<p>但是静态共享库的目标地址会导致地址冲突、升级等问题。</p>\n<h4 id=\"动态共享库\"><a class=\"anchor\" href=\"#动态共享库\">#</a> 动态共享库</h4>\n<p>采用动态共享库的方式，也称为<strong>装载时重定位（Load Time Relocation）</strong>。其基本思路是：<strong>在链接时，对所有绝对地址的引用都不作重定位，而把这一步推迟到装载时再完成。一旦模块装载地址确定，即目标地址确定，那么系统就对程序中所有的绝对地址引用进行重定位。</strong></p>\n<p>但是这种方式也存在一些问题。比如，动态链接模块被装载映射至虚拟空间后，指令部分是在多个进程间共享的，由于装载时重定位的方法需要修改指令，所以没有办法做到同一份指令被多个进程共享，因为指令被重定位后对于每个进程来说都是不同的。</p>\n<p>虽然，动态链接库中的代码是共享的，但是其中的可修改数据部分对于不同进程来说是由多个副本的。基于此，一种名为<strong>地址无关代码</strong>的技术被提出以克服这个问题。</p>\n<h4 id=\"地址无关代码\"><a class=\"anchor\" href=\"#地址无关代码\">#</a> 地址无关代码</h4>\n<blockquote>\n<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。</p>\n</blockquote>\n<p><strong>地址无关代码（PIC，Position-independent Code）</strong> 技术完美阐释了上面这句名言，其基本原理是：把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分就可以保持不变，而数据部分可以在每个进程中拥有一个副本。</p>\n<p>共享对象模块中的地址引用按照是否为跨模块分为两类：模块内部引用、模块外部引用。按照不用的引用方式又可分为：指令引用、数据引用。以如下代码为例，可得出如下四种类型：</p>\n<ul>\n<li><strong>类型 1：模块内部的函数调用。</strong></li>\n<li><strong>类型 2：模块内部的数据访问，如模块中定义的全局变量、静态变量。</strong></li>\n<li><strong>类型 3：模块外部的函数调用。</strong></li>\n<li><strong>类型 4：模块外部的数据访问，如其他模块中定义的全局变量。</strong></li>\n</ul>\n<pre><code>static int a;\nextern int b;\nextern void ext();\n\nvoid bar() &#123;\n    a = 1;      // 类型2：模块内部数据访问\n    b = 2;      // 类型4：模块外部数据访问\n&#125;\n\nvoid foo() &#123;\n    bar();      // 类型1：模块内部函数调用\n    ext();      // 类型4：模块外部函数调用\n&#125;\n</code></pre>\n<h5 id=\"类型1-模块内部函数调用\"><a class=\"anchor\" href=\"#类型1-模块内部函数调用\">#</a> 类型 1 模块内部函数调用</h5>\n<p>由于被调用的函数与调用者都处于同一模块，它们之间的相对位置是固定的。对于现代的系统来说，模块内部的调用都可以是相对地址调用，或者是基于寄存器的相对调用，所以对于这种指令是不需要重定位的。</p>\n<h5 id=\"类型2-模块内部数据访问\"><a class=\"anchor\" href=\"#类型2-模块内部数据访问\">#</a> 类型 2 模块内部数据访问</h5>\n<p>一个模块前面一般是若干个页的代码，后面紧跟着若干个页的数据，这些页之间的相对位置是固定的，即任何一条指令与它需要访问的模块内部数据之间的相对位置是固定的，所以只需要相对于当前指令加上固定的偏移量就可以访问模块内部数据了。</p>\n<h5 id=\"类型3-模块间数据访问\"><a class=\"anchor\" href=\"#类型3-模块间数据访问\">#</a> 类型 3 模块间数据访问</h5>\n<p>模块间的数据访问比模块内部稍微麻烦一些，因为模块间的数据访问目标地址要等到装载时才决定。此时，动态链接需要使用代码无关地址技术，其基本思想是把地址相关的部分放到数据段。ELF 的实现方法是：在数据段中建立一个<strong>指向这些变量的指针数组</strong>，也称为<strong>全局偏移表（Global Offset Table，GOT）</strong>，当代码需要引用该全局变量时，可以通过 GOT 中相对应的项间接引用。过程示意图如下所示：</p>\n<p><img data-src=\"/ElfReader/inter-module-data-access.png\" alt=\"img\" style=\"aspect-ratio:2148 / 1875;\"></p>\n<p>当指令中需要访问变量 b 时，程序会先找到 GOT，然后根据 GOT 中变量所对应的项找到变量的目标地址。每个变量都对应一个 4 字节的地址，链接器在装载模块时会查找每个变量所在的地址，然后填充 GOT 中的各个项，以确保每个指针所指向的地址正确。由于 GOT 本身是放在数据段的，所以它可以<strong>在模块装载时被修改</strong>，并且每个进程都可以有独立的副本，相互不受影响。</p>\n<h5 id=\"类型4-模块间函数调用\"><a class=\"anchor\" href=\"#类型4-模块间函数调用\">#</a> 类型 4 模块间函数调用</h5>\n<p>对于模块间函数调用，同样可以采用类型 3 的方法来解决。与上面的类型有所不同的是，GOT 中响应的项保存的是目标函数的地址，当模块需要调用目标函数时，可以通过 GOT 中的项进行间接跳转。</p>\n<h1 id=\"elf的装载过程\"><a class=\"anchor\" href=\"#elf的装载过程\">#</a> ELF 的装载过程</h1>\n<blockquote>\n<p>此处的内容来源于<span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNi8xNy9leGVjdXRhYmxlLWZpbGUtbG9hZC1hbmQtZXhlY3V0aW9uLw==\">计算机那些事 (6)—— 可执行文件的装载与运行</span>，仅作学习记录和备份用</p>\n</blockquote>\n<p>当我们在 Linux 的 bash 中输入命令执行某个 ELF 可执行文件时，如下所示。</p>\n<pre><code>$ ./hello.out\n</code></pre>\n<p>那么，Linux 系统是如何装载该 ELF 文件并执行的呢？这个过程可以分为以下这些步骤：</p>\n<ul>\n<li>创建新进程</li>\n<li>检查可执行文件类型</li>\n<li>搜索匹配装载处理过程</li>\n<li>装载执行可执行文件</li>\n</ul>\n<h2 id=\"创建新进程\"><a class=\"anchor\" href=\"#创建新进程\">#</a> 创建新进程</h2>\n<p>首先在用户层面，bash 进程会调用  <code>fork()</code>  系统调用创建一个新的进程。其次，新的进程通过调用  <code>execve()</code>  系统调用来执行指定的 ELF 文件。原先的 bash 进程继续返回并等待刚才启动的新进程结束，之后继续等待用户输入命令。</p>\n<p><code>execve()</code>  系统调用被定义在  <code>unistd.h</code> ，其原型如下所示。其中的三个参数分别对应被执行程序的 <strong>程序文件名</strong>、<strong>执行参数</strong>、<strong>环境变量</strong>。</p>\n<pre><code>int execve(const char *filename, char *const argv[], char *const envp[]);\n</code></pre>\n<h2 id=\"检查可执行文件类型\"><a class=\"anchor\" href=\"#检查可执行文件类型\">#</a> 检查可执行文件类型</h2>\n<p>当进入  <code>execve()</code>  系统调用之后，Linux 内核就开始进行真正的装载工作。在内核中， <code>execve()</code>  系统调用相应的入口是  <code>sys_execve()</code> 。 <code>sys_execve()</code>  进行一些参数的检查复制之后，调用  <code>do_execve()</code> 。 <code>do_execve()</code>  会首先查找被执行的文件，如果找到文件，则读取文件的前 128 个字节。</p>\n<p>为什么要先读取文件的前 128 个字节？这是因为 Linux 支持的可执行文件不止 ELF 一种，还包括 <strong>a.out</strong>、<strong>Java 程序</strong>、<strong>以  <code>#!</code>  开头的脚本程序</strong>。 <code>do_execve()</code>  通过读取前 128 个字节来判断文件的格式。每种可执行文件格式的开头几个字节都是很特殊的，尤其是前 4 个字节，被称为 <strong>魔数（Magic Number）</strong>。比如：ELF 的可执行文件格式的头 4 个字节为  <code>0x7F</code> 、 <code>e</code> 、 <code>l</code> 、 <code>f</code> ；Java 的可执行文件格式的头 4 个字节为  <code>c</code> 、 <code>a</code> 、 <code>f</code> 、 <code>e</code> ；如果是解释型语言的脚本，则第一行通常是  <code>#!/bin/sh</code>  或  <code>#!/user/bin/python</code> ，其中  <code>#</code>  和  <code>!</code>  构成了魔数，系统一旦判断到这两个字节，就对后面的字符串进行解析，以确定具体的解释程序的路径。</p>\n<h2 id=\"搜索匹配装载处理过程\"><a class=\"anchor\" href=\"#搜索匹配装载处理过程\">#</a> 搜索匹配装载处理过程</h2>\n<p>当  <code>do_execve()</code>  读取了 128 个字节的文件头部之后，调用  <code>search_binary_handle()</code>  去搜索和匹配合适的可执行文件装载处理过程。<strong>Linux 中所有被支持的可执行文件格式都有相应的装载处理过程</strong>， <code>search_binary_handler()</code>  会通过判断头部的魔术确定文件的格式，并且调用相应的装载处理过程。常见的可执行程序及其装载处理过程的对应关系如下所示.</p>\n<ul>\n<li>ELF 可执行文件： <code>load_elf_binary()</code></li>\n<li>a.out 可执行文件： <code>load_aout_binary()</code></li>\n<li>可执行脚本程序： <code>load_script()</code></li>\n</ul>\n<h2 id=\"装载执行可执行文件\"><a class=\"anchor\" href=\"#装载执行可执行文件\">#</a> 装载执行可执行文件</h2>\n<p>以 ELF 的装载处理过程  <code>load_elf_binary()</code>  为例，其所包含的步骤如下图所示：</p>\n<p><img data-src=\"/ElfReader/executable-file-load-process.png\" alt=\"img\" style=\"aspect-ratio:2148 / 2460;\"></p>\n<ol>\n<li>操作系统读取可执行文件 ELF 的  <code>Header</code> ，检查文件的有效性。</li>\n<li>操作系统读取可执行文件 ELF 的  <code>Program Header Table</code>  中读取每个  <code>Segment</code>  的虚拟地址、文件地址、属性等。</li>\n<li>操作系统根据  <code>Program Header Table</code>  将可执行文件 ELF 映射至内存。</li>\n<li>如果是静态链接的情况，则直接跳转至第 7 步；如果是动态链接的情况，操作系统将查找  <code>.interp</code>  节，找到 <strong>动态链接器（Dynamic Linker）</strong> 的位置，并启动动态链接器。在 Linux 下，动态链接器  <code>ld.so</code>  是一个共享对象，操作系统同样通过映射的方式将它加载到进程的地址空间。操作系统在加载完后，将控制权交给动态链接器的入口。</li>\n<li>动态链接器获得控制权后，开始执行一系列初始化操作。</li>\n<li>动态链接器根据当前的环境参数，对可执行文件进行动态链接工作。</li>\n<li>控制权被转交到可执行文件的入口地址，程序开始正式执行。</li>\n</ol>\n<h2 id=\"technical-note-on-elf-loading\"><a class=\"anchor\" href=\"#technical-note-on-elf-loading\">#</a> TECHNICAL NOTE ON ELF LOADING</h2>\n<p>在 <code>android-platform\\bionic\\linker\\linker_phdr.cpp</code>  中开头的这处注释也可以帮助我们快速理解 ELF 的加载过程</p>\n<p>TECHNICAL NOTE ON ELF LOADING.</p>\n<p>An ELF file’s program header table contains one or more PT_LOAD<br>\nsegments, which corresponds to portions of the file that need to<br>\nbe mapped into the process’ address space.</p>\n<p>Each loadable segment has the following important properties:</p>\n<pre><code>p_offset  -&gt; segment file offset\np_filesz  -&gt; segment file size\np_memsz   -&gt; segment memory size (always &gt;= p_filesz)\np_vaddr   -&gt; segment's virtual address\np_flags   -&gt; segment flags (e.g. readable, writable, executable)\np_align   -&gt; segment's in-memory and in-file alignment\n</code></pre>\n<p>We will ignore the p_paddr field of ElfW(Phdr) for now.</p>\n<p>The loadable segments can be seen as a list of [p_vaddr … p_vaddr+p_memsz)<br>\nranges of virtual addresses. A few rules apply:</p>\n<ul>\n<li>\n<p>the virtual address ranges should not overlap.</p>\n</li>\n<li>\n<p>if a segment’s p_filesz is smaller than its p_memsz, the extra bytes<br>\nbetween them should always be initialized to 0.</p>\n</li>\n<li>\n<p>ranges do not necessarily start or end at page boundaries. Two distinct<br>\nsegments can have their start and end on the same page. In this case, the<br>\npage inherits the mapping flags of the latter segment.</p>\n</li>\n</ul>\n<p>Finally, the real load addrs of each segment is not p_vaddr. Instead the<br>\nloader decides where to load the first segment, then will load all others<br>\nrelative to the first one to respect the initial range layout.</p>\n<p>For example, consider the following list:</p>\n<pre><code>[ offset:0,      filesz:0x4000, memsz:0x4000, vaddr:0x30000 ],\n[ offset:0x4000, filesz:0x2000, memsz:0x8000, vaddr:0x40000 ],\n</code></pre>\n<p>This corresponds to two segments that cover these virtual address ranges:</p>\n<pre><code>   0x30000...0x34000\n   0x40000...0x48000\n</code></pre>\n<p>If the loader decides to load the first segment at address 0xa0000000<br>\nthen the segments’ load address ranges will be:</p>\n<pre><code>   0xa0030000...0xa0034000\n   0xa0040000...0xa0048000\n</code></pre>\n<p>In other words, all segments must be loaded at an address that has the same<br>\nconstant offset from their p_vaddr value. This offset is computed as the<br>\ndifference between the first segment’s load address, and its p_vaddr value.</p>\n<p>However, in practice, segments do <em>not</em> start at page boundaries. Since we<br>\ncan only memory-map at page boundaries, this means that the bias is<br>\ncomputed as:</p>\n<pre><code>   load_bias = phdr0_load_address - PAGE_START(phdr0-&gt;p_vaddr)\n</code></pre>\n<p>(NOTE: The value must be used as a 32-bit unsigned integer, to deal with<br>\npossible wrap around UINT32_MAX for possible large p_vaddr values).</p>\n<p>And that the phdr0_load_address must start at a page boundary, with<br>\nthe segment’s real content starting at:</p>\n<pre><code>   phdr0_load_address + PAGE_OFFSET(phdr0-&gt;p_vaddr)\n</code></pre>\n<p>Note that ELF requires the following condition to make the mmap()-ing work:</p>\n<pre><code>  PAGE_OFFSET(phdr0-&gt;p_vaddr) == PAGE_OFFSET(phdr0-&gt;p_offset)\n</code></pre>\n<p>The load_bias must be added to any p_vaddr value read from the ELF file to<br>\ndetermine the corresponding memory address.</p>\n<h1 id=\"elfreader类\"><a class=\"anchor\" href=\"#elfreader类\">#</a> ElfReader 类</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>class ElfReader <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">ElfReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  bool <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_offset<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  bool <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>address_space_params<span class=\"token operator\">*</span> address_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">size_t</span> <span class=\"token function\">phdr_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> phdr_num_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token function\">load_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_start_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token class-name\">size_t</span> <span class=\"token function\">load_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> load_size_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token function\">gap_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>gap_start_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">size_t</span> <span class=\"token function\">gap_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> gap_size_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token function\">load_bias</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> load_bias_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token function\">loaded_phdr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> loaded_phdr_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> dynamic_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Word<span class=\"token punctuation\">)</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  bool <span class=\"token function\">is_mapped_by_caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> mapped_by_caller_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token function\">entry_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> header_<span class=\"token punctuation\">.</span>e_entry <span class=\"token operator\">+</span> load_bias_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  bool <span class=\"token function\">ReadElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  bool <span class=\"token function\">VerifyElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  bool <span class=\"token function\">ReadProgramHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  bool <span class=\"token function\">ReadSectionHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  bool <span class=\"token function\">ReadDynamicSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  bool <span class=\"token function\">ReserveAddressSpace</span><span class=\"token punctuation\">(</span>address_space_params<span class=\"token operator\">*</span> address_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  bool <span class=\"token function\">LoadSegments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  bool <span class=\"token function\">FindPhdr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  bool <span class=\"token function\">FindGnuPropertySection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  bool <span class=\"token function\">CheckPhdr</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  bool <span class=\"token function\">CheckFileRange</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> offset<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> alignment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  bool did_read_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  bool did_load_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  std<span class=\"token operator\">::</span>string name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">int</span> fd_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token class-name\">off64_t</span> file_offset_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token class-name\">off64_t</span> file_size_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Ehdr<span class=\"token punctuation\">)</span> header_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token class-name\">size_t</span> phdr_num_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  MappedFileFragment phdr_fragment_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> phdr_table_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  MappedFileFragment shdr_fragment_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> shdr_table_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token class-name\">size_t</span> shdr_num_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  MappedFileFragment dynamic_fragment_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> dynamic_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  MappedFileFragment strtab_fragment_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> strtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token class-name\">size_t</span> strtab_size_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// First page of reserved address space.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> load_start_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">// Size in bytes of reserved address space.</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token class-name\">size_t</span> load_size_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">// First page of inaccessible gap mapping reserved for this DSO.</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> gap_start_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">// Size in bytes of the gap mapping.</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token class-name\">size_t</span> gap_size_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">// Load bias.</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> load_bias_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token comment\">// Loaded phdr.</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> loaded_phdr_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// Is map owned by the caller</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  bool mapped_by_caller_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">// Only used by AArch64 at the moment.</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  GnuPropertySection note_gnu_property_ __unused<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"aosp中解析elf示例\"><a class=\"anchor\" href=\"#aosp中解析elf示例\">#</a> AOSP 中解析 Elf 示例</h2>\n<p>在 AOSP 中，调用 <code>ElfReader</code>  解析 so 的示例代码如下所示，传入的四个参数的含义如下所示</p>\n<ul>\n<li><code>realpath</code> :  <code>elf</code>  的路径</li>\n<li><code>fd_</code> : 打开的 <code>elf</code>  的 <code>fd</code>  文件描述符</li>\n<li><code>file_offset_</code> :  <code>elf</code>  文件指针的当前偏移，初始值为 0</li>\n<li><code>file_size</code> :  <code>elf</code>  的文件大小</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//LoadTask::read</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bool <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> realpath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ElfReader<span class=\"token operator\">&amp;</span> elf_reader <span class=\"token operator\">=</span> <span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>realpath<span class=\"token punctuation\">,</span> fd_<span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">,</span> file_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"elfreaderread\"><a class=\"anchor\" href=\"#elfreaderread\">#</a> ElfReader::Read</h2>\n<p>非常典型的 <code>elf解析五件套</code> 代码，经过上面对于 ELF 的详细分析，我们也不难理解这五个函数的功能了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_offset<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>did_read_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name_ <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  fd_ <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  file_offset_ <span class=\"token operator\">=</span> file_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  file_size_ <span class=\"token operator\">=</span> file_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ReadElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">VerifyElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">ReadProgramHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">ReadSectionHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">ReadDynamicSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    did_read_ <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> did_read_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"readelfheader\"><a class=\"anchor\" href=\"#readelfheader\">#</a> ReadElfHeader</h3>\n<p>读取 ELF Header</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">ReadElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ssize_t</span> rc <span class=\"token operator\">=</span> <span class=\"token function\">TEMP_FAILURE_RETRY</span><span class=\"token punctuation\">(</span><span class=\"token function\">pread64</span><span class=\"token punctuation\">(</span>fd_<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>header_<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can't read file \\\"%s\\\": %s\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" is too small to be an ELF executable: only found %zd bytes\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"verifyelfheader\"><a class=\"anchor\" href=\"#verifyelfheader\">#</a> VerifyElfHeader</h3>\n<p>判断是否是 ELF Header 的合法性</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">VerifyElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">,</span> ELFMAG<span class=\"token punctuation\">,</span> SELFMAG<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has bad ELF magic: %02x%02x%02x%02x\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// Try to give a clear diagnostic for ELF class mismatches, since they're</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// an easy mistake to make during the 32-bit/64-bit transition period.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> elf_class <span class=\"token operator\">=</span> header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span>EI_CLASS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elf_class <span class=\"token operator\">!=</span> ELFCLASS64<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elf_class <span class=\"token operator\">==</span> ELFCLASS32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" is 32-bit instead of 64-bit\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has unknown ELF class: %d\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> elf_class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elf_class <span class=\"token operator\">!=</span> ELFCLASS32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elf_class <span class=\"token operator\">==</span> ELFCLASS64<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" is 64-bit instead of 32-bit\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has unknown ELF class: %d\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> elf_class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span>EI_DATA<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ELFDATA2LSB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" not little-endian: %d\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_ident<span class=\"token punctuation\">[</span>EI_DATA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_type <span class=\"token operator\">!=</span> ET_DYN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has unexpected e_type: %d\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_version <span class=\"token operator\">!=</span> EV_CURRENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has unexpected e_version: %d\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_machine <span class=\"token operator\">!=</span> <span class=\"token function\">GetTargetElfMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" is for %s (%d) instead of %s (%d)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>           name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           <span class=\"token function\">EM_to_string</span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_machine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_machine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>           <span class=\"token function\">EM_to_string</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetTargetElfMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetTargetElfMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_shentsize <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// Fail if app is targeting Android O or above</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has unsupported e_shentsize: 0x%x (expected 0x%zx)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                     name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_shentsize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">DL_WARN_documented_change</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                              <span class=\"token string\">\"invalid-elf-header_section-headers-enforced-for-api-level-26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                              <span class=\"token string\">\"\\\"%s\\\" has unsupported e_shentsize 0x%x (expected 0x%zx)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                              name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_shentsize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">add_dlwarning</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"has invalid ELF header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_shstrndx <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// Fail if app is targeting Android O or above</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has invalid e_shstrndx\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">DL_WARN_documented_change</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                              <span class=\"token string\">\"invalid-elf-header_section-headers-enforced-for-api-level-26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                              <span class=\"token string\">\"\\\"%s\\\" has invalid e_shstrndx\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">add_dlwarning</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"has invalid ELF header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"readprogramheaders\"><a class=\"anchor\" href=\"#readprogramheaders\">#</a> ReadProgramHeaders</h3>\n<p>读取 Program Header</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Loads the program header table from an ELF file into a read-only private</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// anonymous mmap-ed block.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">ReadProgramHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  phdr_num_ <span class=\"token operator\">=</span> header_<span class=\"token punctuation\">.</span>e_phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// Like the kernel, we only accept program header tables that</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// are smaller than 64KiB.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phdr_num_ <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> phdr_num_ <span class=\"token operator\">></span> <span class=\"token number\">65536</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has invalid e_phnum: %zd\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> phdr_num_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// Boundary checks</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size <span class=\"token operator\">=</span> phdr_num_ <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CheckFileRange</span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_phoff<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token function\">alignof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has invalid phdr offset/size: %zu/%zu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                   name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                   static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                   size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>phdr_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>fd_<span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_phoff<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" phdr mmap failed: %s\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  phdr_table_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>phdr_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"readsectionheaders\"><a class=\"anchor\" href=\"#readsectionheaders\">#</a> ReadSectionHeaders</h3>\n<p>读取 Section Header</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">ReadSectionHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  shdr_num_ <span class=\"token operator\">=</span> header_<span class=\"token punctuation\">.</span>e_shnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shdr_num_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has no section headers\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size <span class=\"token operator\">=</span> shdr_num_ <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CheckFileRange</span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_shoff<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token function\">alignof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has invalid shdr offset/size: %zu/%zu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                   name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                   static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>header_<span class=\"token punctuation\">.</span>e_shoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                   size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shdr_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>fd_<span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">,</span> header_<span class=\"token punctuation\">.</span>e_shoff<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" shdr mmap failed: %s\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  shdr_table_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>shdr_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"readdynamicsection\"><a class=\"anchor\" href=\"#readdynamicsection\">#</a> ReadDynamicSection</h3>\n<p>读取 Dynamic Section</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">ReadDynamicSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 1. Find .dynamic section (in section headers)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> dynamic_shdr <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> shdr_num_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shdr_table_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sh_type <span class=\"token operator\">==</span> SHT_DYNAMIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      dynamic_shdr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>shdr_table_ <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dynamic_shdr <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" .dynamic section header was not found\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// Make sure dynamic_shdr offset and size matches PT_DYNAMIC phdr</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token class-name\">size_t</span> pt_dynamic_offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token class-name\">size_t</span> pt_dynamic_filesz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> phdr_num_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> phdr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>phdr_table_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phdr<span class=\"token operator\">-></span>p_type <span class=\"token operator\">==</span> PT_DYNAMIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      pt_dynamic_offset <span class=\"token operator\">=</span> phdr<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      pt_dynamic_filesz <span class=\"token operator\">=</span> phdr<span class=\"token operator\">-></span>p_filesz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pt_dynamic_offset <span class=\"token operator\">!=</span> dynamic_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" .dynamic section has invalid offset: 0x%zx, \"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                     <span class=\"token string\">\"expected to match PT_DYNAMIC offset: 0x%zx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                     name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                     static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dynamic_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                     pt_dynamic_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">DL_WARN_documented_change</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                              <span class=\"token string\">\"invalid-elf-header_section-headers-enforced-for-api-level-26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                              <span class=\"token string\">\"\\\"%s\\\" .dynamic section has invalid offset: 0x%zx \"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                              <span class=\"token string\">\"(expected to match PT_DYNAMIC offset 0x%zx)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                              name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                              static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dynamic_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                              pt_dynamic_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">add_dlwarning</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid .dynamic section\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pt_dynamic_filesz <span class=\"token operator\">!=</span> dynamic_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" .dynamic section has invalid size: 0x%zx, \"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                     <span class=\"token string\">\"expected to match PT_DYNAMIC filesz: 0x%zx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                     name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                     static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dynamic_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                     pt_dynamic_filesz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">DL_WARN_documented_change</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                              <span class=\"token string\">\"invalid-elf-header_section-headers-enforced-for-api-level-26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                              <span class=\"token string\">\"\\\"%s\\\" .dynamic section has invalid size: 0x%zx \"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                              <span class=\"token string\">\"(expected to match PT_DYNAMIC filesz 0x%zx)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                              name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                              static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dynamic_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                              pt_dynamic_filesz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">add_dlwarning</span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid .dynamic section\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dynamic_shdr<span class=\"token operator\">-></span>sh_link <span class=\"token operator\">>=</span> shdr_num_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" .dynamic section has invalid sh_link: %d\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                   name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                   dynamic_shdr<span class=\"token operator\">-></span>sh_link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Shdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> strtab_shdr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>shdr_table_<span class=\"token punctuation\">[</span>dynamic_shdr<span class=\"token operator\">-></span>sh_link<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strtab_shdr<span class=\"token operator\">-></span>sh_type <span class=\"token operator\">!=</span> SHT_STRTAB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" .dynamic section has invalid link(%d) sh_type: %d (expected SHT_STRTAB)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                   name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dynamic_shdr<span class=\"token operator\">-></span>sh_link<span class=\"token punctuation\">,</span> strtab_shdr<span class=\"token operator\">-></span>sh_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CheckFileRange</span><span class=\"token punctuation\">(</span>dynamic_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">,</span> dynamic_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">,</span> <span class=\"token function\">alignof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has invalid offset/size of .dynamic section\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dynamic_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>fd_<span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">,</span> dynamic_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">,</span> dynamic_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" dynamic section mmap failed: %s\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  dynamic_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dynamic_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CheckFileRange</span><span class=\"token punctuation\">(</span>strtab_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">,</span> strtab_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">,</span> <span class=\"token function\">alignof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token function\">DL_ERR_AND_LOG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has invalid offset/size of the .strtab section linked from .dynamic section\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                   name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>strtab_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>fd_<span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">,</span> strtab_shdr<span class=\"token operator\">-></span>sh_offset<span class=\"token punctuation\">,</span> strtab_shdr<span class=\"token operator\">-></span>sh_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" strtab section mmap failed: %s\"</span><span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  strtab_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>strtab_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  strtab_size_ <span class=\"token operator\">=</span> strtab_fragment_<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldmlscGFuLmNvbS8yMDIwLzA4LzA5L2VsZi1pbnNpZGUtb3V0Lw==\">深入浅出 ELF</span></li>\n<li>https://ctf-wiki.org/executable/elf</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNS8yMS9lbGYtaW50cm9kdWNl\">计算机那些事 (4)——ELF 文件结构</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNi8wMy9saW5raW5nLXN0YXRpYy1saW5raW5nLWR5bmFtaWMtbGlua2luZy8=\">计算机那些事 (5)—— 链接、静态链接、动态链接</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNi8xNy9leGVjdXRhYmxlLWZpbGUtbG9hZC1hbmQtZXhlY3V0aW9uLw==\">计算机那些事 (6)—— 可执行文件的装载与运行</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/android-load-so/",
            "url": "https://oacia.dev/android-load-so/",
            "title": "安卓so加载流程源码分析",
            "date_published": "2024-02-14T03:19:19.000Z",
            "content_html": "<blockquote>\n<p>对于某些加固壳，加载解释器 elf 的方式不会是常规的 <code>System.loadLibrary</code> , 而是仿照 <code>System.loadLibrary</code>  在 AOSP 中的实现方式，在 JNI 中自己实现 so 的加载</p>\n</blockquote>\n<p>本次所使用到的 AOSP 的源码的安卓版本为 <code>android-12.0.0_r34</code></p>\n<h1 id=\"so的启动过程\"><a class=\"anchor\" href=\"#so的启动过程\">#</a> so 的启动过程</h1>\n<h2 id=\"systemload\"><a class=\"anchor\" href=\"#systemload\">#</a> System.load</h2>\n<p>在 Android 中我们想要加载一个 so 时，可以有两种方式</p>\n<ul>\n<li>\n<p>静态加载</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"native\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种加载方式下，要加载的 so 一般已经内置在 apk 的 <code>lib/[arch]/</code>  中</p>\n</li>\n<li>\n<p>动态加载</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> soPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/data/data/com.example.myapp/libmynative.so\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>soPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这一种加载方式可以加载任意路径下的 so</p>\n</li>\n</ul>\n<p>这里我们将动态加载，即 <code>System.load</code>  函数作为分析的入口，可以发现它实际上调用的是 <code>Runtime.getRuntime().load0</code></p>\n<blockquote>\n<p>对于静态加载 <code>System.loadLibrary</code>  来说，它调用的函数是 <code>Runtime.getRuntime().loadLibrary0(Reflection.getCallerClass(), libname);</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\libcore\\ojluni\\src\\main\\java\\java\\lang\\System.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * Loads the native library specified by the filename argument.  The filename</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * argument must be an absolute path name.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * If the filename argument, when stripped of any platform-specific library</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * prefix, path, and file extension, indicates a library whose name is,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * for example, L, and a native library called L is statically linked</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * with the VM, then the JNI_OnLoad_L function exported by the library</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * is invoked rather than attempting to load a dynamic library.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * A filename matching the argument does not have to exist in the</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * file system.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * See the JNI Specification for more details.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * Otherwise, the filename argument is mapped to a native library image in</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * an implementation-dependent manner.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * &lt;p></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * The call &lt;code>System.load(name)&lt;/code> is effectively equivalent</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * to the call:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * &lt;blockquote>&lt;pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * Runtime.getRuntime().load(name)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * &lt;/pre>&lt;/blockquote></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param      filename   the file to load.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @exception  SecurityException  if a security manager exists and its</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *             &lt;code>checkLink&lt;/code> method doesn't allow</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     *             loading of the specified dynamic library</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @exception  UnsatisfiedLinkError  if either the filename is not an</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *             absolute path name, the native library is not statically</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *             linked with the VM, or the library cannot be mapped to</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *             a native library image by the host system.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @exception  NullPointerException if &lt;code>filename&lt;/code> is</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *             &lt;code>null&lt;/code></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @see        java.lang.Runtime#load(java.lang.String)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @see        java.lang.SecurityManager#checkLink(java.lang.String)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token annotation punctuation\">@CallerSensitive</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reflection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Reflection.getCallerClass</strong></p>\n<p>第一个传入的参数 <code>Reflection.getCallerClass()</code>  相关的实现即注释如下，读起来可能会有点绕，什么叫返回方法的方法的调用者的类？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\libcore\\ojluni\\src\\main\\java\\sun\\reflect\\Reflection.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/** Returns the class of the caller of the method calling this method,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        ignoring frames associated with java.lang.reflect.Method.invoke()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        and its implementation. *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    @CallerSensitive</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    public static native Class&lt;?> getCallerClass();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// This method (getCallerClass()) constitutes another stack frame,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// so we need to call getStackClass2() rather than getStackClass1().</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">VMStack</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStackClass2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实按照逆向的角度来看，就是返回调用栈的最底层的那个类，例如有一个 <code>Class A</code>  经过如下的调用过程: <code>Class A-&gt;反射1-&gt;反射2-&gt;反射n-&gt;...-&gt;Reflection.getCallerClass()</code> , 最终 <code>getCallerClass</code>  方法将返回 <code>Class A</code></p>\n<h2 id=\"runtimegetruntimeload0\"><a class=\"anchor\" href=\"#runtimegetruntimeload0\">#</a> Runtime.getRuntime().load0</h2>\n<p>在 <code>Runtime.getRuntime().load0</code>  中进行了 <code>filename</code>  是否是 <code>绝对路径</code> 以及 <code>空字符串</code> 的检查之后，便开始调用 <code>nativeLoad</code>  真正的去加载 so 了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\libcore\\ojluni\\src\\main\\java\\java\\lang\\Runtime.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">load0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> fromClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsatisfiedLinkError</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token string\">\"Expecting an absolute path of the library: \"</span> <span class=\"token operator\">+</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filename <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename == null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> error <span class=\"token operator\">=</span> <span class=\"token function\">nativeLoad</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> fromClass<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsatisfiedLinkError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>fromClass.getClassLoader()</strong></p>\n<p>向 <code>nativeLoad</code>  中传入的第二个参数是 <code>fromClass.getClassLoader()</code> , 利用这个方法可以获取到 <code>fromClass</code>  类的 <code>ClassLoader</code></p>\n<blockquote>\n<p>为什么要获取 ClassLoader 并将其作为参数传入 nativeLoad?</p>\n</blockquote>\n<h2 id=\"runtimejava中的nativeload\"><a class=\"anchor\" href=\"#runtimejava中的nativeload\">#</a> Runtime.java 中的 nativeLoad</h2>\n<p>在 <code>nativeLoad</code>  重载调用了 <code>nativeLoad(String filename, ClassLoader loader, Class&lt;?&gt; caller)</code> , 而该函数的声明为 <code>native</code> , 这便意味着我们即将走出 java 来到 c++ 的世界了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\libcore\\ojluni\\src\\main\\java\\java\\lang\\Runtime.java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">nativeLoad</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> loader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">nativeLoad</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">native</span> <span class=\"token class-name\">String</span> <span class=\"token function\">nativeLoad</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> loader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"runtimec中的nativeload\"><a class=\"anchor\" href=\"#runtimec中的nativeload\">#</a> Runtime.c 中的 nativeLoad</h2>\n<p>在常规的 JNI 函数的编写过程中，想要让 java 层调用 JNI 中定义的函数，要么使用静态注册，利用 <code>JNIEXPORT</code>  关键字将这个函数导出，或者使用 <code>RegisterNatives</code>  方法去进行动态注册，而在 AOSP 定义 <code>nativeLoad</code>  时，这两种方法都使用到了，对于学习 JNI 的注册过程非常具有参考意义</p>\n<p>查看 <code>Runtime_nativeLoad</code>  函数，可以发现它继续调用了 <code>JVM_NativeLoad</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\libcore\\ojluni\\src\\main\\native\\Runtime.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>JNIEXPORT jstring JNICALL</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Runtime_nativeLoad</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> jclass ignored<span class=\"token punctuation\">,</span> jstring javaFilename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   jobject javaLoader<span class=\"token punctuation\">,</span> jclass caller<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">JVM_NativeLoad</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> javaFilename<span class=\"token punctuation\">,</span> javaLoader<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//these macros below are defined at android-platform\\libnativehelper\\include_platform_header_only\\nativehelper\\jni_macros.h</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">FAST_NATIVE_METHOD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> functionName<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">)</span>           </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">MAKE_JNI_FAST_NATIVE_METHOD</span><span class=\"token punctuation\">(</span>#functionName<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> className </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">functionName<span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">NATIVE_METHOD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> functionName<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">)</span>                </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">MAKE_JNI_NATIVE_METHOD</span><span class=\"token punctuation\">(</span>#functionName<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> className </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">functionName<span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAKE_JNI_NATIVE_METHOD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">)</span>                      </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">_NATIVEHELPER_JNI_MAKE_METHOD</span><span class=\"token punctuation\">(</span>kNormalNative<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_NATIVEHELPER_JNI_MAKE_METHOD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">MAKE_CHECKED_JNI_NATIVE_METHOD</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//MAKE_CHECKED_JNI_NATIVE_METHOD is defined at platform\\libnativehelper\\include_platform_header_only\\nativehelper\\detail\\signature_checker.h</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAKE_CHECKED_JNI_NATIVE_METHOD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>native_kind<span class=\"token punctuation\">,</span> name_<span class=\"token punctuation\">,</span> signature_<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                                                                </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token expression\">using namespace nativehelper<span class=\"token operator\">::</span>detail<span class=\"token punctuation\">;</span>  </span><span class=\"token comment\">/* NOLINT(google-build-using-namespace) */</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">static_assert</span><span class=\"token punctuation\">(</span>                                                       </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token expression\">MatchJniDescriptorWithFunctionType<span class=\"token operator\">&lt;</span>native_kind<span class=\"token punctuation\">,</span>                  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                                           <span class=\"token expression\"><span class=\"token function\">decltype</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                 </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                           <span class=\"token expression\">fn<span class=\"token punctuation\">,</span>                           </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                           <span class=\"token expression\"><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>signature_<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>signature_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token string\">\"JNI signature doesn't match C++ function type.\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* Suppress implicit cast warnings by explicitly casting. */</span>         <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">return</span> JNINativeMethod <span class=\"token punctuation\">&#123;</span>                                             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token expression\">const_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">decltype</span><span class=\"token punctuation\">(</span>JNINativeMethod<span class=\"token operator\">::</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>name_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>              </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token expression\">const_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">decltype</span><span class=\"token punctuation\">(</span>JNINativeMethod<span class=\"token operator\">::</span>signature<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>signature_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token expression\">reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                                 </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//NELEM is defined at platform\\libnativehelper\\include\\nativehelper\\JNIHelp.h</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">NELEM</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//jniRegisterNativeMethods is defined at platform\\libnativehelper\\JNIHelp.c</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">jniRegisterNativeMethods</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> className<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">const</span> JNINativeMethod<span class=\"token operator\">*</span> methods<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numMethods<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">ALOGV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Registering %s's %d native methods...\"</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> numMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    jclass clazz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">FindClass</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">ALOG_ALWAYS_FATAL_IF</span><span class=\"token punctuation\">(</span>clazz <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                         <span class=\"token string\">\"Native registration unable to find class '%s'; aborting...\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                         className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">RegisterNatives</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">,</span> numMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">DeleteLocalRef</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// Failure to register natives is fatal. Try to report the corresponding exception,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// otherwise abort with generic failure message.</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    jthrowable thrown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">ExceptionOccurred</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thrown <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ExpandableString</span> summary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">ExpandableStringInitialize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetExceptionSummary</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token function\">ALOGF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> summary<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">ExpandableStringRelease</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">DeleteLocalRef</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">ALOGF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RegisterNatives failed for '%s'; aborting...\"</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">static</span> JNINativeMethod gMethods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token function\">FAST_NATIVE_METHOD</span><span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">,</span> freeMemory<span class=\"token punctuation\">,</span> <span class=\"token string\">\"()J\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token function\">FAST_NATIVE_METHOD</span><span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">,</span> totalMemory<span class=\"token punctuation\">,</span> <span class=\"token string\">\"()J\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token function\">FAST_NATIVE_METHOD</span><span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">,</span> maxMemory<span class=\"token punctuation\">,</span> <span class=\"token string\">\"()J\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token function\">NATIVE_METHOD</span><span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">,</span> nativeGc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"()V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token function\">NATIVE_METHOD</span><span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">,</span> nativeExit<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(I)V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token function\">NATIVE_METHOD</span><span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">,</span> nativeLoad<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token string\">\"(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/Class;)\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    <span class=\"token string\">\"Ljava/lang/String;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">register_java_lang_Runtime</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token function\">jniRegisterNativeMethods</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/Runtime\"</span><span class=\"token punctuation\">,</span> gMethods<span class=\"token punctuation\">,</span> <span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>gMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jvm_nativeload\"><a class=\"anchor\" href=\"#jvm_nativeload\">#</a> JVM_NativeLoad</h2>\n<p><code>JVM_NativeLoad</code>  获取当前进程的 <code>javaVM</code>  对象并调用 <code>javaVM</code>  的 <code>LoadNativeLibrary</code>  方法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\art\\openjdkjvm\\OpenjdkJvm.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>JNIEXPORT jstring <span class=\"token function\">JVM_NativeLoad</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                 jstring javaFilename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                 jobject javaLoader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                 jclass caller<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 实例化一个文件对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ScopedUtfChars <span class=\"token function\">filename</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> javaFilename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  std<span class=\"token operator\">::</span>string error_msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取当前进程的 javaVM 对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    art<span class=\"token operator\">::</span>JavaVMExt<span class=\"token operator\">*</span> vm <span class=\"token operator\">=</span> art<span class=\"token operator\">::</span>Runtime<span class=\"token operator\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetJavaVM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    bool success <span class=\"token operator\">=</span> vm<span class=\"token operator\">-></span><span class=\"token function\">LoadNativeLibrary</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                         filename<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                         javaLoader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                         caller<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                         <span class=\"token operator\">&amp;</span>error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// Don't let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">return</span> env<span class=\"token operator\">-></span><span class=\"token function\">NewStringUTF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"vm-loadnativelibrary\"><a class=\"anchor\" href=\"#vm-loadnativelibrary\">#</a> vm-&gt;LoadNativeLibrary</h2>\n<p><code>LoadNativeLibrary</code>  的代码很长，细看之后可以分为三个部分</p>\n<ol>\n<li>\n<p><code>so</code>  加载前<br>\n这个部分主要判断即将被 so 是否之前就已经被加载过，如果已经被加载好了，那么就直接退出这个函数并返回</p>\n</li>\n<li>\n<p><code>so</code>  加载时<br>\n这个部分就是 AOSP 实现动态链接库加载的核心实现，之后会进行详细的分析<br>\n当找到这个 so 的 soinfo 之后 (具体是在<a href=\"###do_dlopen\"> do_dlopen</a> 中被找到), 会立即调用 <code>soinfo::call_constructors</code>  函数依次加载 <code>init</code>  和 <code>init_array</code>  函数</p>\n</li>\n<li>\n<p><code>so</code>  加载后<br>\n在这最后一个部分中，当一个 so 被成功加载后，会立即调用 <code>so</code>  的导出函数中的 <code>JNI_OnLoad</code>  函数 (如果 <code>JNI_OnLoad</code>  存在的话)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 阶段三：当 so 被加载之后，立即调用导出函数 JNI_OnLoad</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bool was_successful <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> sym <span class=\"token operator\">=</span> library<span class=\"token operator\">-></span><span class=\"token function\">FindSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JNI_OnLoad\"</span><span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sym <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[No JNI_OnLoad found in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    was_successful <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Call JNI_OnLoad.  We have to override the current class</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// loader, which will always be \"null\" since the stuff at the</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// top of the stack is around Runtime.loadLibrary().  (See</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// the comments in the JNI FindClass function.)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ScopedLocalRef<span class=\"token operator\">&lt;</span>jobject<span class=\"token operator\">></span> <span class=\"token function\">old_class_loader</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> env<span class=\"token operator\">-></span><span class=\"token function\">NewLocalRef</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span><span class=\"token function\">GetClassLoaderOverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    self<span class=\"token operator\">-></span><span class=\"token function\">SetClassLoaderOverride</span><span class=\"token punctuation\">(</span>class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Calling JNI_OnLoad in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    using JNI_OnLoadFn <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>JavaVM<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    JNI_OnLoadFn jni_on_load <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span>JNI_OnLoadFn<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> version <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>jni_on_load<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsSdkVersionSetAndAtMost</span><span class=\"token punctuation\">(</span>runtime_<span class=\"token operator\">-></span><span class=\"token function\">GetTargetSdkVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SdkVersion<span class=\"token operator\">::</span>kL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// Make sure that sigchain owns SIGSEGV.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">EnsureFrontOfChain</span><span class=\"token punctuation\">(</span>SIGSEGV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    self<span class=\"token operator\">-></span><span class=\"token function\">SetClassLoaderOverride</span><span class=\"token punctuation\">(</span>old_class_loader<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version <span class=\"token operator\">==</span> JNI_ERR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">StringAppendF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"JNI_ERR returned from JNI_OnLoad in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>JavaVMExt<span class=\"token operator\">::</span><span class=\"token function\">IsBadJniVersion</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">StringAppendF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bad JNI version returned from JNI_OnLoad in \\\"%s\\\": %d\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                      path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// It's unwise to call dlclose() here, but we can mark it</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// as bad and ensure that future load attempts will fail.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// We don't know how far JNI_OnLoad got, so there could</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// be some partially-initialized stuff accessible through</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// newly-registered native method calls.  We could try to</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// unregister them, but that doesn't seem worthwhile.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        was_successful <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Returned \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>was_successful <span class=\"token operator\">?</span> <span class=\"token string\">\"successfully\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"failure\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" from JNI_OnLoad in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>完整的 <code>LoadNativeLibrary</code>  代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool JavaVMExt<span class=\"token operator\">::</span><span class=\"token function\">LoadNativeLibrary</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                  jobject class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                  jclass caller_class<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                  std<span class=\"token operator\">::</span>string<span class=\"token operator\">*</span> error_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  error_msg<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 阶段一：判断目标 so 是否已经被加载过</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// See if we've already loaded this library.  If we have, and the class loader</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// matches, return successfully without doing anything.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// TODO: for better results we should canonicalize (规范化) the pathname (or even compare</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// inodes). This implementation is fine if everybody is using System.loadLibrary.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  SharedLibrary<span class=\"token operator\">*</span> library<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Thread<span class=\"token operator\">*</span> self <span class=\"token operator\">=</span> Thread<span class=\"token operator\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// TODO: move the locking (and more of this logic) into Libraries.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    MutexLock <span class=\"token function\">mu</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Locks<span class=\"token operator\">::</span>jni_libraries_lock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    library <span class=\"token operator\">=</span> libraries_<span class=\"token operator\">-></span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> class_loader_allocator <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  std<span class=\"token operator\">::</span>string caller_location<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ScopedObjectAccess <span class=\"token function\">soa</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// As the incoming class loader is reachable/alive during the call of this function,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// it's okay to decode it without worrying about unexpectedly marking it alive.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ObjPtr<span class=\"token operator\">&lt;</span>mirror<span class=\"token operator\">::</span>ClassLoader<span class=\"token operator\">></span> loader <span class=\"token operator\">=</span> soa<span class=\"token punctuation\">.</span>Decode<span class=\"token operator\">&lt;</span>mirror<span class=\"token operator\">::</span>ClassLoader<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ClassLinker<span class=\"token operator\">*</span> class_linker <span class=\"token operator\">=</span> Runtime<span class=\"token operator\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetClassLinker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>class_linker<span class=\"token operator\">-></span><span class=\"token function\">IsBootClassLoader</span><span class=\"token punctuation\">(</span>soa<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">Ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      loader <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      class_loader <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caller_class <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        ObjPtr<span class=\"token operator\">&lt;</span>mirror<span class=\"token operator\">::</span>Class<span class=\"token operator\">></span> caller <span class=\"token operator\">=</span> soa<span class=\"token punctuation\">.</span>Decode<span class=\"token operator\">&lt;</span>mirror<span class=\"token operator\">::</span>Class<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>caller_class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ObjPtr<span class=\"token operator\">&lt;</span>mirror<span class=\"token operator\">::</span>DexCache<span class=\"token operator\">></span> dex_cache <span class=\"token operator\">=</span> caller<span class=\"token operator\">-></span><span class=\"token function\">GetDexCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dex_cache <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          caller_location <span class=\"token operator\">=</span> dex_cache<span class=\"token operator\">-></span><span class=\"token function\">GetLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">ToModifiedUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    class_loader_allocator <span class=\"token operator\">=</span> class_linker<span class=\"token operator\">-></span><span class=\"token function\">GetAllocatorForClassLoader</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span><span class=\"token function\">Ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>class_loader_allocator <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>library <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// Use the allocator pointers for class loader equality to avoid unnecessary weak root decode.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>library<span class=\"token operator\">-></span><span class=\"token function\">GetClassLoaderAllocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> class_loader_allocator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// The library will be associated with class_loader. The JNI</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">// spec says we can't load the same library into more than one</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token comment\">// class loader.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">// This isn't very common. So spend some time to get a readable message.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">auto</span> call_to_string <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>jobject obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> std<span class=\"token operator\">::</span>string <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// Handle jweaks. Ignore double local-ref.</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        ScopedLocalRef<span class=\"token operator\">&lt;</span>jobject<span class=\"token operator\">></span> <span class=\"token function\">local_ref</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> env<span class=\"token operator\">-></span><span class=\"token function\">NewLocalRef</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_ref <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          ScopedLocalRef<span class=\"token operator\">&lt;</span>jclass<span class=\"token operator\">></span> <span class=\"token function\">local_class</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> env<span class=\"token operator\">-></span><span class=\"token function\">GetObjectClass</span><span class=\"token punctuation\">(</span>local_ref<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>          jmethodID to_string <span class=\"token operator\">=</span> env<span class=\"token operator\">-></span><span class=\"token function\">GetMethodID</span><span class=\"token punctuation\">(</span>local_class<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                                 <span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                                 <span class=\"token string\">\"()Ljava/lang/String;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          <span class=\"token function\">DCHECK</span><span class=\"token punctuation\">(</span>to_string <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          ScopedLocalRef<span class=\"token operator\">&lt;</span>jobject<span class=\"token operator\">></span> <span class=\"token function\">local_string</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                               env<span class=\"token operator\">-></span><span class=\"token function\">CallObjectMethod</span><span class=\"token punctuation\">(</span>local_ref<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> to_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_string <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            ScopedUtfChars <span class=\"token function\">utf</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span>jstring<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>local_string<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>              <span class=\"token keyword\">return</span> utf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">// We can't do much better logging, really. So leave it with a Describe.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionDescribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"(Error calling toString)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      std<span class=\"token operator\">::</span>string old_class_loader <span class=\"token operator\">=</span> <span class=\"token function\">call_to_string</span><span class=\"token punctuation\">(</span>library<span class=\"token operator\">-></span><span class=\"token function\">GetClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      std<span class=\"token operator\">::</span>string new_class_loader <span class=\"token operator\">=</span> <span class=\"token function\">call_to_string</span><span class=\"token punctuation\">(</span>class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token function\">StringAppendF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Shared library \\\"%s\\\" already opened by \"</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>          <span class=\"token string\">\"ClassLoader %p(%s); can't open in ClassLoader %p(%s)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>          path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          library<span class=\"token operator\">-></span><span class=\"token function\">GetClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          old_class_loader<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>          class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          new_class_loader<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>error_msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Shared library \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" already loaded in \"</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ClassLoader \"</span> <span class=\"token operator\">&lt;&lt;</span> class_loader <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>library<span class=\"token operator\">-></span><span class=\"token function\">CheckOnLoadResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      <span class=\"token function\">StringAppendF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"JNI_OnLoad failed on a previous attempt \"</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token string\">\"to load \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// 阶段二：加载 so</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token comment\">// Open the shared library.  Because we're using a full path, the system</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">// doesn't have to search through LD_LIBRARY_PATH.  (It may do so to</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// resolve this library's dependencies though.)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">// Failures here are expected when java.library.path has several entries</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// and we have to hunt for the lib.</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">// dlopen) becomes zero from dlclose.</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">// Retrieve the library path from the classloader, if necessary.</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  ScopedLocalRef<span class=\"token operator\">&lt;</span>jstring<span class=\"token operator\">></span> <span class=\"token function\">library_path</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token function\">GetLibrarySearchPath</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  Locks<span class=\"token operator\">::</span>mutator_lock_<span class=\"token operator\">-></span><span class=\"token function\">AssertNotHeld</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path_str <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> nullptr <span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  bool needs_native_bridge <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nativeloader_error_msg <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// 调用 dlopen 打开目标 so</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> android<span class=\"token operator\">::</span><span class=\"token function\">OpenNativeLibrary</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>      env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>      runtime_<span class=\"token operator\">-></span><span class=\"token function\">GetTargetSdkVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      path_str<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token punctuation\">(</span>caller_location<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> nullptr <span class=\"token operator\">:</span> caller_location<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>      library_path<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>      <span class=\"token operator\">&amp;</span>needs_native_bridge<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>      <span class=\"token operator\">&amp;</span>nativeloader_error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Call to dlopen(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\", RTLD_NOW) returned \"</span> <span class=\"token operator\">&lt;&lt;</span> handle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> nativeloader_error_msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    android<span class=\"token operator\">::</span><span class=\"token function\">NativeLoaderFreeErrorMessage</span><span class=\"token punctuation\">(</span>nativeloader_error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"dlopen(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\", RTLD_NOW) failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>error_msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> JNI_TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unexpected exception:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionDescribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token comment\">// Create a new entry.</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token comment\">// TODO: move the locking (and more of this logic) into Libraries.</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  bool created_library <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token comment\">// Create SharedLibrary ahead of taking the libraries lock to maintain lock ordering.</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>SharedLibrary<span class=\"token operator\">></span> <span class=\"token function\">new_library</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        new <span class=\"token function\">SharedLibrary</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                          self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                          path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                          handle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                          needs_native_bridge<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                          class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                          class_loader_allocator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    MutexLock <span class=\"token function\">mu</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Locks<span class=\"token operator\">::</span>jni_libraries_lock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    library <span class=\"token operator\">=</span> libraries_<span class=\"token operator\">-></span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>library <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// We won race to get libraries_lock.</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      library <span class=\"token operator\">=</span> new_library<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>      libraries_<span class=\"token operator\">-></span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      created_library <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>created_library<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"WOW: we lost a race to add shared library: \"</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" ClassLoader=\"</span> <span class=\"token operator\">&lt;&lt;</span> class_loader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token keyword\">return</span> library<span class=\"token operator\">-></span><span class=\"token function\">CheckOnLoadResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  <span class=\"token comment\">// 动态链接库装载完成</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Added shared library \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" for ClassLoader \"</span> <span class=\"token operator\">&lt;&lt;</span> class_loader <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token comment\">// 阶段三：当 so 被加载之后，立即调用导出函数 JNI_OnLoad</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  bool was_successful <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> sym <span class=\"token operator\">=</span> library<span class=\"token operator\">-></span><span class=\"token function\">FindSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JNI_OnLoad\"</span><span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sym <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[No JNI_OnLoad found in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    was_successful <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token comment\">// Call JNI_OnLoad.  We have to override the current class</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token comment\">// loader, which will always be \"null\" since the stuff at the</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token comment\">// top of the stack is around Runtime.loadLibrary().  (See</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token comment\">// the comments in the JNI FindClass function.)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    ScopedLocalRef<span class=\"token operator\">&lt;</span>jobject<span class=\"token operator\">></span> <span class=\"token function\">old_class_loader</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> env<span class=\"token operator\">-></span><span class=\"token function\">NewLocalRef</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span><span class=\"token function\">GetClassLoaderOverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    self<span class=\"token operator\">-></span><span class=\"token function\">SetClassLoaderOverride</span><span class=\"token punctuation\">(</span>class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Calling JNI_OnLoad in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    using JNI_OnLoadFn <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>JavaVM<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    JNI_OnLoadFn jni_on_load <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span>JNI_OnLoadFn<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token keyword\">int</span> version <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>jni_on_load<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsSdkVersionSetAndAtMost</span><span class=\"token punctuation\">(</span>runtime_<span class=\"token operator\">-></span><span class=\"token function\">GetTargetSdkVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SdkVersion<span class=\"token operator\">::</span>kL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>      <span class=\"token comment\">// Make sure that sigchain owns SIGSEGV.</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>      <span class=\"token function\">EnsureFrontOfChain</span><span class=\"token punctuation\">(</span>SIGSEGV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    self<span class=\"token operator\">-></span><span class=\"token function\">SetClassLoaderOverride</span><span class=\"token punctuation\">(</span>old_class_loader<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version <span class=\"token operator\">==</span> JNI_ERR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>      <span class=\"token function\">StringAppendF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"JNI_ERR returned from JNI_OnLoad in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>JavaVMExt<span class=\"token operator\">::</span><span class=\"token function\">IsBadJniVersion</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>      <span class=\"token function\">StringAppendF</span><span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bad JNI version returned from JNI_OnLoad in \\\"%s\\\": %d\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>                    path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>      <span class=\"token comment\">// It's unwise to call dlclose() here, but we can mark it</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>      <span class=\"token comment\">// as bad and ensure that future load attempts will fail.</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>      <span class=\"token comment\">// We don't know how far JNI_OnLoad got, so there could</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>      <span class=\"token comment\">// be some partially-initialized stuff accessible through</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>      <span class=\"token comment\">// newly-registered native method calls.  We could try to</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>      <span class=\"token comment\">// unregister them, but that doesn't seem worthwhile.</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>      was_successful <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Returned \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>was_successful <span class=\"token operator\">?</span> <span class=\"token string\">\"successfully\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"failure\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>              <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" from JNI_OnLoad in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>  library<span class=\"token operator\">-></span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span>was_successful<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  <span class=\"token keyword\">return</span> was_successful<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"so的加载过程\"><a class=\"anchor\" href=\"#so的加载过程\">#</a> so 的加载过程</h1>\n<p>在刚刚对于 <code>vm-&gt;LoadNativeLibrary</code>  函数 <code>so加载时</code> 的简要分析中，我们知道目标 so 是通过 <code>dlopen</code>  打开的，我们可以从 <code>android::OpenNativeLibrary</code>  函数开始分析</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool JavaVMExt<span class=\"token operator\">::</span><span class=\"token function\">LoadNativeLibrary</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                  jobject class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                  jclass caller_class<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                  std<span class=\"token operator\">::</span>string<span class=\"token operator\">*</span> error_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  error_msg<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 阶段一：判断目标 so 是否已经被加载过</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 阶段二：加载 so</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Open the shared library.  Because we're using a full path, the system</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// doesn't have to search through LD_LIBRARY_PATH.  (It may do so to</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// resolve this library's dependencies though.)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// Failures here are expected when java.library.path has several entries</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// and we have to hunt for the lib.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// dlopen) becomes zero from dlclose.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// Retrieve the library path from the classloader, if necessary.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  ScopedLocalRef<span class=\"token operator\">&lt;</span>jstring<span class=\"token operator\">></span> <span class=\"token function\">library_path</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token function\">GetLibrarySearchPath</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  Locks<span class=\"token operator\">::</span>mutator_lock_<span class=\"token operator\">-></span><span class=\"token function\">AssertNotHeld</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path_str <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> nullptr <span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  bool needs_native_bridge <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nativeloader_error_msg <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 调用 dlopen 打开目标 so</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> android<span class=\"token operator\">::</span><span class=\"token function\">OpenNativeLibrary</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      runtime_<span class=\"token operator\">-></span><span class=\"token function\">GetTargetSdkVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      path_str<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">(</span>caller_location<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> nullptr <span class=\"token operator\">:</span> caller_location<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      library_path<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token operator\">&amp;</span>needs_native_bridge<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token operator\">&amp;</span>nativeloader_error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Call to dlopen(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\", RTLD_NOW) returned \"</span> <span class=\"token operator\">&lt;&lt;</span> handle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> nativeloader_error_msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    android<span class=\"token operator\">::</span><span class=\"token function\">NativeLoaderFreeErrorMessage</span><span class=\"token punctuation\">(</span>nativeloader_error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"dlopen(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\", RTLD_NOW) failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>error_msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> JNI_TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unexpected exception:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionDescribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    env<span class=\"token operator\">-></span><span class=\"token function\">ExceptionClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// Create a new entry.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// TODO: move the locking (and more of this logic) into Libraries.</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  bool created_library <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// Create SharedLibrary ahead of taking the libraries lock to maintain lock ordering.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>SharedLibrary<span class=\"token operator\">></span> <span class=\"token function\">new_library</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        new <span class=\"token function\">SharedLibrary</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                          self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                          path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                          handle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                          needs_native_bridge<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                          class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                          class_loader_allocator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    MutexLock <span class=\"token function\">mu</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Locks<span class=\"token operator\">::</span>jni_libraries_lock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    library <span class=\"token operator\">=</span> libraries_<span class=\"token operator\">-></span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>library <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// We won race to get libraries_lock.</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      library <span class=\"token operator\">=</span> new_library<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      libraries_<span class=\"token operator\">-></span><span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> library<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      created_library <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>created_library<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"WOW: we lost a race to add shared library: \"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" ClassLoader=\"</span> <span class=\"token operator\">&lt;&lt;</span> class_loader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">return</span> library<span class=\"token operator\">-></span><span class=\"token function\">CheckOnLoadResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// 动态链接库装载完成</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Added shared library \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" for ClassLoader \"</span> <span class=\"token operator\">&lt;&lt;</span> class_loader <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">// 阶段三：当 so 被加载之后，立即调用导出函数 JNI_OnLoad</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"androidopennativelibrary\"><a class=\"anchor\" href=\"#androidopennativelibrary\">#</a> android::OpenNativeLibrary</h2>\n<p>这个函数中有条件编译，接下来我们分析的是 <code>ART_TARGET_ANDROID</code>  的编译条件分支</p>\n<p>跟踪 <code>path</code>  参数，可以发现它被传入到了 <code>android_dlopen_ext(const char* filename, int flag, const android_dlextinfo* extinfo)</code>  函数中， <code>flag</code>   <code>RTLD_NOW</code>  的含义是立即解析所有符号，并在加载时报告任何解析错误</p>\n<blockquote>\n<p><code>android_dlopen_ext</code>  函数的常见 <code>flag</code>  含义</p>\n<ul>\n<li>RTLD_NOW<br>\n 立即解析所有符号，并在加载时报告任何解析错误</li>\n<li>RTLD_LAZY<br>\n 只在符号首次使用时解析</li>\n<li>RTLD_GLOBAL<br>\n 将库及其符号添加到全局命名空间中，以便其他库可以使用这些符号</li>\n</ul>\n</blockquote>\n<p><code>extinfo</code>  的值为 <code>&#123;.flags = ANDROID_DLEXT_USE_NAMESPACE,.library_namespace = boot_namespace,&#125;;</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\art\\libnativeloader\\native_loader.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">OpenNativeLibrary</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> <span class=\"token class-name\">int32_t</span> target_sdk_version<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        jobject class_loader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> caller_location<span class=\"token punctuation\">,</span> jstring library_path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        bool<span class=\"token operator\">*</span> needs_native_bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> error_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 条件编译</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//ART_TARGET_ANDROID - Defined for target Android builds of ART.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//ref: https://android.googlesource.com/platform/art/+/32c8337/runtime/globals.h</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>ART_TARGET_ANDROID<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">UNUSED</span><span class=\"token punctuation\">(</span>target_sdk_version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>class_loader <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">*</span>needs_native_bridge <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caller_location <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> boot_namespace <span class=\"token operator\">=</span> <span class=\"token function\">FindExportedNamespace</span><span class=\"token punctuation\">(</span>caller_location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boot_namespace <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">const</span> android_dlextinfo dlextinfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> ANDROID_DLEXT_USE_NAMESPACE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">.</span>library_namespace <span class=\"token operator\">=</span> boot_namespace<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 调用 android_dlopen_ext, 并传入 path</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> <span class=\"token function\">android_dlopen_ext</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> RTLD_NOW<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dlextinfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token function\">dlerror</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// Check if the library is in NATIVELOADER_DEFAULT_NAMESPACE_LIBS and should</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// be loaded from the kNativeloaderExtraLibs namespace.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      Result<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> handle <span class=\"token operator\">=</span> <span class=\"token function\">TryLoadNativeloaderExtraLib</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>handle<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// Fall back to the system namespace. This happens for preloaded JNI</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// libraries in the zygote.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// TODO(b/185833744): Investigate if this should fall back to the app main</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// namespace (aka anonymous namespace) instead.</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> <span class=\"token function\">OpenSystemLibrary</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> RTLD_NOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token function\">dlerror</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  std<span class=\"token operator\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span>g_namespaces_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  NativeLoaderNamespace<span class=\"token operator\">*</span> ns<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ns <span class=\"token operator\">=</span> g_namespaces<span class=\"token operator\">-></span><span class=\"token function\">FindNamespaceByClassLoader</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// This is the case where the classloader was not created by ApplicationLoaders</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// In this case we create an isolated not-shared namespace for it.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    Result<span class=\"token operator\">&lt;</span>NativeLoaderNamespace<span class=\"token operator\">*</span><span class=\"token operator\">></span> isolated_ns <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">CreateClassLoaderNamespaceLocked</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                         target_sdk_version<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                         class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                         <span class=\"token comment\">/*is_shared=*/</span>false<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                         <span class=\"token comment\">/*dex_path=*/</span>nullptr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                                         library_path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                         <span class=\"token comment\">/*permitted_path=*/</span>nullptr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                         <span class=\"token comment\">/*uses_library_list=*/</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isolated_ns<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>isolated_ns<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      ns <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>isolated_ns<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">OpenNativeLibraryInNamespace</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> needs_native_bridge<span class=\"token punctuation\">,</span> error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token function\">UNUSED</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> target_sdk_version<span class=\"token punctuation\">,</span> class_loader<span class=\"token punctuation\">,</span> caller_location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// Do some best effort to emulate library-path support. It will not</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// work for dependencies.</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">// Note: null has a special meaning and must be preserved.</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  std<span class=\"token operator\">::</span>string c_library_path<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Empty string by default.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>library_path <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> path <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    ScopedUtfChars <span class=\"token function\">library_path_utf_chars</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> library_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    c_library_path <span class=\"token operator\">=</span> library_path_utf_chars<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> library_paths <span class=\"token operator\">=</span> base<span class=\"token operator\">::</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>c_library_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> lib_path <span class=\"token operator\">:</span> library_paths<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token operator\">*</span>needs_native_bridge <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path_arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    std<span class=\"token operator\">::</span>string complete_path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      <span class=\"token comment\">// Preserve null.</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      path_arg <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      complete_path <span class=\"token operator\">=</span> lib_path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>complete_path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        complete_path<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      complete_path<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      path_arg <span class=\"token operator\">=</span> complete_path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> <span class=\"token function\">dlopen</span><span class=\"token punctuation\">(</span>path_arg<span class=\"token punctuation\">,</span> RTLD_NOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      <span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NativeBridgeIsSupported</span><span class=\"token punctuation\">(</span>path_arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>      <span class=\"token operator\">*</span>needs_native_bridge <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      handle <span class=\"token operator\">=</span> <span class=\"token function\">NativeBridgeLoadLibrary</span><span class=\"token punctuation\">(</span>path_arg<span class=\"token punctuation\">,</span> RTLD_NOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>      <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token function\">NativeBridgeGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>      <span class=\"token operator\">*</span>error_msg <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token function\">dlerror</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"android_dlopen_ext\"><a class=\"anchor\" href=\"#android_dlopen_ext\">#</a> android_dlopen_ext</h2>\n<p><code>android_dlopen_ext</code>  调用了 <code>__loader_android_dlopen_ext</code></p>\n<p>在代码的第四行出现了内建函数 <code>__builtin_return_address(LEVEL)</code> , 这个函数用来返回当前函数或调用者的返回地址。函数的参数 LEVEL 表示函数调用链中的不同层次的函数，各个值代表的意义如下:</p>\n<ul>\n<li>0：返回当前函数的返回地址；</li>\n<li>1：返回当前函数调用者的返回地址；</li>\n<li>2：返回当前函数调用者的调用者的返回地址；</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\libdl\\libdl.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__weak__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">android_dlopen_ext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> caller_addr <span class=\"token operator\">=</span> <span class=\"token function\">__builtin_return_address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__loader_android_dlopen_ext</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">,</span> extinfo<span class=\"token punctuation\">,</span> caller_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"__loader_android_dlopen_ext\"><a class=\"anchor\" href=\"#__loader_android_dlopen_ext\">#</a> __loader_android_dlopen_ext</h2>\n<p><code>__loader_android_dlopen_ext</code>  调用了 <code>dlopen_ext</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\dlfcn.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">__loader_android_dlopen_ext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                           <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                           <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                           <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> caller_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">dlopen_ext</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> extinfo<span class=\"token punctuation\">,</span> caller_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dlopen_ext\"><a class=\"anchor\" href=\"#dlopen_ext\">#</a> dlopen_ext</h2>\n<p><code>dlopen_ext</code>  中调用了 <code>do_dlopen</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\dlfcn.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">dlopen_ext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> caller_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ScopedPthreadMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_dl_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  g_linker_logger<span class=\"token punctuation\">.</span><span class=\"token function\">ResetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> result <span class=\"token operator\">=</span> <span class=\"token function\">do_dlopen</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> extinfo<span class=\"token punctuation\">,</span> caller_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">__bionic_format_dlerror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dlopen failed\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">linker_get_error_buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"do_dlopen\"><a class=\"anchor\" href=\"#do_dlopen\">#</a> do_dlopen</h2>\n<p>这个函数中最为关键的是调用 <code>find_library</code>  获取到了待加载 <code>so</code>  的 <code>soinfo</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">do_dlopen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> caller_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  std<span class=\"token operator\">::</span>string trace_prefix <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dlopen: \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> nullptr <span class=\"token operator\">?</span> <span class=\"token string\">\"(nullptr)\"</span> <span class=\"token operator\">:</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ScopedTrace <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span>trace_prefix<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ScopedTrace <span class=\"token function\">loading_trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>trace_prefix <span class=\"token operator\">+</span> <span class=\"token string\">\" - loading and linking\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> caller <span class=\"token operator\">=</span> <span class=\"token function\">find_containing_library</span><span class=\"token punctuation\">(</span>caller_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns <span class=\"token operator\">=</span> <span class=\"token function\">get_caller_namespace</span><span class=\"token punctuation\">(</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token string\">\"dlopen(name=\\\"%s\\\", flags=0x%x, extinfo=%s, caller=\\\"%s\\\", caller_ns=%s@%p, targetSdkVersion=%i) ...\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token function\">android_dlextinfo_to_string</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         caller <span class=\"token operator\">==</span> nullptr <span class=\"token operator\">?</span> <span class=\"token string\">\"(null)\"</span> <span class=\"token operator\">:</span> caller<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         ns <span class=\"token operator\">==</span> nullptr <span class=\"token operator\">?</span> <span class=\"token string\">\"(null)\"</span> <span class=\"token operator\">:</span> ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">auto</span> purge_guard <span class=\"token operator\">=</span> android<span class=\"token operator\">::</span>base<span class=\"token operator\">::</span><span class=\"token function\">make_scope_guard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">purge_unused_memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">auto</span> failure_guard <span class=\"token operator\">=</span> android<span class=\"token operator\">::</span>base<span class=\"token operator\">::</span><span class=\"token function\">make_scope_guard</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"... dlopen failed: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">linker_get_error_buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 对 flags 的合法性进行判断</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>RTLD_NOW<span class=\"token operator\">|</span>RTLD_LAZY<span class=\"token operator\">|</span>RTLD_LOCAL<span class=\"token operator\">|</span>RTLD_GLOBAL<span class=\"token operator\">|</span>RTLD_NODELETE<span class=\"token operator\">|</span>RTLD_NOLOAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid flags to dlopen: %x\"</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// 对 extinfo 的合法性进行判断</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>ANDROID_DLEXT_VALID_FLAG_BITS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid extended flags to android_dlopen_ext: 0x%\"</span> PRIx64<span class=\"token punctuation\">,</span> extinfo<span class=\"token operator\">-></span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_LIBRARY_FD<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_LIBRARY_FD_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid extended flag combination (ANDROID_DLEXT_USE_LIBRARY_FD_OFFSET without \"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token string\">\"ANDROID_DLEXT_USE_LIBRARY_FD): 0x%\"</span> PRIx64<span class=\"token punctuation\">,</span> extinfo<span class=\"token operator\">-></span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_NAMESPACE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>library_namespace <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ANDROID_DLEXT_USE_NAMESPACE is set but extinfo->library_namespace is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      ns <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>library_namespace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// Workaround for dlopen(/system/lib/&lt;soname>) when .so is in /apex. http://b/121248172</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// The workaround works only when targetSdkVersion &lt; Q.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">// 当 apk 的 targetSdkVersion&lt;Q 时才会将 /system 路径转换成 /apex 路径 (不太清楚这样做的意义是什么)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  std<span class=\"token operator\">::</span>string name_to_apex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">translateSystemPathToApexPath</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name_to_apex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> new_name <span class=\"token operator\">=</span> name_to_apex<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dlopen considering translation from %s to APEX path %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>           name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>           new_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// Some APEXs could be optionally disabled. Only translate the path</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// when the old file is absent and the new file exists.</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// TODO(b/124218500): Re-enable it once app compat issue is resolved</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    if (file_exists(name)) &#123;</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      LD_LOG(kLogDlopen, \"dlopen %s exists, not translating\", name);</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    &#125; else</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    */</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span>new_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dlopen %s does not exist, not translating\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>             new_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dlopen translation accepted: using %s\"</span><span class=\"token punctuation\">,</span> new_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      name <span class=\"token operator\">=</span> new_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// End Workaround for dlopen(/system/lib/&lt;soname>) when .so is in /apex.</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  std<span class=\"token operator\">::</span>string asan_name_holder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> translated_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g_is_asan <span class=\"token operator\">&amp;&amp;</span> translated_name <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> translated_name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">char</span> original_path<span class=\"token punctuation\">[</span>PATH_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">realpath</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> original_path<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      asan_name_holder <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>kAsanLibDirPrefix<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> original_path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span>asan_name_holder<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find_loaded_library_by_realpath</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> original_path<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linker_asan dlopen NOT translating \\\"%s\\\" -> \\\"%s\\\": library already loaded\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                asan_name_holder<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>          <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linker_asan dlopen translating \\\"%s\\\" -> \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> translated_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>          translated_name <span class=\"token operator\">=</span> asan_name_holder<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  ProtectedDataGuard guard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// 重头戏，这里调用了 find_library 获取到了这个 so 的 soinfo</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> <span class=\"token function\">find_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> translated_name<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> extinfo<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  loading_trace<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>si <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> si<span class=\"token operator\">-></span><span class=\"token function\">to_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>           <span class=\"token string\">\"... dlopen calling constructors: realpath=\\\"%s\\\", soname=\\\"%s\\\", handle=%p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>           si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_soname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">// 调用 call_constructors 函数来加载 so 中的 init 以及 init_array</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    si<span class=\"token operator\">-></span><span class=\"token function\">call_constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    failure_guard<span class=\"token punctuation\">.</span><span class=\"token function\">Disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>           <span class=\"token string\">\"... dlopen successful: realpath=\\\"%s\\\", soname=\\\"%s\\\", handle=%p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>           si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_soname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">return</span> handle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"soinfo\"><a class=\"anchor\" href=\"#soinfo\">#</a> soinfo</h3>\n<p><code>soinfo</code>  结构体如下所示，可以用在 frida 或者 ida 中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//IMPORTANT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//ELF64 启用该宏</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__LP64__</span>  <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//ELF32 启用该宏</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//#define __work_around_b_24465209__  1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//https://android.googlesource.com/platform/bionic/+/master/linker/Android.bp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>架构为 32 位 定义__work_around_b_24465209__宏</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>arch: &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        arm: &#123;cflags: [\"-D__work_around_b_24465209__\"],&#125;,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        x86: &#123;cflags: [\"-D__work_around_b_24465209__\"],&#125;,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\libc\\include\\link.h</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ElfW</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> Elf64_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">type</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ElfW</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> Elf32_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">type</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_common_types.h</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// Android uses RELA for LP64.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USE_RELA</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\libc\\kernel\\uapi\\asm-generic\\int-ll64.h</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//__signed__-->signed</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> __s8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> __u8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">short</span> __s16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> __u16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> __s32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __u32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> __s64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> __u64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//A12-src\\msm-google\\include\\uapi\\linux\\elf.h</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/* 32-bit ELF base types. */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf32_Addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">typedef</span> __u16\tElf32_Half<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf32_Off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">typedef</span> __s32\tElf32_Sword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf32_Word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/* 64-bit ELF base types. */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">typedef</span> __u64\tElf64_Addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">typedef</span> __u16\tElf64_Half<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">typedef</span> __s16\tElf64_SHalf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">typedef</span> __u64\tElf64_Off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">typedef</span> __s32\tElf64_Sword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">typedef</span> __u32\tElf64_Word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">typedef</span> __u64\tElf64_Xword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">typedef</span> __s64\tElf64_Sxword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dynamic</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  Elf32_Sword d_tag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">union</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Elf32_Sword\td_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Elf32_Addr\td_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> d_un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Dyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  Elf64_Sxword d_tag<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* entry tag value */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Elf64_Xword d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Elf64_Addr d_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> d_un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Dyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_rel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  Elf32_Addr\tr_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  Elf32_Word\tr_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Rel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_rel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  Elf64_Addr r_offset<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Location at which to apply the action */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  Elf64_Xword r_info<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* index and type of relocation */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Rel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_rela</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  Elf32_Addr\tr_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  Elf32_Word\tr_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  Elf32_Sword\tr_addend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Rela<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_rela</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  Elf64_Addr r_offset<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Location at which to apply the action */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  Elf64_Xword r_info<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* index and type of relocation */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  Elf64_Sxword r_addend<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Constant addend used to compute value */</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Rela<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_sym</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  Elf32_Word\tst_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  Elf32_Addr\tst_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  Elf32_Word\tst_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  Elf32_Half\tst_shndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_sym</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  Elf64_Word st_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Symbol name, index in string tbl */</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_info<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Type and binding attributes */</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\tst_other<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* No defined meaning, 0 */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  Elf64_Half st_shndx<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Associated section index */</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  Elf64_Addr st_value<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Value of the symbol */</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  Elf64_Xword st_size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Associated symbol size */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EI_NIDENT</span>\t<span class=\"token expression\"><span class=\"token number\">16</span></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_hdr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\te_ident<span class=\"token punctuation\">[</span>EI_NIDENT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  Elf32_Half\te_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  Elf32_Half\te_machine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  Elf32_Word\te_version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  Elf32_Addr\te_entry<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Entry point */</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  Elf32_Off\te_phoff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  Elf32_Off\te_shoff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  Elf32_Word\te_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  Elf32_Half\te_ehsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  Elf32_Half\te_phentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  Elf32_Half\te_phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  Elf32_Half\te_shentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  Elf32_Half\te_shnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  Elf32_Half\te_shstrndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Ehdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_hdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>\te_ident<span class=\"token punctuation\">[</span>EI_NIDENT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* ELF \"magic number\" */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  Elf64_Half e_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  Elf64_Half e_machine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  Elf64_Word e_version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  Elf64_Addr e_entry<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Entry point virtual address */</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  Elf64_Off e_phoff<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Program header table file offset */</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  Elf64_Off e_shoff<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section header table file offset */</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  Elf64_Word e_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  Elf64_Half e_ehsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  Elf64_Half e_phentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  Elf64_Half e_phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  Elf64_Half e_shentsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  Elf64_Half e_shnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  Elf64_Half e_shstrndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Ehdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token comment\">/* These constants define the permissions on sections in the program</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>   header, p_flags. */</pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PF_R</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x4</span></span></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PF_W</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x2</span></span></span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PF_X</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x1</span></span></span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_phdr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  Elf32_Word\tp_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  Elf32_Off\tp_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  Elf32_Addr\tp_vaddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  Elf32_Addr\tp_paddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  Elf32_Word\tp_filesz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  Elf32_Word\tp_memsz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  Elf32_Word\tp_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  Elf32_Word\tp_align<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Phdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_phdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  Elf64_Word p_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  Elf64_Word p_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  Elf64_Off p_offset<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment file offset */</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  Elf64_Addr p_vaddr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment virtual address */</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  Elf64_Addr p_paddr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment physical address */</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  Elf64_Xword p_filesz<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment size in file */</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  Elf64_Xword p_memsz<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment size in memory */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  Elf64_Xword p_align<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Segment alignment, file &amp; memory */</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Phdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf32_shdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  Elf32_Word\tsh_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  Elf32_Word\tsh_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  Elf32_Word\tsh_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  Elf32_Addr\tsh_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  Elf32_Off\tsh_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  Elf32_Word\tsh_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>  Elf32_Word\tsh_link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  Elf32_Word\tsh_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  Elf32_Word\tsh_addralign<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  Elf32_Word\tsh_entsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf32_Shdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_shdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>  Elf64_Word sh_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section name, index in string tbl */</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>  Elf64_Word sh_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Type of section */</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  Elf64_Xword sh_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Miscellaneous section attributes */</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>  Elf64_Addr sh_addr<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section virtual addr at execution */</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>  Elf64_Off sh_offset<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Section file offset */</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  Elf64_Xword sh_size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Size of section in bytes */</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>  Elf64_Word sh_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Index of another section */</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>  Elf64_Word sh_info<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Additional section information */</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  Elf64_Xword sh_addralign<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Section alignment */</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>  Elf64_Xword sh_entsize<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Entry size if section holds table */</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Shdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">link_map</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token class-name\">uintptr_t</span> l_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> l_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token class-name\">uintptr_t</span> l_ld<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">link_map</span> <span class=\"token operator\">*</span> l_next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">link_map</span> <span class=\"token operator\">*</span> l_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_soinfo.h</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">linker_dtor_function_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SOINFO_NAME_LEN</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">soinfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>  <span class=\"token keyword\">char</span> old_name_<span class=\"token punctuation\">[</span>SOINFO_NAME_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Phdr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> phdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>  <span class=\"token class-name\">size_t</span> phnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> unused0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility.</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre></pre></td></tr><tr><td data-num=\"236\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> unused1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// DO NOT USE, maintained for compatibility.</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> dynamic<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre></pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__work_around_b_24465209__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> unused2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> unused3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> flags_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> strtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> symtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token class-name\">size_t</span> nbucket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token class-name\">size_t</span> nchain_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span> bucket_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span> chain_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre></pre></td></tr><tr><td data-num=\"258\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> unused4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// DO NOT USE, maintained for compatibility</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> plt_rela_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  <span class=\"token class-name\">size_t</span> plt_rela_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> rela_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  <span class=\"token class-name\">size_t</span> rela_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> plt_rel_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>  <span class=\"token class-name\">size_t</span> plt_rel_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> rel_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>  <span class=\"token class-name\">size_t</span> rel_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>  <span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">*</span> preinit_array_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>  <span class=\"token class-name\">size_t</span> preinit_array_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>  <span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">*</span> init_array_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>  <span class=\"token class-name\">size_t</span> init_array_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>  <span class=\"token class-name\">linker_dtor_function_t</span><span class=\"token operator\">*</span> fini_array_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>  <span class=\"token class-name\">size_t</span> fini_array_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>  <span class=\"token class-name\">linker_ctor_function_t</span> init_func_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>  <span class=\"token class-name\">linker_dtor_function_t</span> fini_func_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre></pre></td></tr><tr><td data-num=\"287\"></td><td><pre></pre></td></tr><tr><td data-num=\"288\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__arm__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>  <span class=\"token comment\">// ARM EABI section used for stack unwinding.</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span> ARM_exidx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>  <span class=\"token class-name\">size_t</span> ARM_exidx_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>  <span class=\"token class-name\">size_t</span> ref_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>  link_map link_map_head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>  bool constructors_called<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>  <span class=\"token comment\">// When you read a virtual address from the ELF file, add this</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>  <span class=\"token comment\">// value to get the corresponding address in the process' address space.</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> load_bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre></pre></td></tr><tr><td data-num=\"303\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  bool has_text_relocations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>  bool has_DT_SYMBOLIC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre></pre></td></tr><tr><td data-num=\"308\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"call_constructors\"><a class=\"anchor\" href=\"#call_constructors\">#</a> call_constructors</h3>\n<p>在这个函数中会先加载 <code>init</code> , 在 so 中的函数名一般为 <code>init_proc</code> , 然后加载 <code>init_array</code>  中的函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker_soinfo.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> soinfo<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructors_called <span class=\"token operator\">||</span> g_is_ldd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// We set constructors_called before actually calling the constructors, otherwise it doesn't</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// protect against recursive constructor calls. One simple example of constructor recursion</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 1. The program depends on libc, so libc's constructor is called here.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 3. dlopen() calls the constructors on the newly created</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//    soinfo for libc_malloc_debug_leak.so.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 4. The debug .so depends on libc, so CallConstructors is</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//    called again with the libc soinfo. If it doesn't trigger the early-</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//    out above, the libc constructor will be called again (recursively!).</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  constructors_called <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 在共享链接库中会忽略 DT_PREINIT_ARRAY</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_main_executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> preinit_array_ <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// The GNU dynamic linker silently ignores these, but we warn the developer.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\": ignoring DT_PREINIT_ARRAY in shared library!\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">get_children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span> si<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    si<span class=\"token operator\">-></span><span class=\"token function\">call_constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_linker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">bionic_trace_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calling constructors: \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// DT_INIT should be called before DT_INIT_ARRAY if both are present.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 首先加载 init, 在 so 中的函数名一般为 init_proc, 然后加载 init_array 中的函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">call_function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_INIT\"</span><span class=\"token punctuation\">,</span> init_func_<span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">call_array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_INIT_ARRAY\"</span><span class=\"token punctuation\">,</span> init_array_<span class=\"token punctuation\">,</span> init_array_count_<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_linker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">bionic_trace_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>值得注意的是，在共享链接库中 <code>pre_initarray</code>  会被忽略掉，它在 <code>call_pre_init_constructors</code>  中，但假如你用 <code>ndk-build</code>  编译一个可以在 android 上执行的可执行文件，那么这个预初始化函数就不会被忽略啦</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker_soinfo.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> soinfo<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_pre_init_constructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g_is_ldd<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// DT_PREINIT_ARRAY functions are called before any other constructors for executables,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// but ignored in a shared library.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">call_array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_PREINIT_ARRAY\"</span><span class=\"token punctuation\">,</span> preinit_array_<span class=\"token punctuation\">,</span> preinit_array_count_<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"find_library\"><a class=\"anchor\" href=\"#find_library\">#</a> find_library</h2>\n<p>接下来在 <code>find_library</code>  中调用了 <code>find_libraries</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> soinfo<span class=\"token operator\">*</span> <span class=\"token function\">find_library</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                            <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                            soinfo<span class=\"token operator\">*</span> needed_by<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 如果 name 是空的，则为 si 赋值为 somain</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//somain: main process, always the one after libdl_info</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    si <span class=\"token operator\">=</span> <span class=\"token function\">solist_get_somain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个函数将会返回 somain;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">find_libraries</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                             needed_by<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                             <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                             nullptr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                             rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                             extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                             false <span class=\"token comment\">/* add_as_children */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>si <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">soinfo_unload</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 加载 so 成功，so 的引用次数 + 1, 对应了 JavaVMExt::LoadNativeLibrary 中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">//so 加载时 这一部分的注释↓</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  Below we dlopen but there is no paired dlclose, this would be necessary if we supported</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  class unloading. Libraries will only be unloaded when the reference count (incremented by</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  dlopen) becomes zero from dlclose.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  si<span class=\"token operator\">-></span><span class=\"token function\">increment_ref_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">return</span> si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"find_libraries\"><a class=\"anchor\" href=\"#find_libraries\">#</a> find_libraries</h2>\n<p>分析了这么久等的就是这个函数！</p>\n<p>函数声明:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ns                                加载的命名空间 = 调用者的命名空间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    start_with                        调用者的 soinfo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    library_names                     所有加载库名称</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    library_names_count               加载库数量</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    soinfos                           保存加载完成的 soinfo</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ld_preloads                       保存预加载库，没有可以为 null</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ld_preloads_count                 预加载库数量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    extinfo                           Android 调用附带</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    add_as_children                   是否作为 start_with 的子库</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    search_linked_namespaces          查询链接命名空间</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    namespaces                        链接命名空间</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bool <span class=\"token function\">find_libraries</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    soinfo<span class=\"token operator\">*</span> start_with<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> library_names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token class-name\">size_t</span> library_names_count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    soinfo<span class=\"token operator\">*</span> soinfos<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>soinfo<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> ld_preloads<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token class-name\">size_t</span> ld_preloads_count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    bool add_as_children<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> namespaces<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个函数可以分为七个部分进行分析</p>\n<h3 id=\"准备阶段\"><a class=\"anchor\" href=\"#准备阶段\">#</a> 准备阶段</h3>\n<p>这一部分将待加载的 so 添加到 <code>LoadTaskList</code>  加载任务队列中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 0: prepare.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token operator\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> soinfo<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ElfReader<span class=\"token operator\">></span> readers_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LoadTaskList load_tasks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 可以同时加载多个 so, 但从 find_library 传入的参数看来，library_names_count</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 的值为 1, 也就是说仅加载一个目标 path 的 so</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> library_names_count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> library_names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 将这个 so push 到 load_tasks 的任务中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    load_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>LoadTask<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> start_with<span class=\"token punctuation\">,</span> ns<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>readers_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// If soinfos array is null allocate one on stack.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// The array is needed in case of failure; for example</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// when library_names[] = &#123;libone.so, libtwo.so&#125; and libone.so</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// is loaded correctly but libtwo.so failed for some reason.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// In this case libone.so should be unloaded on return.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// See also implementation of failure_guard below.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 为 soinfos 分配空间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>soinfos <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">size_t</span> soinfos_size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>library_names_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    soinfos <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span>soinfo<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">alloca</span><span class=\"token punctuation\">(</span>soinfos_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>soinfos<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> soinfos_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// list of libraries to link - see step 2.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token class-name\">size_t</span> soinfos_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">auto</span> scope_guard <span class=\"token operator\">=</span> android<span class=\"token operator\">::</span>base<span class=\"token operator\">::</span><span class=\"token function\">make_scope_guard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>LoadTask<span class=\"token operator\">*</span> t <span class=\"token operator\">:</span> load_tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        LoadTask<span class=\"token operator\">::</span><span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>ZipArchiveCache zip_archive_cache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">soinfo_list_t</span> new_global_group_members<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"寻找依赖库添加到待加载队列\"><a class=\"anchor\" href=\"#寻找依赖库添加到待加载队列\">#</a> 寻找依赖库，添加到待加载队列</h3>\n<p>将待加载的 so 的依赖库添加到 <code>load_tasks</code>  队列中，此时并不会加载依赖库</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 1: expand the list of load_tasks to include</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// all DT_NEEDED libraries (do not load them just yet)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>load_tasks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LoadTask<span class=\"token operator\">*</span> task <span class=\"token operator\">=</span> load_tasks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> needed_by <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_needed_by</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    bool is_dt_needed <span class=\"token operator\">=</span> needed_by <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>needed_by <span class=\"token operator\">!=</span> start_with <span class=\"token operator\">||</span> add_as_children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_extinfo</span><span class=\"token punctuation\">(</span>is_dt_needed <span class=\"token operator\">?</span> nullptr <span class=\"token operator\">:</span> extinfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_dt_needed</span><span class=\"token punctuation\">(</span>is_dt_needed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"find_libraries(ns=%s): task=%s, is_dt_needed=%d\"</span><span class=\"token punctuation\">,</span> ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> is_dt_needed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// Note: start from the namespace that is stored in the LoadTask. This namespace</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// is different from the current namespace when the LoadTask is for a transitive</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// dependency and the lib that created the LoadTask is not found in the</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// current namespace but in one of the linked namespace.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">find_library_internal</span><span class=\"token punctuation\">(</span>const_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span><span class=\"token function\">get_start_from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                               task<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>zip_archive_cache<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>load_tasks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                               rtld_flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_dt_needed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        needed_by<span class=\"token operator\">-></span><span class=\"token function\">add_child</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// When ld_preloads is not null, the first</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// ld_preloads_count libs are in fact ld_preloads.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    bool is_ld_preload <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ld_preloads <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> soinfos_count <span class=\"token operator\">&lt;</span> ld_preloads_count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        ld_preloads<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        is_ld_preload <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>soinfos_count <span class=\"token operator\">&lt;</span> library_names_count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        soinfos<span class=\"token punctuation\">[</span>soinfos_count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// Add the new global group members to all initial namespaces. Do this secondary namespace setup</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// at the same time that libraries are added to their primary namespace so that the order of</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// global group members is the same in the every namespace. Only add a library to a namespace</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// once, even if it appears multiple times in the dependency graph.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_ld_preload <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span><span class=\"token function\">get_dt_flags_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> DF_1_GLOBAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> namespaces <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>new_global_group_members<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            new_global_group_members<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> linked_ns <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>namespaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> linked_ns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    linked_ns<span class=\"token operator\">-></span><span class=\"token function\">add_soinfo</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    si<span class=\"token operator\">-></span><span class=\"token function\">add_secondary_namespace</span><span class=\"token punctuation\">(</span>linked_ns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这一步要做的是调用 <code>find_library_internal</code>  获取到这个 so 的依赖库，那么什么是 so 的依赖库呢？我们拿 ida 随便反编译一个 so, <code>Needed Library</code>  开头的就是这一个 so 的所有依赖库</p>\n<p><img data-src=\"/android-load-so/image-20240216214503902.png\" alt=\"image-20240216214503902\" style=\"aspect-ratio:587 / 188;\"></p>\n<h4 id=\"find_library_internal\"><a class=\"anchor\" href=\"#find_library_internal\">#</a> find_library_internal</h4>\n<p>这里做了四次对于待加载 so 的依赖库的寻找</p>\n<ol>\n<li>调用 <code>find_loaded_library_by_soname</code>  这个库有没有被加载过了？加载过那么我找都不用找了直接返回寻找结果</li>\n<li>正常使用 <code>load_library</code>  找依赖库</li>\n<li>正常寻找找不到，那这个库是不是已经预置在系统库里面了？试试到全局命名空间 <code>g_default_namespace</code>  里面找找</li>\n<li>前三种方式都失败了？启动终极解决方案，到共享命名空间 <code>linked namespace</code>  找这个 so 的依赖库，还没找到那就是真的找不到了</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">find_library_internal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  LoadTask<span class=\"token operator\">*</span> task<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                  ZipArchiveCache<span class=\"token operator\">*</span> zip_archive_cache<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                  LoadTaskList<span class=\"token operator\">*</span> load_tasks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                  <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> candidate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 如果这个 so 已经被加载过了，就直接给 task 设置完 soinfo 后返回</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find_loaded_library_by_soname</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> true <span class=\"token comment\">/* search_linked_namespaces */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                    <span class=\"token operator\">&amp;</span>candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token string\">\"find_library_internal(ns=%s, task=%s): Already loaded (by soname): %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> candidate<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_soinfo</span><span class=\"token punctuation\">(</span>candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// Library might still be loaded, the accurate detection</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// of this fact is done by load_library.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ \\\"%s\\\" find_loaded_library_by_soname failed (*candidate=%s@%p). Trying harder... ]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> candidate <span class=\"token operator\">==</span> nullptr <span class=\"token operator\">?</span> <span class=\"token string\">\"n/a\"</span> <span class=\"token operator\">:</span> candidate<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 关键函数，用来寻找依赖库</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> zip_archive_cache<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                   true <span class=\"token comment\">/* search_linked_namespaces */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// TODO(dimitry): workaround for http://b/26394120 (the exempt-list)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">//exempt lib, 即已经预置在系统库中的 so, 例如 libcrypto.so,libssl.so</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// 等等比较著名的库，假如发现是这些库的话，用默认命名空间获取 soinfo</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ns<span class=\"token operator\">-></span><span class=\"token function\">is_exempt_list_enabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_exempt_lib</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_needed_by</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// For the libs in the exempt-list, switch to the default namespace and then</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// try the load again from there. The library could be loaded from the</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// default namespace or from another namespace (e.g. runtime) that is linked</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// from the default namespace.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>           <span class=\"token string\">\"find_library_internal(ns=%s, task=%s): Exempt system library - trying namespace %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>           ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> g_default_namespace<span class=\"token punctuation\">.</span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    ns <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>g_default_namespace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> zip_archive_cache<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                     true <span class=\"token comment\">/* search_linked_namespaces */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// END OF WORKAROUND</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// if a library was not found - look into linked namespaces</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// preserve current dlerror in the case it fails.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\">// 假如找遍了自己的命名空间还是没找到这个 so 的依赖库的话，就去共享命名空间 (linked namespace)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// 里面去找找看</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  DlErrorRestorer dlerror_restorer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"find_library_internal(ns=%s, task=%s): Trying %zu linked namespaces\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ns<span class=\"token operator\">-></span><span class=\"token function\">linked_namespaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> linked_namespace <span class=\"token operator\">:</span> ns<span class=\"token operator\">-></span><span class=\"token function\">linked_namespaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find_library_in_linked_namespace</span><span class=\"token punctuation\">(</span>linked_namespace<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token comment\">// Library is already loaded.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// n.b. This code path runs when find_library_in_linked_namespace found an already-loaded</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// library by soname. That should only be possible with a exempt-list lookup, where we</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// switch the namespace, because otherwise, find_library_in_linked_namespace is duplicating</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// the soname scan done in this function's first call to find_loaded_library_by_soname.</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>linked_namespace<span class=\"token punctuation\">.</span><span class=\"token function\">linked_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> zip_archive_cache<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                       rtld_flags<span class=\"token punctuation\">,</span> false <span class=\"token comment\">/* search_linked_namespaces */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"find_library_internal(ns=%s, task=%s): Found in linked namespace %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>               ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> linked_namespace<span class=\"token punctuation\">.</span><span class=\"token function\">linked_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"load_library\"><a class=\"anchor\" href=\"#load_library\">#</a> load_library</h4>\n<p>函数声明:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                         LoadTask<span class=\"token operator\">*</span> task<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         ZipArchiveCache<span class=\"token operator\">*</span> zip_archive_cache<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         LoadTaskList<span class=\"token operator\">*</span> load_tasks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                         <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         bool search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这个函数中，首先判断 <code>extinfo-&gt;flags</code>  是否是 <code>ANDROID_DLEXT_USE_LIBRARY_FD</code> , 如果同时有 <code>ANDROID_DLEXT_USE_LIBRARY_FD_OFFSET</code> , 标志在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vbmRrL3JlZmVyZW5jZS9ncm91cC9saWJkbA==\"> Android 官网的解释</span>如下</p>\n<p><img data-src=\"/android-load-so/image-20240217132018399.png\" alt=\"image-20240217132018399\" style=\"aspect-ratio:1095 / 403;\"></p>\n<p>那这样就方便了，假如已经有了这个 library 的 <code>fd</code>  文件描述符，那直接拿过来用就可以了</p>\n<p>但是我们待加载的 so 的 <code>extinfo-&gt;flags</code>  已经在 <code>android::OpenNativeLibrary</code>  中被定义为 <code>ANDROID_DLEXT_USE_NAMESPACE</code>  了，这个标志的含义在上图中也有给出，所以很遗憾，这个 <code>if</code>  语句中的代码并不会被执行</p>\n<p><img data-src=\"/android-load-so/image-20240217131920074.png\" alt=\"image-20240217131920074\" style=\"aspect-ratio:479 / 82;\"></p>\n<p>那么为什么要特意在此处加入这个 if 语句呢？</p>\n<p>我的理解是为了提高运行的效率，有一些底层的库已经打开过，加载过了，那么就完全没有必要再打开，搜索一次，直接把 library 的 <code>fd</code>  文件描述符拿过来用就可以了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>soinfo<span class=\"token operator\">*</span> needed_by <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_needed_by</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_extinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 如果 extinfo->flags 的标记是 ANDROID_DLEXT_USE_LIBRARY_FD, 则直接通过</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//fd 文件描述符来打开</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_LIBRARY_FD<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">off64_t</span> file_offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_LIBRARY_FD_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        file_offset <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>library_fd_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token operator\">::</span>string realpath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">realpath_fd</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>library_fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_first_stage_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"warning: unable to get realpath for the library \\\"%s\\\" by extinfo->library_fd. \"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\"Will use given name.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        realpath <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_fd</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>library_fd<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_file_offset</span><span class=\"token punctuation\">(</span>file_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">,</span> search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后，我们千辛万苦终于看到了这对于待加载的 so 的第一个操作，调用 <code>open_library</code>  打开它</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Open the file.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">off64_t</span> file_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token operator\">::</span>string realpath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> zip_archive_cache<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> needed_by<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>file_offset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 如果打开 so 失败，寻找失败原因</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span><span class=\"token function\">is_dt_needed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needed_by<span class=\"token operator\">-></span><span class=\"token function\">is_main_executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library \\\"%s\\\" not found: needed by main executable\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library \\\"%s\\\" not found: needed by %s in namespace %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        needed_by<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_start_from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library \\\"%s\\\" not found\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//set fd and file_offset</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>task<span class=\"token operator\">-></span><span class=\"token function\">set_fd</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>task<span class=\"token operator\">-></span><span class=\"token function\">set_file_offset</span><span class=\"token punctuation\">(</span>file_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们知道 <code>System.load</code>  需要指定待加载的 so 的绝对路径，这在 <code>open_library</code>  中便符合第一个 if 语句，所以接下来将会调用 <code>open_library_at_path</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">open_library</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        ZipArchiveCache<span class=\"token operator\">*</span> zip_archive_cache<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> soinfo <span class=\"token operator\">*</span>needed_by<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token class-name\">off64_t</span><span class=\"token operator\">*</span> file_offset<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">*</span> realpath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ opening %s from namespace %s ]\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// If the name contains a slash, we should attempt to open it directly and not search the paths.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 有斜杠，说明是绝对路径打开的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">open_library_at_path</span><span class=\"token punctuation\">(</span>zip_archive_cache<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> file_offset<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// LD_LIBRARY_PATH has the highest priority. We don't have to check accessibility when searching</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// the namespace's path lists, because anything found on a namespace path list should always be</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// accessible.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open_library_on_paths</span><span class=\"token punctuation\">(</span>zip_archive_cache<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> file_offset<span class=\"token punctuation\">,</span> ns<span class=\"token operator\">-></span><span class=\"token function\">get_ld_library_paths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// Try the DT_RUNPATH, and verify that the library is accessible.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> needed_by <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    fd <span class=\"token operator\">=</span> <span class=\"token function\">open_library_on_paths</span><span class=\"token punctuation\">(</span>zip_archive_cache<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> file_offset<span class=\"token punctuation\">,</span> needed_by<span class=\"token operator\">-></span><span class=\"token function\">get_dt_runpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ns<span class=\"token operator\">-></span><span class=\"token function\">is_accessible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// Finally search the namespace's main search path list.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    fd <span class=\"token operator\">=</span> <span class=\"token function\">open_library_on_paths</span><span class=\"token punctuation\">(</span>zip_archive_cache<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> file_offset<span class=\"token punctuation\">,</span> ns<span class=\"token operator\">-></span><span class=\"token function\">get_default_library_paths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>open_library_at_path</code>  中才算是真正的使用 <code>open</code>  函数打开了这个 so, 并返回文件描述符 <code>fd</code> , 传入的两个标志的含义分别为</p>\n<ul>\n<li><code>O_RDONLY</code>  表示以只读方式打开文件。</li>\n<li><code>O_CLOEXEC</code>  表示在 exec 族函数 (execl, execlp, execle, execv, execvp, execvpe) 调用后，将自动关闭文件描述符</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">open_library_at_path</span><span class=\"token punctuation\">(</span>ZipArchiveCache<span class=\"token operator\">*</span> zip_archive_cache<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span><span class=\"token operator\">*</span> file_offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                std<span class=\"token operator\">::</span>string<span class=\"token operator\">*</span> realpath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 如果路径中包含 \"!/\", 则通过 zipfile 打开库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> kZipFileSeparator<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    fd <span class=\"token operator\">=</span> <span class=\"token function\">open_library_in_zipfile</span><span class=\"token punctuation\">(</span>zip_archive_cache<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> file_offset<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    fd <span class=\"token operator\">=</span> <span class=\"token function\">TEMP_FAILURE_RETRY</span><span class=\"token punctuation\">(</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> O_RDONLY <span class=\"token operator\">|</span> O_CLOEXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token operator\">*</span>file_offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">realpath_fd</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_first_stage_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"warning: unable to get realpath for the library \\\"%s\\\". Will use given path.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">*</span>realpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>成功的打开了这个 so 之后，那就要开始解析这个 so 咯，看看 <code>load_library</code>  最终 <code>return</code>  的啥？竟然还是 <code>load_library</code> ! 不过细看第三个参数，怎么感觉类型不是 <code>ZipArchiveCache*</code>  呢</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">,</span> search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>找找函数的声明，原来 <code>load_library</code>  还有一个重载函数，它的第三个参数的类型就是 <code>LoadTaskList*</code></p>\n<p>此 <code>load_library</code>  函数的完整代码如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                         LoadTask<span class=\"token operator\">*</span> task<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         ZipArchiveCache<span class=\"token operator\">*</span> zip_archive_cache<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         LoadTaskList<span class=\"token operator\">*</span> load_tasks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                         <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         bool search_linked_namespaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> needed_by <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_needed_by</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_extinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 如果 extinfo->flags 的标记是 ANDROID_DLEXT_USE_LIBRARY_FD, 则直接通过</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//fd 文件描述符来打开</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_LIBRARY_FD<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">off64_t</span> file_offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_USE_LIBRARY_FD_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      file_offset <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>library_fd_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    std<span class=\"token operator\">::</span>string realpath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">realpath_fd</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>library_fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_first_stage_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token string\">\"warning: unable to get realpath for the library \\\"%s\\\" by extinfo->library_fd. \"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token string\">\"Will use given name.\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      realpath <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_fd</span><span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>library_fd<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_file_offset</span><span class=\"token punctuation\">(</span>file_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">,</span> search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         <span class=\"token string\">\"load_library(ns=%s, task=%s, flags=0x%x, search_linked_namespaces=%d): calling \"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token string\">\"open_library\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span> search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// Open the file.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token class-name\">off64_t</span> file_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  std<span class=\"token operator\">::</span>string realpath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> zip_archive_cache<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> needed_by<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>file_offset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>realpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// 如果打开 so 失败，寻找失败原因</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span><span class=\"token function\">is_dt_needed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needed_by<span class=\"token operator\">-></span><span class=\"token function\">is_main_executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library \\\"%s\\\" not found: needed by main executable\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library \\\"%s\\\" not found: needed by %s in namespace %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    needed_by<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_start_from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library \\\"%s\\\" not found\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">//set fd and file_offset</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  task<span class=\"token operator\">-></span><span class=\"token function\">set_fd</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  task<span class=\"token operator\">-></span><span class=\"token function\">set_file_offset</span><span class=\"token punctuation\">(</span>file_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">,</span> load_tasks<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">,</span> search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"重载的load_library\"><a class=\"anchor\" href=\"#重载的load_library\">#</a> 重载的 load_library</h4>\n<p>函数声明:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">load_library</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                         LoadTask<span class=\"token operator\">*</span> task<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         LoadTaskList<span class=\"token operator\">*</span> load_tasks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                         <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> realpath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                         bool search_linked_namespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数的开头做了一大堆参数合法性的检查，随后终于开始解析 so 了，其关键函数为 <code>task-&gt;read(realpath.c_str(), file_stat.st_size)</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> <span class=\"token function\">soinfo_alloc</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> realpath<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>file_stat<span class=\"token punctuation\">,</span> file_offset<span class=\"token punctuation\">,</span> rtld_flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>task<span class=\"token operator\">-></span><span class=\"token function\">set_soinfo</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Read the ELF header and some of the segments.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>task<span class=\"token operator\">-></span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>realpath<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file_stat<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">remove_cached_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    task<span class=\"token operator\">-></span><span class=\"token function\">set_soinfo</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">soinfo_free</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// Find and set DT_RUNPATH, DT_SONAME, and DT_FLAGS_1.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Note that these field values are temporary and are</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// going to be overwritten on soinfo::prelink_image</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// with values from PT_LOAD segments.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> ElfReader<span class=\"token operator\">&amp;</span> elf_reader <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> d <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">!=</span> DT_NULL<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_RUNPATH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_dt_runpath</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_SONAME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_soname</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// We need to identify a DF_1_GLOBAL library early so we can link it to namespaces.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_FLAGS_1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_dt_flags_1</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token function\">for_each_dt_needed</span><span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span><span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"load_library(ns=%s, task=%s): Adding DT_NEEDED task: %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>           ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    load_tasks<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>LoadTask<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">,</span> ns<span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_readers_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>LoadTask::read</strong></p>\n<p>初始化了一个 <code>ElfReader</code> , 随后调用 <code>elf_reader.Read</code>  正式开始读取</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> realpath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ElfReader<span class=\"token operator\">&amp;</span> elf_reader <span class=\"token operator\">=</span> <span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>realpath<span class=\"token punctuation\">,</span> fd_<span class=\"token punctuation\">,</span> file_offset_<span class=\"token punctuation\">,</span> file_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>ElfReader::Read</strong></p>\n<p>兜兜转转了那么久，终于看到了这个亲切又熟悉的函数了！！</p>\n<p>关于这个函数的更多分析请参考<a href=\"oacia.dev/ElfReader\"> ELF 结构分析及 ElfReader</a></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_phdr.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool ElfReader<span class=\"token operator\">::</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_offset<span class=\"token punctuation\">,</span> <span class=\"token class-name\">off64_t</span> file_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>did_read_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name_ <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  fd_ <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  file_offset_ <span class=\"token operator\">=</span> file_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  file_size_ <span class=\"token operator\">=</span> file_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ReadElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">VerifyElfHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">ReadProgramHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">ReadSectionHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">ReadDynamicSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    did_read_ <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> did_read_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p>在获取到待加载的 so 的各个段的结构之后，接下来就是解析 <code>.dynamic</code>  中保存的符号</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Find and set DT_RUNPATH, DT_SONAME, and DT_FLAGS_1.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Note that these field values are temporary and are</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// going to be overwritten on soinfo::prelink_image</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// with values from PT_LOAD segments.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> ElfReader<span class=\"token operator\">&amp;</span> elf_reader <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> d <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">!=</span> DT_NULL<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_RUNPATH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_dt_runpath</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_SONAME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_soname</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// We need to identify a DF_1_GLOBAL library early so we can link it to namespaces.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_FLAGS_1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_dt_flags_1</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之后找到待加载的 so 的依赖库，这里有一个模板函数 <code>for_each_dt_needed</code> , 找到 <code>.dynamic</code>  中所有带有 <code>DT_NEEDED</code>  标志的字符串，这些字符串的名称就是这个 so 所需要的依赖库，然后将它们添加到 <code>load_tasks</code>  队列中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">for_each_dt_needed</span><span class=\"token punctuation\">(</span>task<span class=\"token operator\">-></span><span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"load_library(ns=%s, task=%s): Adding DT_NEEDED task: %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    load_tasks<span class=\"token operator\">-></span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>LoadTask<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">,</span> ns<span class=\"token punctuation\">,</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_readers_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_soinfo.h</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>template<span class=\"token operator\">&lt;</span>typename F<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">for_each_dt_needed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> soinfo<span class=\"token operator\">*</span> si<span class=\"token punctuation\">,</span> F action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> d <span class=\"token operator\">=</span> si<span class=\"token operator\">-></span>dynamic<span class=\"token punctuation\">;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">!=</span> DT_NULL<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_NEEDED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token function\">fix_dt_needed</span><span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"乱序加载库\"><a class=\"anchor\" href=\"#乱序加载库\">#</a> 乱序加载库</h3>\n<p>乱序加载的原因如下，看上去是为了抵御攻击</p>\n<blockquote>\n<p>ld.so(1) on ELF platforms now loads libraries in a random order for greater resistance to attacks</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 2: Load libraries in random order (see b/24047022)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>LoadTaskList load_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> task <span class=\"token operator\">:</span> load_tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">auto</span> pred <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> LoadTask<span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        std<span class=\"token operator\">::</span><span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>load_list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> load_list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pred<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> load_list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        load_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>bool reserved_address_recursive <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    reserved_address_recursive <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_RESERVED_ADDRESS_RECURSIVE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reserved_address_recursive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// Shuffle the load order in the normal case, but not if we are loading all</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// the libraries to a reserved address range.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>load_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// Set up address space parameters.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>address_space_params extinfo_params<span class=\"token punctuation\">,</span> default_params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token class-name\">size_t</span> relro_fd_offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_RESERVED_ADDRESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        extinfo_params<span class=\"token punctuation\">.</span>start_addr <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>reserved_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        extinfo_params<span class=\"token punctuation\">.</span>reserved_size <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>reserved_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        extinfo_params<span class=\"token punctuation\">.</span>must_use_address <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extinfo<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> ANDROID_DLEXT_RESERVED_ADDRESS_HINT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        extinfo_params<span class=\"token punctuation\">.</span>start_addr <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>reserved_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        extinfo_params<span class=\"token punctuation\">.</span>reserved_size <span class=\"token operator\">=</span> extinfo<span class=\"token operator\">-></span>reserved_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> task <span class=\"token operator\">:</span> load_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    address_space_params<span class=\"token operator\">*</span> address_space <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">(</span>reserved_address_recursive <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>task<span class=\"token operator\">-></span><span class=\"token function\">is_dt_needed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">&amp;</span>extinfo_params <span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>default_params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 加载所有的库，包括待加载的 so</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>task<span class=\"token operator\">-></span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>address_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>load</code>  函数就是将 ELF 的相关结构的值赋值给 <code>si_</code> , 其中我们可以看到比较重要的字段有 <code>phdr_count</code> , <code>loaded_phdr</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>address_space_params<span class=\"token operator\">*</span> address_space<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ElfReader<span class=\"token operator\">&amp;</span> elf_reader <span class=\"token operator\">=</span> <span class=\"token function\">get_elf_reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>address_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    si_<span class=\"token operator\">-></span>base <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">load_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    si_<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">load_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    si_<span class=\"token operator\">-></span><span class=\"token function\">set_mapped_by_caller</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">is_mapped_by_caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    si_<span class=\"token operator\">-></span>load_bias <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">load_bias</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    si_<span class=\"token operator\">-></span>phnum <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">phdr_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    si_<span class=\"token operator\">-></span>phdr <span class=\"token operator\">=</span> elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">loaded_phdr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    si_<span class=\"token operator\">-></span><span class=\"token function\">set_gap_start</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">gap_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    si_<span class=\"token operator\">-></span><span class=\"token function\">set_gap_size</span><span class=\"token punctuation\">(</span>elf_reader<span class=\"token punctuation\">.</span><span class=\"token function\">gap_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"预链接解析所有依赖库\"><a class=\"anchor\" href=\"#预链接解析所有依赖库\">#</a> 预链接解析所有依赖库</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 3: pre-link all DT_NEEDED libraries in breadth first order.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> task <span class=\"token operator\">:</span> load_tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">prelink_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">register_soinfo_tls</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们看到调用了 <code>prelink_image</code>  来预链接依赖库，主要是遍历 <code>.dynamic</code>  节，来提取必要的信息例如 <code>strtab_</code> , <code>symtab_</code> , <code>plt_rela_</code> , <code>init_array_</code> 等等各种必要的信息</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool soinfo<span class=\"token operator\">::</span><span class=\"token function\">prelink_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flags_ <span class=\"token operator\">&amp;</span> FLAG_PRELINKED<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/* Extract dynamic section */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Word<span class=\"token punctuation\">)</span> dynamic_flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 提取动态节（dynamic section）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">phdr_table_get_dynamic_section</span><span class=\"token punctuation\">(</span>phdr<span class=\"token punctuation\">,</span> phnum<span class=\"token punctuation\">,</span> load_bias<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dynamic<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dynamic_flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/* We can't log anything until the linker is relocated */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  bool relocating_linker <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>flags_ <span class=\"token operator\">&amp;</span> FLAG_LINKER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocating_linker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ Linking \\\"%s\\\" ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"si->base = %p si->flags = 0x%08x\"</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> flags_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dynamic <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocating_linker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"missing PT_DYNAMIC in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocating_linker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dynamic = %p\"</span><span class=\"token punctuation\">,</span> dynamic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__arm__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">phdr_table_get_arm_exidx</span><span class=\"token punctuation\">(</span>phdr<span class=\"token punctuation\">,</span> phnum<span class=\"token punctuation\">,</span> load_bias<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                  <span class=\"token operator\">&amp;</span>ARM_exidx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ARM_exidx_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  TlsSegment tls_segment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__bionic_get_tls_segment</span><span class=\"token punctuation\">(</span>phdr<span class=\"token punctuation\">,</span> phnum<span class=\"token punctuation\">,</span> load_bias<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tls_segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">__bionic_check_tls_alignment</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tls_segment<span class=\"token punctuation\">.</span>alignment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocating_linker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TLS segment alignment in \\\"%s\\\" is not a power of 2: %zu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>               <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tls_segment<span class=\"token punctuation\">.</span>alignment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    tls_ <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span>soinfo_tls<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    tls_<span class=\"token operator\">-></span>segment <span class=\"token operator\">=</span> tls_segment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">// Extract useful information from dynamic section.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// Note that: \"Except for the DT_NULL element at the end of the array,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// and the relative order of DT_NEEDED elements, entries may appear in any order.\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// source: http://www.sco.com/developers/gabi/1998-04-29/ch5.dynamic.html</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> needed_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// 循环遍历每个动态节，并根据 d_tag 为对应节做相应的处理</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> d <span class=\"token operator\">=</span> dynamic<span class=\"token punctuation\">;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">!=</span> DT_NULL<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d = %p, d[0](tag) = %p d[1](val) = %p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          d<span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_SONAME<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// this is parsed after we have strtab initialized (see below).</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_HASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        nbucket_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        nchain_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        bucket_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        chain_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> nbucket_ <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_GNU_HASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        gnu_nbucket_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// skip symndx</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        gnu_maskwords_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        gnu_shift2_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        gnu_bloom_filter_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        gnu_bucket_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>gnu_bloom_filter_ <span class=\"token operator\">+</span> gnu_maskwords_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// amend chain for symndx = header[1]</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        gnu_chain_ <span class=\"token operator\">=</span> gnu_bucket_ <span class=\"token operator\">+</span> gnu_nbucket_ <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">powerof2</span><span class=\"token punctuation\">(</span>gnu_maskwords_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid maskwords for gnu_hash = 0x%x, in \\\"%s\\\" expecting power to two\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>              gnu_maskwords_<span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token operator\">--</span>gnu_maskwords_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        flags_ <span class=\"token operator\">|=</span> FLAG_GNU_HASH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_STRTAB<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        strtab_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_STRSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        strtab_size_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_SYMTAB<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        symtab_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_SYMENT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid DT_SYMENT: %zd in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>              static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_PLTREL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">!=</span> DT_RELA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_PLTREL in \\\"%s\\\"; expected DT_RELA\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">!=</span> DT_REL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_PLTREL in \\\"%s\\\"; expected DT_REL\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_JMPREL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        plt_rela_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        plt_rel_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_PLTRELSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        plt_rela_count_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        plt_rel_count_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_PLTGOT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token comment\">// Ignored (because RTLD_LAZY is not supported).</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_DEBUG<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">// Set the DT_DEBUG entry to the address of _r_debug for GDB</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token comment\">// if the dynamic table is writable</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dynamic_flags <span class=\"token operator\">&amp;</span> PF_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>          d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uintptr_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>_r_debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELA<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        rela_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELASZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        rela_count_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELA<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        android_relocs_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELASZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        android_relocs_size_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_REL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_ANDROID_REL in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_ANDROID_RELSZ in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELAENT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rela<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid DT_RELAENT: %zd\"</span><span class=\"token punctuation\">,</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>      <span class=\"token comment\">// Ignored (see DT_RELCOUNT comments for details).</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELACOUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_REL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_REL in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_RELSZ in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_REL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        rel_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        rel_count_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELENT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Rel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid DT_RELENT: %zd\"</span><span class=\"token punctuation\">,</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_REL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        android_relocs_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        android_relocs_size_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELA<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_ANDROID_RELA in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELASZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_ANDROID_RELASZ in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>      <span class=\"token comment\">// \"Indicates that all RELATIVE relocations have been concatenated together,</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>      <span class=\"token comment\">// and specifies the RELATIVE relocation count.\"</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>      <span class=\"token comment\">// TODO: Spec also mentions that this can be used to optimize relocation process;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>      <span class=\"token comment\">// Not currently used by bionic linker - ignored.</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELCOUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELA<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_RELA in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELASZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported DT_RELASZ in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        relr_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Relr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELRSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELRSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>        relr_count_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Relr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RELRENT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELRENT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Relr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid DT_RELRENT: %zd\"</span><span class=\"token punctuation\">,</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>      <span class=\"token comment\">// Ignored (see DT_RELCOUNT comments for details).</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>      <span class=\"token comment\">// There is no DT_RELRCOUNT specifically because it would only be ignored.</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_ANDROID_RELRCOUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_INIT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        init_func_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s constructors (DT_INIT) found at %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> init_func_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_FINI<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        fini_func_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">linker_dtor_function_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>        <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s destructors (DT_FINI) found at %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fini_func_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_INIT_ARRAY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>        init_array_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s constructors (DT_INIT_ARRAY) found at %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> init_array_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_INIT_ARRAYSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>        init_array_count_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_FINI_ARRAY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        fini_array_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">linker_dtor_function_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s destructors (DT_FINI_ARRAY) found at %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fini_array_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_FINI_ARRAYSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>        fini_array_count_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_PREINIT_ARRAY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>        preinit_array_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">linker_ctor_function_t</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>        <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s constructors (DT_PREINIT_ARRAY) found at %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> preinit_array_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_PREINIT_ARRAYSZ<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>        preinit_array_count_ <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_TEXTREL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>        <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has text relocations\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>        has_text_relocations <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_SYMBOLIC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>        has_DT_SYMBOLIC <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_NEEDED<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>        <span class=\"token operator\">++</span>needed_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_FLAGS<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">&amp;</span> DF_TEXTREL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__LP64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>          <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"%s\\\" has text relocations\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>          <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>          has_text_relocations <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">&amp;</span> DF_SYMBOLIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>          has_DT_SYMBOLIC <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_FLAGS_1<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>        <span class=\"token function\">set_dt_flags_1</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>SUPPORTED_DT_FLAGS_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>          <span class=\"token function\">DL_WARN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Warning: \\\"%s\\\" has unsupported flags DT_FLAGS_1=%p \"</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>                  <span class=\"token string\">\"(ignoring unsupported flags)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>                  <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>      <span class=\"token comment\">// Ignored: \"Its use has been superseded by the DF_BIND_NOW flag\"</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_BIND_NOW<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_VERSYM<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>        versym_ <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Versym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_VERDEF<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>        verdef_ptr_ <span class=\"token operator\">=</span> load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_VERDEFNUM<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>        verdef_cnt_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_VERNEED<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>        verneed_ptr_ <span class=\"token operator\">=</span> load_bias <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_VERNEEDNUM<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>        verneed_cnt_ <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_RUNPATH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>        <span class=\"token comment\">// this is parsed after we have strtab initialized (see below).</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_TLSDESC_GOT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_TLSDESC_PLT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>        <span class=\"token comment\">// These DT entries are used for lazy TLSDESC relocations. Bionic</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>        <span class=\"token comment\">// resolves everything eagerly, so these can be ignored.</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre></pre></td></tr><tr><td data-num=\"376\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__aarch64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_AARCH64_BTI_PLT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_AARCH64_PAC_PLT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>      <span class=\"token keyword\">case</span> DT_AARCH64_VARIANT_PCS<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>        <span class=\"token comment\">// Ignored: AArch64 processor-specific dynamic array tags.</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocating_linker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>          <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> tag_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_RPATH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>            tag_name <span class=\"token operator\">=</span> <span class=\"token string\">\"DT_RPATH\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">==</span> DT_ENCODING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>            tag_name <span class=\"token operator\">=</span> <span class=\"token string\">\"DT_ENCODING\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">>=</span> DT_LOOS <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">&lt;=</span> DT_HIOS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>            tag_name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown OS-specific\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">>=</span> DT_LOPROC <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">&lt;=</span> DT_HIPROC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>            tag_name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown processor-specific\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>            tag_name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>          <span class=\"token function\">DL_WARN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Warning: \\\"%s\\\" unused DT entry: %s (type %p arg %p) (ignoring)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>                  <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>                  tag_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>                  reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>                  reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>  <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"si->base = %p, si->strtab = %p, si->symtab = %p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>        reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strtab_<span class=\"token punctuation\">,</span> symtab_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>  <span class=\"token comment\">// Validity checks.</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>relocating_linker <span class=\"token operator\">&amp;&amp;</span> needed_count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linker cannot have DT_NEEDED dependencies on other libraries\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nbucket_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> gnu_nbucket_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty/missing DT_HASH/DT_GNU_HASH in \\\"%s\\\" \"</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>        <span class=\"token string\">\"(new hash type from the future?)\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strtab_ <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty/missing DT_STRTAB in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symtab_ <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>    <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty/missing DT_SYMTAB in \\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre></pre></td></tr><tr><td data-num=\"430\"></td><td><pre>  <span class=\"token comment\">// Second pass - parse entries relying on strtab. Skip this while relocating the linker so as to</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>  <span class=\"token comment\">// avoid doing heap allocations until later in the linker's initialization.</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocating_linker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Dyn<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> d <span class=\"token operator\">=</span> dynamic<span class=\"token punctuation\">;</span> d<span class=\"token operator\">-></span>d_tag <span class=\"token operator\">!=</span> DT_NULL<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>        <span class=\"token keyword\">case</span> DT_SONAME<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>          <span class=\"token function\">set_soname</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>        <span class=\"token keyword\">case</span> DT_RUNPATH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>          <span class=\"token function\">set_dt_runpath</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d_un<span class=\"token punctuation\">.</span>d_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>  <span class=\"token comment\">// Before M release, linker was using basename in place of soname. In the case when DT_SONAME is</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>  <span class=\"token comment\">// absent some apps stop working because they can't find DT_NEEDED library by soname. This</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre>  <span class=\"token comment\">// workaround should keep them working. (Applies only for apps targeting sdk version &lt; M.) Make</span></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>  <span class=\"token comment\">// an exception for the main executable, which does not need to have DT_SONAME. The linker has an</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>  <span class=\"token comment\">// DT_SONAME but the soname_ field is initialized later on.</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>soname_<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> this <span class=\"token operator\">!=</span> <span class=\"token function\">solist_get_somain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>relocating_linker <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>      <span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>    soname_ <span class=\"token operator\">=</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>realpath_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>    <span class=\"token function\">DL_WARN_documented_change</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"missing-soname-enforced-for-api-level-23\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>                              <span class=\"token string\">\"\\\"%s\\\" has no DT_SONAME (will use %s instead)\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>                              soname_<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>    <span class=\"token comment\">// Don't call add_dlwarning because a missing DT_SONAME isn't important enough to show in the UI</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>  <span class=\"token comment\">// Validate each library's verdef section once, so we don't have to validate</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>  <span class=\"token comment\">// it each time we look up a symbol with a version.</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validate_verdef_section</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>  flags_ <span class=\"token operator\">|=</span> FLAG_PRELINKED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"构造全局组\"><a class=\"anchor\" href=\"#构造全局组\">#</a> 构造全局组</h3>\n<p>这一步为预链接的依赖库设置 <code>DF_1_GLOBAL</code>  全局标志，来标记这个库在全局组中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 4: Construct the global group. DF_1_GLOBAL bit is force set for LD_PRELOADed libs because</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// they must be added to the global group. Note: The DF_1_GLOBAL bit for a library is normally set</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// in step 3.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ld_preloads <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> si <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>ld_preloads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        si<span class=\"token operator\">-></span><span class=\"token function\">set_dt_flags_1</span><span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span><span class=\"token function\">get_dt_flags_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> DF_1_GLOBAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"收集local_groups的根节点\"><a class=\"anchor\" href=\"#收集local_groups的根节点\">#</a> 收集 local_groups 的根节点</h3>\n<p>看注释感觉挺抽象的，感觉是为了保证可以链接到别的 namespace 里面的依赖库</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 5: Collect roots of local_groups.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Whenever needed_by->si link crosses a namespace boundary it forms its own local_group.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Here we collect new roots to link them separately later on. Note that we need to avoid</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// collecting duplicates. Also the order is important. They need to be linked in the same</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// BFS order we link individual libraries.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>soinfo<span class=\"token operator\">*</span><span class=\"token operator\">></span> local_group_roots<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start_with <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> add_as_children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>start_with<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>soinfos_count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>soinfos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> task <span class=\"token operator\">:</span> load_tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> needed_by <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_needed_by</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    bool is_dt_needed <span class=\"token operator\">=</span> needed_by <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>needed_by <span class=\"token operator\">!=</span> start_with <span class=\"token operator\">||</span> add_as_children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> needed_by_ns <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        is_dt_needed <span class=\"token operator\">?</span> needed_by<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ns<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> needed_by_ns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>               <span class=\"token string\">\"Crossing namespace boundary (si=%s@%p, si_ns=%s@%p, needed_by=%s@%p, ns=%s@%p, needed_by_ns=%s@%p) adding to local_group_roots: %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>               si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               si<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>               si<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>               si<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>               needed_by <span class=\"token operator\">==</span> nullptr <span class=\"token operator\">?</span> <span class=\"token string\">\"(nullptr)\"</span> <span class=\"token operator\">:</span> needed_by<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>               needed_by<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>               ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>               ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>               needed_by_ns<span class=\"token operator\">-></span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>               needed_by_ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>               it <span class=\"token operator\">==</span> local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"yes\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            local_group_roots<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"链接所有的local-groups\"><a class=\"anchor\" href=\"#链接所有的local-groups\">#</a> 链接所有的 local groups</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 6: Link all local groups</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> root <span class=\"token operator\">:</span> local_group_roots<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">soinfo_list_t</span> local_group<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">android_namespace_t</span><span class=\"token operator\">*</span> local_group_ns <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">walk_dependencies_tree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                           <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span> si<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_group_ns<span class=\"token operator\">-></span><span class=\"token function\">is_accessible</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                   local_group<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                   <span class=\"token keyword\">return</span> kWalkContinue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                   <span class=\"token keyword\">return</span> kWalkSkip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                           <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取全局组包含的 soinfo，因为预加载库是一起加载的跟 local_group_ns 是同一个命名空间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 所有这里的全局组已经包含了预加载库</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">soinfo_list_t</span> global_group <span class=\"token operator\">=</span> local_group_ns<span class=\"token operator\">-></span><span class=\"token function\">get_global_group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 将本地组和全局组都添加到 lookup_list 中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    SymbolLookupList <span class=\"token function\">lookup_list</span><span class=\"token punctuation\">(</span>global_group<span class=\"token punctuation\">,</span> local_group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> local_group_root <span class=\"token operator\">=</span> local_group<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    bool linked <span class=\"token operator\">=</span> local_group<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span> si<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// Even though local group may contain accessible soinfos from other namespaces</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// we should avoid linking them (because if they are not linked -> they</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// are in the local_group_roots and will be linked later).</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_primary_namespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> local_group_ns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> link_extinfo <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>si <span class=\"token operator\">==</span> soinfos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> reserved_address_recursive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// Only forward extinfo for the first library unless the recursive</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// flag is set.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                link_extinfo <span class=\"token operator\">=</span> extinfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__libc_shared_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>load_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">__libc_shared_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">load_hook</span><span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span>load_bias<span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>phdr<span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>phnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            lookup_list<span class=\"token punctuation\">.</span><span class=\"token function\">set_dt_symbolic_lib</span><span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span>has_DT_SYMBOLIC <span class=\"token operator\">?</span> si <span class=\"token operator\">:</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 调用 link_image 开始进行依赖库的动态链接，重定位等工作</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>si<span class=\"token operator\">-></span><span class=\"token function\">link_image</span><span class=\"token punctuation\">(</span>lookup_list<span class=\"token punctuation\">,</span> local_group_root<span class=\"token punctuation\">,</span> link_extinfo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>relro_fd_offset<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token operator\">!</span><span class=\"token function\">get_cfi_shadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">AfterLoad</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">,</span> <span class=\"token function\">solist_get_head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>linked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当把所有的本地组和全局组加入到 <code>lookup_list</code>  中后，就开始调用 <code>si-&gt;link_image</code>  来对这些库进行链接的操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool soinfo<span class=\"token operator\">::</span><span class=\"token function\">link_image</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SymbolLookupList<span class=\"token operator\">&amp;</span> lookup_list<span class=\"token punctuation\">,</span> soinfo<span class=\"token operator\">*</span> local_group_root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span><span class=\"token operator\">*</span> relro_fd_offset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_image_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// already linked.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g_is_ldd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">is_main_executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">async_safe_format_fd</span><span class=\"token punctuation\">(</span>STDOUT_FILENO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t%s => %s (%p)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_soname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                         <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  local_group_root_ <span class=\"token operator\">=</span> local_group_root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_group_root_ <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    local_group_root_ <span class=\"token operator\">=</span> this<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flags_ <span class=\"token operator\">&amp;</span> FLAG_LINKER<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> local_group_root_ <span class=\"token operator\">==</span> this<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    target_sdk_version_ <span class=\"token operator\">=</span> <span class=\"token function\">get_application_target_sdk_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 进行符号的重定位</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">relocate</span><span class=\"token punctuation\">(</span>lookup_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ finished linking %s ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>soinfo::link_image</code>  中调用了 <code>relocate</code>  去进行符号的重定位</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_relocate.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool soinfo<span class=\"token operator\">::</span><span class=\"token function\">relocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SymbolLookupList<span class=\"token operator\">&amp;</span> lookup_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  VersionTracker version_tracker<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>version_tracker<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Relocator <span class=\"token function\">relocator</span><span class=\"token punctuation\">(</span>version_tracker<span class=\"token punctuation\">,</span> lookup_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  relocator<span class=\"token punctuation\">.</span>si <span class=\"token operator\">=</span> this<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//`.strtab` 节保存的是符号字符串表，表中的内容会被 `.symtab` 的 `ElfN_Sym` 结构中的 `st_name` 引用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  relocator<span class=\"token punctuation\">.</span>si_strtab <span class=\"token operator\">=</span> strtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  relocator<span class=\"token punctuation\">.</span>si_strtab_size <span class=\"token operator\">=</span> <span class=\"token function\">has_min_version</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> strtab_size_ <span class=\"token operator\">:</span> SIZE_MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//`.symtab` 节是一个 `ElfN_Sym` 的数组，保存了符号信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  relocator<span class=\"token punctuation\">.</span>si_symtab <span class=\"token operator\">=</span> symtab_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  relocator<span class=\"token punctuation\">.</span>tlsdesc_args <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>tlsdesc_args_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  relocator<span class=\"token punctuation\">.</span>tls_tp_base <span class=\"token operator\">=</span> <span class=\"token function\">__libc_shared_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>static_tls_layout<span class=\"token punctuation\">.</span><span class=\"token function\">offset_thread_pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">////android_relocs_在 prelink_image () 中设置，动态节有 DT_ANDROID_REL 才会设置</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>android_relocs_ <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// check signature</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>android_relocs_size_ <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        android_relocs_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        android_relocs_<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'P'</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        android_relocs_<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'S'</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        android_relocs_<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ android relocating %s ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> packed_relocs <span class=\"token operator\">=</span> android_relocs_ <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> packed_relocs_size <span class=\"token operator\">=</span> android_relocs_size_ <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>packed_relocate<span class=\"token operator\">&lt;</span>RelocMode<span class=\"token operator\">::</span>Typical<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> <span class=\"token function\">sleb128_decoder</span><span class=\"token punctuation\">(</span>packed_relocs<span class=\"token punctuation\">,</span> packed_relocs_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad android relocation header.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>relr_ <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ relocating %s relr ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">relocate_relr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rela_ <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ relocating %s rela ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>plain_relocate<span class=\"token operator\">&lt;</span>RelocMode<span class=\"token operator\">::</span>Typical<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> rela_<span class=\"token punctuation\">,</span> rela_count_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>plt_rela_ <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ relocating %s plt rela ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>plain_relocate<span class=\"token operator\">&lt;</span>RelocMode<span class=\"token operator\">::</span>JumpTable<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> plt_rela_<span class=\"token punctuation\">,</span> plt_rela_count_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rel_ <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ relocating %s rel ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>plain_relocate<span class=\"token operator\">&lt;</span>RelocMode<span class=\"token operator\">::</span>Typical<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> rel_<span class=\"token punctuation\">,</span> rel_count_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>plt_rel_ <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">DEBUG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ relocating %s plt rel ]\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>plain_relocate<span class=\"token operator\">&lt;</span>RelocMode<span class=\"token operator\">::</span>JumpTable<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> plt_rel_<span class=\"token punctuation\">,</span> plt_rel_count_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">// Once the tlsdesc_args_ vector's size is finalized, we can write the addresses of its elements</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">// into the TLSDESC relocations.</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__aarch64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// Bionic currently only implements TLSDESC for arm64.</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>pair<span class=\"token operator\">&lt;</span>TlsDescriptor<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> relocator<span class=\"token punctuation\">.</span>deferred_tlsdesc_relocs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    TlsDescriptor<span class=\"token operator\">*</span> desc <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    desc<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> tlsdesc_resolver_dynamic<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    desc<span class=\"token operator\">-></span>arg <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tlsdesc_args_<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后依次调用了 <code>plain_relocate-&gt;plain_relocate_impl-&gt;process_relocation</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template <span class=\"token operator\">&lt;</span>RelocMode OptMode<span class=\"token punctuation\">,</span> typename <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>Args<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">plain_relocate</span><span class=\"token punctuation\">(</span>Relocator<span class=\"token operator\">&amp;</span> relocator<span class=\"token punctuation\">,</span> Args <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">needs_slow_relocate_loop</span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      plain_relocate_impl<span class=\"token operator\">&lt;</span>RelocMode<span class=\"token operator\">::</span>General<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      plain_relocate_impl<span class=\"token operator\">&lt;</span>OptMode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>template <span class=\"token operator\">&lt;</span>RelocMode Mode<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>noinline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">plain_relocate_impl</span><span class=\"token punctuation\">(</span>Relocator<span class=\"token operator\">&amp;</span> relocator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">rel_t</span><span class=\"token operator\">*</span> rels<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> rel_count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rel_count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>process_relocation<span class=\"token operator\">&lt;</span>Mode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> rels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>template <span class=\"token operator\">&lt;</span>RelocMode Mode<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>always_inline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> bool <span class=\"token function\">process_relocation</span><span class=\"token punctuation\">(</span>Relocator<span class=\"token operator\">&amp;</span> relocator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">rel_t</span><span class=\"token operator\">&amp;</span> reloc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">return</span> Mode <span class=\"token operator\">==</span> RelocMode<span class=\"token operator\">::</span>General <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">process_relocation_general</span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> reloc<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      process_relocation_impl<span class=\"token operator\">&lt;</span>Mode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> reloc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终在 <code>process_relocation_impl</code>  实现了符号的重定向并调用 <code>lookup_symbol</code>  来查找符号</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template <span class=\"token operator\">&lt;</span>RelocMode Mode<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>always_inline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">process_relocation_impl</span><span class=\"token punctuation\">(</span>Relocator<span class=\"token operator\">&amp;</span> relocator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">rel_t</span><span class=\"token operator\">&amp;</span> reloc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  constexpr bool IsGeneral <span class=\"token operator\">=</span> Mode <span class=\"token operator\">==</span> RelocMode<span class=\"token operator\">::</span>General<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> rel_target <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>reloc<span class=\"token punctuation\">.</span>r_offset <span class=\"token operator\">+</span> relocator<span class=\"token punctuation\">.</span>si<span class=\"token operator\">-></span>load_bias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> r_type <span class=\"token operator\">=</span> <span class=\"token function\">ELFW</span><span class=\"token punctuation\">(</span>R_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reloc<span class=\"token punctuation\">.</span>r_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> r_sym <span class=\"token operator\">=</span> <span class=\"token function\">ELFW</span><span class=\"token punctuation\">(</span>R_SYM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reloc<span class=\"token punctuation\">.</span>r_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> found_in <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> sym <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sym_name <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> sym_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_sym <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \t<span class=\"token comment\">// 获取重定向的符号名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    sym_name <span class=\"token operator\">=</span> relocator<span class=\"token punctuation\">.</span><span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">.</span>si_symtab<span class=\"token punctuation\">[</span>r_sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>st_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>USE_RELA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">auto</span> get_addend_rel   <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> reloc<span class=\"token punctuation\">.</span>r_addend<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">auto</span> get_addend_norel <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> reloc<span class=\"token punctuation\">.</span>r_addend<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">auto</span> get_addend_rel   <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>static_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>rel_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">auto</span> get_addend_norel <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsGeneral <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_tls_reloc</span><span class=\"token punctuation\">(</span>r_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_sym <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// Do nothing.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">// 利用 lookup_symbol 来查找符号</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lookup_symbol<span class=\"token operator\">&lt;</span>IsGeneral<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">,</span> r_sym<span class=\"token punctuation\">,</span> sym_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>found_in<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sym <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">const</span> bool should_protect_segments <span class=\"token operator\">=</span> handle_text_relocs <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                                             found_in <span class=\"token operator\">==</span> relocator<span class=\"token punctuation\">.</span>si <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                                             <span class=\"token function\">ELF_ST_TYPE</span><span class=\"token punctuation\">(</span>sym<span class=\"token operator\">-></span>st_info<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> STT_GNU_IFUNC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>should_protect_segments <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">protect_segments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        sym_addr <span class=\"token operator\">=</span> found_in<span class=\"token operator\">-></span><span class=\"token function\">resolve_symbol_address</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>should_protect_segments <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">unprotect_segments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token function\">constexpr</span> <span class=\"token punctuation\">(</span>IsGeneral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// A weak reference to an undefined symbol. We typically use a zero symbol address, but</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// use the relocation base for PC-relative relocations, so that the value written is zero.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>r_type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__x86_64__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          <span class=\"token keyword\">case</span> R_X86_64_PC32<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            sym_addr <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>rel_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>__i386__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          <span class=\"token keyword\">case</span> R_386_PC32<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            sym_addr <span class=\"token operator\">=</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>rel_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">// 大部分符号的类型都是 R_GENERIC_JUMP_SLOT </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token function\">constexpr</span> <span class=\"token punctuation\">(</span>IsGeneral <span class=\"token operator\">||</span> Mode <span class=\"token operator\">==</span> RelocMode<span class=\"token operator\">::</span>JumpTable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_type <span class=\"token operator\">==</span> R_GENERIC_JUMP_SLOT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      count_relocation_if<span class=\"token operator\">&lt;</span>IsGeneral<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>kRelocAbsolute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> sym_addr <span class=\"token operator\">+</span> <span class=\"token function\">get_addend_norel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token function\">trace_reloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RELO JMP_SLOT %16p &lt;- %16p %s\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                  rel_target<span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sym_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token operator\">*</span>static_cast<span class=\"token operator\">&lt;</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>rel_target<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  其他类型或架构的相关重定向计算省略\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>lookup_symbol</code>  中调用了 <code>soinfo_do_lookup</code>  来查找符号</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template <span class=\"token operator\">&lt;</span>bool DoLogging<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>always_inline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> bool <span class=\"token function\">lookup_symbol</span><span class=\"token punctuation\">(</span>Relocator<span class=\"token operator\">&amp;</span> relocator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> r_sym<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sym_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                 soinfo<span class=\"token operator\">*</span><span class=\"token operator\">*</span> found_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> sym<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//relocator 是前面传进来包含全局组和本地组的 soinfos，全局组排在最前面</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 如果上一次已经查找过这个符号，那么久没有必要再查找一次</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_sym <span class=\"token operator\">==</span> relocator<span class=\"token punctuation\">.</span>cache_sym_val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">*</span>found_in <span class=\"token operator\">=</span> relocator<span class=\"token punctuation\">.</span>cache_si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">*</span>sym <span class=\"token operator\">=</span> relocator<span class=\"token punctuation\">.</span>cache_sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    count_relocation_if<span class=\"token operator\">&lt;</span>DoLogging<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>kRelocSymbolCached<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> version_info<span class=\"token operator\">*</span> vi <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>relocator<span class=\"token punctuation\">.</span>si<span class=\"token operator\">-></span><span class=\"token function\">lookup_version_info</span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">.</span>version_tracker<span class=\"token punctuation\">,</span> r_sym<span class=\"token punctuation\">,</span> sym_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> local_found_in <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 最终调用 soinfo_do_lookup 来查找符号</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> local_sym <span class=\"token operator\">=</span> <span class=\"token function\">soinfo_do_lookup</span><span class=\"token punctuation\">(</span>sym_name<span class=\"token punctuation\">,</span> vi<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>local_found_in<span class=\"token punctuation\">,</span> relocator<span class=\"token punctuation\">.</span>lookup_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    relocator<span class=\"token punctuation\">.</span>cache_sym_val <span class=\"token operator\">=</span> r_sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    relocator<span class=\"token punctuation\">.</span>cache_si <span class=\"token operator\">=</span> local_found_in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    relocator<span class=\"token punctuation\">.</span>cache_sym <span class=\"token operator\">=</span> local_sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>found_in <span class=\"token operator\">=</span> local_found_in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">*</span>sym <span class=\"token operator\">=</span> local_sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sym <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ELF_ST_BIND</span><span class=\"token punctuation\">(</span>relocator<span class=\"token punctuation\">.</span>si_symtab<span class=\"token punctuation\">[</span>r_sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>st_info<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> STB_WEAK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token function\">DL_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot locate symbol \\\"%s\\\" referenced by \\\"%s\\\"...\"</span><span class=\"token punctuation\">,</span> sym_name<span class=\"token punctuation\">,</span> relocator<span class=\"token punctuation\">.</span>si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  count_relocation_if<span class=\"token operator\">&lt;</span>DoLogging<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>kRelocSymbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>soinfo_do_lookup</code>  中最终调用模板函数 <code>soinfo_do_lookup_impl</code>  进行符号查找</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker_soinfo.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token function\">soinfo_do_lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> version_info<span class=\"token operator\">*</span> vi<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  soinfo<span class=\"token operator\">*</span><span class=\"token operator\">*</span> si_found_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> SymbolLookupList<span class=\"token operator\">&amp;</span> lookup_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> lookup_list<span class=\"token punctuation\">.</span><span class=\"token function\">needs_slow_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      soinfo_do_lookup_impl<span class=\"token operator\">&lt;</span>true<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> vi<span class=\"token punctuation\">,</span> si_found_in<span class=\"token punctuation\">,</span> lookup_list<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      soinfo_do_lookup_impl<span class=\"token operator\">&lt;</span>false<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> vi<span class=\"token punctuation\">,</span> si_found_in<span class=\"token punctuation\">,</span> lookup_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有 hash 表查 hash 表，没 hash 表用符号查找</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template <span class=\"token operator\">&lt;</span>bool IsGeneral<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>noinline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">soinfo_do_lookup_impl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> version_info<span class=\"token operator\">*</span> vi<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                      soinfo<span class=\"token operator\">*</span><span class=\"token operator\">*</span> si_found_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> SymbolLookupList<span class=\"token operator\">&amp;</span> lookup_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span> hash<span class=\"token punctuation\">,</span> name_len <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">calculate_gnu_hash</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  constexpr <span class=\"token class-name\">uint32_t</span> kBloomMaskBits <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  SymbolName <span class=\"token function\">elf_symbol_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> SymbolLookupLib<span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> lookup_list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> SymbolLookupLib<span class=\"token operator\">*</span> it <span class=\"token operator\">=</span> lookup_list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> SymbolLookupLib<span class=\"token operator\">*</span> lib<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> sym_idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Iterate over libraries until we find one whose Bloom filter matches the symbol we're</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// searching for.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 在每一个库中都去寻找有没有指定的符号</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      lib <span class=\"token operator\">=</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t  <span class=\"token comment\">// 要是没有 hash 表，就通过名称来进行查找</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsGeneral <span class=\"token operator\">&amp;&amp;</span> lib<span class=\"token operator\">-></span><span class=\"token function\">needs_sysv_lookup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> sym <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span><span class=\"token function\">find_symbol_by_name</span><span class=\"token punctuation\">(</span>elf_symbol_name<span class=\"token punctuation\">,</span> vi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token operator\">*</span>si_found_in <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>si_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token keyword\">return</span> sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsGeneral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">TRACE_TYPE</span><span class=\"token punctuation\">(</span>LOOKUP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SEARCH %s in %s@%p (gnu)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                   name<span class=\"token punctuation\">,</span> lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t  <span class=\"token comment\">// 计算符号 hash 桶查询链</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> word_num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">/</span> kBloomMaskBits<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> lib<span class=\"token operator\">-></span>gnu_maskwords_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Addr<span class=\"token punctuation\">)</span> bloom_word <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>gnu_bloom_filter_<span class=\"token punctuation\">[</span>word_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> h1 <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> kBloomMaskBits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> h2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">>></span> lib<span class=\"token operator\">-></span>gnu_shift2_<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> kBloomMaskBits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>bloom_word <span class=\"token operator\">>></span> h1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>bloom_word <span class=\"token operator\">>></span> h2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        sym_idx <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>gnu_bucket_<span class=\"token punctuation\">[</span>hash <span class=\"token operator\">%</span> lib<span class=\"token operator\">-></span>gnu_nbucket_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sym_idx <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsGeneral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">TRACE_TYPE</span><span class=\"token punctuation\">(</span>LOOKUP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT FOUND %s in %s@%p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                   name<span class=\"token punctuation\">,</span> lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// Search the library's hash table chain.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Versym<span class=\"token punctuation\">)</span> verneed <span class=\"token operator\">=</span> kVersymNotNeeded<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    bool calculated_verneed <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> chain_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function\">ElfW</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> sym <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">//// 根据符号 hash 快速查找</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      sym <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>symtab_ <span class=\"token operator\">+</span> sym_idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      chain_value <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>gnu_chain_<span class=\"token punctuation\">[</span>sym_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>chain_value <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vi <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>calculated_verneed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>          calculated_verneed <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          verneed <span class=\"token operator\">=</span> <span class=\"token function\">find_verdef_version_index</span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>si_<span class=\"token punctuation\">,</span> vi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check_symbol_version</span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>versym_<span class=\"token punctuation\">,</span> sym_idx<span class=\"token punctuation\">,</span> verneed<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>sym<span class=\"token operator\">-></span>st_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> name_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> lib<span class=\"token operator\">-></span>strtab_size_ <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>strtab_ <span class=\"token operator\">+</span> sym<span class=\"token operator\">-></span>st_name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> name_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">is_symbol_global_and_defined</span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>si_<span class=\"token punctuation\">,</span> sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token operator\">*</span>si_found_in <span class=\"token operator\">=</span> lib<span class=\"token operator\">-></span>si_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsGeneral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token function\">TRACE_TYPE</span><span class=\"token punctuation\">(</span>LOOKUP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FOUND %s in %s (%p) %zd\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                       name<span class=\"token punctuation\">,</span> lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>sym<span class=\"token operator\">-></span>st_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                       static_cast<span class=\"token operator\">&lt;</span><span class=\"token class-name\">size_t</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>sym<span class=\"token operator\">-></span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>          <span class=\"token keyword\">return</span> sym<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      <span class=\"token operator\">++</span>sym_idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>chain_value <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsGeneral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token function\">TRACE_TYPE</span><span class=\"token punctuation\">(</span>LOOKUP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT FOUND %s in %s@%p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                 name<span class=\"token punctuation\">,</span> lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reinterpret_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>lib<span class=\"token operator\">-></span>si_<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"收尾工作\"><a class=\"anchor\" href=\"#收尾工作\">#</a> 收尾工作</h3>\n<p>对依赖库的链接情况进行标记，并增加依赖库的引用计数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Step 7: Mark all load_tasks as linked and increment refcounts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// for references between load_groups (at this point it does not matter if</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// referenced load_groups were loaded by previous dlopen or as part of this</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// one on step 6)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start_with <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> add_as_children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    start_with<span class=\"token operator\">-></span><span class=\"token function\">set_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> task <span class=\"token operator\">:</span> load_tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    si<span class=\"token operator\">-></span><span class=\"token function\">set_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> task <span class=\"token operator\">:</span> load_tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_soinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    soinfo<span class=\"token operator\">*</span> needed_by <span class=\"token operator\">=</span> task<span class=\"token operator\">-></span><span class=\"token function\">get_needed_by</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needed_by <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        needed_by <span class=\"token operator\">!=</span> start_with <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        needed_by<span class=\"token operator\">-></span><span class=\"token function\">get_local_group_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_local_group_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 增加依赖库 so 的引用计数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      si<span class=\"token operator\">-></span><span class=\"token function\">increment_ref_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此为止，一个 so 就被成功的加载进来了～</p>\n<h1 id=\"so的卸载过程\"><a class=\"anchor\" href=\"#so的卸载过程\">#</a> so 的卸载过程</h1>\n<p>在 android 中并没有直接的接口来让开发者卸载一个 so, 所以对于 so 的卸载过程我们无法使用自上而下的方式去分析，但可以利用逆向的方法，自底向上一步一步探索 so 的卸载过程究竟是什么样子的</p>\n<p>首先整理一下目前为止从 AOSP 源码以及网上找的线索:</p>\n<ol>\n<li>\n<p>android 的 so 中有一个独特的函数 <code>JNI_OnUnload</code> , 当 so 卸载时会进行调用</p>\n</li>\n<li>\n<p>在 AOSP 的 <code>platform\\bionic\\linker\\linker_soinfo.cpp</code>  中有一个函数 <code>call_destructors</code> , 它的完整代码如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker_soinfo.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> soinfo<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_destructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>constructors_called<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ScopedTrace <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calling destructors: \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// DT_FINI_ARRAY must be parsed in reverse order.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">call_array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_FINI_ARRAY\"</span><span class=\"token punctuation\">,</span> fini_array_<span class=\"token punctuation\">,</span> fini_array_count_<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// DT_FINI should be called after DT_FINI_ARRAY if both are present.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">call_function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_FINI\"</span><span class=\"token punctuation\">,</span> fini_func_<span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当调用该函数时，会先调用 <code>final_array</code>  中的函数，最后调用 <code>final</code>  函数 (怎么和 <code>init</code>  与 <code>init_array</code>  反过来了)</p>\n</li>\n</ol>\n<p>那么我们可以提出以下两个问题，来为逆向分析的过程明确一个清晰的目标</p>\n<div class=\"note info\">\n<ul>\n<li>在什么情况下 <code>JNI_OnUnload</code>  与 <code>call_destructors</code>  会被调用？</li>\n<li><code>JNI_OnUnload</code>  和 <code>call_destructors</code>  调用的先后顺序是什么？</li>\n</ul>\n</div>\n<p>带着这两个问题，我们首先对 <code>JNI_OnUnload</code>  进行分析</p>\n<h2 id=\"jni_onunload\"><a class=\"anchor\" href=\"#jni_onunload\">#</a> JNI_OnUnload</h2>\n<h3 id=\"unloadlibraries\"><a class=\"anchor\" href=\"#unloadlibraries\">#</a> UnloadLibraries</h3>\n<p>android 中存在一个特有的函数 <code>JNI_OnUnload</code> , 当虚拟机释放该 so 时，来进行善后清除动作，通过在<a href=\"cs.android.com\"> android 官网源码搜索平台</a>翻了好多页的搜索结果，终于找到了 <code>JNI_OnUnload</code>  的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcy5hbmRyb2lkLmNvbS9hbmRyb2lkL3BsYXRmb3JtL3N1cGVycHJvamVjdC8rL21hc3RlcjphcnQvcnVudGltZS9qbmkvamF2YV92bV9leHQuY2M7bD0zODM/cT1KTklfb251bmxvYWQmYW1wO3NzPWFuZHJvaWQlMkZwbGF0Zm9ybSUyRnN1cGVycHJvamVjdCZhbXA7aGw9emgtY24mYW1wO3N0YXJ0PTQx\">调用函数</span>，他在 <code>art/runtime/jni/java_vm_ext.cc</code>  中的 <code>UnloadLibraries</code>  中被调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">UnloadLibraries</span><span class=\"token punctuation\">(</span>JavaVM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>SharedLibrary<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> libraries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">using</span> JNI_OnUnloadFn <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>JavaVM<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>SharedLibrary<span class=\"token operator\">*</span> library <span class=\"token operator\">:</span> libraries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> library<span class=\"token operator\">-></span><span class=\"token function\">FindSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JNI_OnUnload\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> android<span class=\"token double-colon punctuation\">::</span>kJNICallTypeRegular<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sym <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[No JNI_OnUnload found in \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> library<span class=\"token operator\">-></span><span class=\"token function\">GetPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[JNI_OnUnload found for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> library<span class=\"token operator\">-></span><span class=\"token function\">GetPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"]: Calling...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            JNI_OnUnloadFn jni_on_unload <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>JNI_OnUnloadFn<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">jni_on_unload</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"unloadnativelibraries\"><a class=\"anchor\" href=\"#unloadnativelibraries\">#</a> UnloadNativeLibraries</h3>\n<p>再去看一下 <code>UnloadLibraries</code>  的引用，它在 <code>UnloadNativeLibraries</code>  被调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Unload native libraries with cleared class loaders.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">UnloadNativeLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">REQUIRES</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Locks<span class=\"token double-colon punctuation\">::</span>jni_libraries_lock_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">REQUIRES_SHARED</span><span class=\"token punctuation\">(</span>Locks<span class=\"token double-colon punctuation\">::</span>mutator_lock_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Thread<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>SharedLibrary<span class=\"token operator\">*</span><span class=\"token operator\">></span> unload_libraries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        MutexLock <span class=\"token function\">mu</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Locks<span class=\"token double-colon punctuation\">::</span>jni_libraries_lock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> libraries_<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> libraries_<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            SharedLibrary<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> library <span class=\"token operator\">=</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// If class loader is null then it was unloaded, call JNI_OnUnload.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> jweak class_loader <span class=\"token operator\">=</span> library<span class=\"token operator\">-></span><span class=\"token function\">GetClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// If class_loader is a null jobject then it is the boot class loader. We should not unload</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// the native libraries of the boot class loader.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>class_loader <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> self<span class=\"token operator\">-></span><span class=\"token function\">IsJWeakCleared</span><span class=\"token punctuation\">(</span>class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                unload_libraries<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>library<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                it <span class=\"token operator\">=</span> libraries_<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ScopedThreadSuspension <span class=\"token function\">sts</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> kNative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// Do this without holding the jni libraries lock to prevent possible deadlocks.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 调用 so 中的 JNI_OnUnload</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">UnloadLibraries</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span><span class=\"token function\">GetJniEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetVm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unload_libraries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> library <span class=\"token operator\">:</span> unload_libraries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">delete</span> library<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"javavmextunloadnativelibraries\"><a class=\"anchor\" href=\"#javavmextunloadnativelibraries\">#</a> JavaVMExt::UnloadNativeLibraries</h3>\n<p>这里调用了 <code>libraries_</code> 中的 <code>UnloadNativeLibraries</code>  函数，看起来卸载的过程和 Java 虚拟机有些许的关系</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">JavaVMExt</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UnloadNativeLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  libraries_<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">UnloadNativeLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"heapcollectgarbageinternal\"><a class=\"anchor\" href=\"#heapcollectgarbageinternal\">#</a> Heap::CollectGarbageInternal</h3>\n<p><code>JavaVMExt::UnloadNativeLibraries</code>  在 <code>Heap::CollectGarbageInternal</code>  的末尾被调用</p>\n<p><img data-src=\"/android-load-so/image-20240709133045436.png\" alt=\"image-20240709133045436\" style=\"aspect-ratio:910 / 168;\"></p>\n<p>这函数看起来和虚拟机堆执行垃圾回收有关，垃圾回收执行完毕后会去调用 <code>JNI_OnUnload</code></p>\n<p>然而再往上寻找却找不到什么有用的函数了，我们只知道在 JVM 垃圾回收之后会去调用 <code>JNI_OnUnload</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\art\\runtime\\gc\\heap.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>collector<span class=\"token double-colon punctuation\">::</span>GcType <span class=\"token class-name\">Heap</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CollectGarbageInternal</span><span class=\"token punctuation\">(</span>collector<span class=\"token double-colon punctuation\">::</span>GcType gc_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                               GcCause gc_cause<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                               <span class=\"token keyword\">bool</span> clear_soft_references<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                               <span class=\"token keyword\">uint32_t</span> requested_gc_num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Thread<span class=\"token operator\">*</span> self <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Runtime<span class=\"token operator\">*</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// If the heap can't run the GC, silently fail and return that no GC was run.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>gc_type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">case</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypePartial<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">HasZygoteSpace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// Do not increment gcs_completed_ . We should retry with kGcTypeFull.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeNone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// Other GC types don't have any special cases which makes them not runnable. The main case</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// here is full GC.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ScopedThreadStateChange <span class=\"token function\">tsc</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> kWaitingPerformingGc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Locks<span class=\"token double-colon punctuation\">::</span>mutator_lock_<span class=\"token operator\">-></span><span class=\"token function\">AssertNotHeld</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span><span class=\"token function\">IsHandlingStackOverflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// If we are throwing a stack overflow error we probably don't have enough remaining stack</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// space to run the GC.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// Count this as a GC in case someone is waiting for it to complete.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    gcs_completed_<span class=\"token punctuation\">.</span><span class=\"token function\">fetch_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>memory_order_release<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeNone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">bool</span> compacting_gc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    gc_complete_lock_<span class=\"token operator\">-></span><span class=\"token function\">AssertNotHeld</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ScopedThreadStateChange <span class=\"token function\">tsc2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> kWaitingForGcToComplete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    MutexLock <span class=\"token function\">mu</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>gc_complete_lock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// Ensure there is only one GC at a time.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">WaitForGcToCompleteLocked</span><span class=\"token punctuation\">(</span>gc_cause<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requested_gc_num <span class=\"token operator\">!=</span> GC_NUM_ANY <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">GCNumberLt</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentGcNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requested_gc_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// The appropriate GC was already triggered elsewhere.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">return</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeNone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    compacting_gc <span class=\"token operator\">=</span> <span class=\"token function\">IsMovingGc</span><span class=\"token punctuation\">(</span>collector_type_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// GC can be disabled if someone has a used GetPrimitiveArrayCritical.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compacting_gc <span class=\"token operator\">&amp;&amp;</span> disable_moving_gc_count_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Skipping GC due to disable moving GC count \"</span> <span class=\"token operator\">&lt;&lt;</span> disable_moving_gc_count_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">// Again count this as a GC.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      gcs_completed_<span class=\"token punctuation\">.</span><span class=\"token function\">fetch_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>memory_order_release<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">return</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeNone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gc_disabled_for_shutdown_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      gcs_completed_<span class=\"token punctuation\">.</span><span class=\"token function\">fetch_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>memory_order_release<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">return</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeNone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    collector_type_running_ <span class=\"token operator\">=</span> collector_type_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    last_gc_cause_ <span class=\"token operator\">=</span> gc_cause<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gc_cause <span class=\"token operator\">==</span> kGcCauseForAlloc <span class=\"token operator\">&amp;&amp;</span> runtime<span class=\"token operator\">-></span><span class=\"token function\">HasStatsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token operator\">++</span>runtime<span class=\"token operator\">-></span><span class=\"token function\">GetStats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gc_for_alloc_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token operator\">++</span>self<span class=\"token operator\">-></span><span class=\"token function\">GetStats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gc_for_alloc_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token keyword\">const</span> size_t bytes_allocated_before_gc <span class=\"token operator\">=</span> <span class=\"token function\">GetBytesAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token function\">DCHECK_LT</span><span class=\"token punctuation\">(</span>gc_type<span class=\"token punctuation\">,</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token function\">DCHECK_NE</span><span class=\"token punctuation\">(</span>gc_type<span class=\"token punctuation\">,</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeNone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  collector<span class=\"token double-colon punctuation\">::</span>GarbageCollector<span class=\"token operator\">*</span> collector <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">// TODO: Clean this up.</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>compacting_gc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">DCHECK</span><span class=\"token punctuation\">(</span>current_allocator_ <span class=\"token operator\">==</span> kAllocatorTypeBumpPointer <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>           current_allocator_ <span class=\"token operator\">==</span> kAllocatorTypeTLAB <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>           current_allocator_ <span class=\"token operator\">==</span> kAllocatorTypeRegion <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>           current_allocator_ <span class=\"token operator\">==</span> kAllocatorTypeRegionTLAB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>collector_type_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token keyword\">case</span> kCollectorTypeSS<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        semi_space_collector_<span class=\"token operator\">-></span><span class=\"token function\">SetFromSpace</span><span class=\"token punctuation\">(</span>bump_pointer_space_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        semi_space_collector_<span class=\"token operator\">-></span><span class=\"token function\">SetToSpace</span><span class=\"token punctuation\">(</span>temp_space_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        semi_space_collector_<span class=\"token operator\">-></span><span class=\"token function\">SetSwapSemiSpaces</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        collector <span class=\"token operator\">=</span> semi_space_collector_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token keyword\">case</span> kCollectorTypeCC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        collector<span class=\"token double-colon punctuation\">::</span>ConcurrentCopying<span class=\"token operator\">*</span> active_cc_collector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>use_generational_cc_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>          <span class=\"token comment\">// TODO: Other threads must do the flip checkpoint before they start poking at</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>          <span class=\"token comment\">// active_concurrent_copying_collector_. So we should not concurrency here.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>          active_cc_collector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>gc_type <span class=\"token operator\">==</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeSticky<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                  young_concurrent_copying_collector_ <span class=\"token operator\">:</span> concurrent_copying_collector_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          active_concurrent_copying_collector_<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span>active_cc_collector<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                                                     std<span class=\"token double-colon punctuation\">::</span>memory_order_relaxed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>          <span class=\"token function\">DCHECK</span><span class=\"token punctuation\">(</span>active_cc_collector<span class=\"token operator\">-></span><span class=\"token function\">RegionSpace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> region_space_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          collector <span class=\"token operator\">=</span> active_cc_collector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          collector <span class=\"token operator\">=</span> active_concurrent_copying_collector_<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>memory_order_relaxed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid collector type \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>collector_type_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>collector <span class=\"token operator\">!=</span> active_concurrent_copying_collector_<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>memory_order_relaxed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      temp_space_<span class=\"token operator\">-></span><span class=\"token function\">GetMemMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Protect</span><span class=\"token punctuation\">(</span>PROT_READ <span class=\"token operator\">|</span> PROT_WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kIsDebugBuild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// Try to read each page of the memory map in case mprotect didn't work properly b/19894268.</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        temp_space_<span class=\"token operator\">-></span><span class=\"token function\">GetMemMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">TryReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>temp_space_<span class=\"token operator\">-></span><span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    gc_type <span class=\"token operator\">=</span> collector<span class=\"token double-colon punctuation\">::</span>kGcTypeFull<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// TODO: Not hard code this in.</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current_allocator_ <span class=\"token operator\">==</span> kAllocatorTypeRosAlloc <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      current_allocator_ <span class=\"token operator\">==</span> kAllocatorTypeDlMalloc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    collector <span class=\"token operator\">=</span> <span class=\"token function\">FindCollectorByGcType</span><span class=\"token punctuation\">(</span>gc_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid current allocator \"</span> <span class=\"token operator\">&lt;&lt;</span> current_allocator_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>collector <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Could not find garbage collector with collector_type=\"</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>collector_type_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and gc_type=\"</span> <span class=\"token operator\">&lt;&lt;</span> gc_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  collector<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>gc_cause<span class=\"token punctuation\">,</span> clear_soft_references <span class=\"token operator\">||</span> runtime<span class=\"token operator\">-></span><span class=\"token function\">IsZygote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token function\">IncrementFreedEver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token function\">RequestTrim</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token comment\">// Collect cleared references.</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  SelfDeletingTask<span class=\"token operator\">*</span> clear <span class=\"token operator\">=</span> reference_processor_<span class=\"token operator\">-></span><span class=\"token function\">CollectClearedReferences</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\">// Grow the heap so that we know when to perform the next GC.</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token function\">GrowForUtilization</span><span class=\"token punctuation\">(</span>collector<span class=\"token punctuation\">,</span> bytes_allocated_before_gc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  old_native_bytes_allocated_<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetNativeBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token function\">LogGC</span><span class=\"token punctuation\">(</span>gc_cause<span class=\"token punctuation\">,</span> collector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token function\">FinishGC</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> gc_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// Actually enqueue all cleared references. Do this after the GC has officially finished since</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// otherwise we can deadlock.</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  clear<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  clear<span class=\"token operator\">-></span><span class=\"token function\">Finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">// Inform DDMS that a GC completed.</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token class-name\">Dbg</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GcDidFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token comment\">// Unload native libraries for class unloading. We do this after calling FinishGC to prevent</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token comment\">// deadlocks in case the JNI_OnUnload function does allocations.</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    ScopedObjectAccess <span class=\"token function\">soa</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">// 调用 JNI_OnUnload</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    soa<span class=\"token punctuation\">.</span><span class=\"token function\">Vm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">UnloadNativeLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token keyword\">return</span> gc_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"call_destructors\"><a class=\"anchor\" href=\"#call_destructors\">#</a> call_destructors</h2>\n<p><code>call_destructors</code>  函数如下，我们向上找找看交叉引用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker_soinfo.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> soinfo<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">call_destructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>constructors_called<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ScopedTrace <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calling destructors: \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// DT_FINI_ARRAY must be parsed in reverse order.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">call_array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_FINI_ARRAY\"</span><span class=\"token punctuation\">,</span> fini_array_<span class=\"token punctuation\">,</span> fini_array_count_<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// DT_FINI should be called after DT_FINI_ARRAY if both are present.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">call_function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DT_FINI\"</span><span class=\"token punctuation\">,</span> fini_func_<span class=\"token punctuation\">,</span> <span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"soinfo_unload_impl\"><a class=\"anchor\" href=\"#soinfo_unload_impl\">#</a> soinfo_unload_impl</h3>\n<p>这里我们发现 log 代码中都出现了 <code>dlclose</code>  字样，那么显而易见这应该和 <code>dlclose</code>  脱不了干系，在往上看看</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">soinfo_unload_impl</span><span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ScopedTrace <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unload \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> root<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">bool</span> is_linked <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token operator\">-></span><span class=\"token function\">can_unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token string\">\"... dlclose(root=\\\"%s\\\"@%p) ... not unloading - the load group is flagged with NODELETE\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           root<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  soinfo_list_t unload_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  soinfo_list_t local_unload_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  soinfo_list_t external_unload_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 将要卸载的 so 的 soinfo 添加到 local_unload_list 中</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>si <span class=\"token operator\">=</span> unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    local_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span><span class=\"token function\">has_min_version</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      soinfo<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">=</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s@%p needs to unload %s@%p\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            child<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        child<span class=\"token operator\">-></span><span class=\"token function\">get_parents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> child<span class=\"token operator\">-></span><span class=\"token function\">get_local_group_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          external_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-></span><span class=\"token function\">get_parents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token function\">async_safe_fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soinfo for \\\"%s\\\"@%p has no version\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  local_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span> si<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>           <span class=\"token string\">\"... dlclose: calling destructors for \\\"%s\\\"@%p ... \"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>           si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>           si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 调用 call_destructors 执行 final_array 和 final 函数</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    si<span class=\"token operator\">-></span><span class=\"token function\">call_destructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>           <span class=\"token string\">\"... dlclose: calling destructors for \\\"%s\\\"@%p ... done\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>           si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>           si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">// 进行 soinfo 最后的收尾工作</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>si <span class=\"token operator\">=</span> local_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>           <span class=\"token string\">\"... dlclose: unloading \\\"%s\\\"@%p ...\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>           si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>           si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token operator\">++</span>g_module_unload_counter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">notify_gdb_of_unload</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">unregister_soinfo_tls</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__libc_shared_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>unload_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token function\">__libc_shared_globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">unload_hook</span><span class=\"token punctuation\">(</span>si<span class=\"token operator\">-></span>load_bias<span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>phdr<span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>phnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">get_cfi_shadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">BeforeUnload</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">soinfo_free</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_linked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>si <span class=\"token operator\">=</span> external_unload_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>             <span class=\"token string\">\"... dlclose: unloading external reference \\\"%s\\\"@%p ...\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>             si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>             si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token function\">soinfo_unload</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>             <span class=\"token string\">\"... dlclose: unload_si was not linked - not unloading external references ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"soinfo_unload\"><a class=\"anchor\" href=\"#soinfo_unload\">#</a> soinfo_unload</h3>\n<p><code>soinfo_unload_impl</code>  被 <code>soinfo_unload</code>  调用，主要让引用计数减一，然后调用核心的卸载逻辑</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">soinfo_unload</span><span class=\"token punctuation\">(</span>soinfo<span class=\"token operator\">*</span> unload_si<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// Note that the library can be loaded but not linked;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// in which case there is no root but we still need</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// to walk the tree and unload soinfos involved.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// This happens on unsuccessful dlopen, when one of</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// the DT_NEEDED libraries could not be linked/found.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 这个 so 不管有没有被链接，只要加载了，那必须得 unload 卸载</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">bool</span> is_linked <span class=\"token operator\">=</span> unload_si<span class=\"token operator\">-></span><span class=\"token function\">is_linked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> is_linked <span class=\"token operator\">?</span> unload_si<span class=\"token operator\">-></span><span class=\"token function\">get_local_group_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> unload_si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token string\">\"... dlclose(realpath=\\\"%s\\\"@%p) ... load group root is \\\"%s\\\"@%p\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         unload_si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         unload_si<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         root<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 如果被其他库链接了 (其实就是被引用了), 那卸载的时候引用计数就 - 1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  size_t ref_count <span class=\"token operator\">=</span> is_linked <span class=\"token operator\">?</span> root<span class=\"token operator\">-></span><span class=\"token function\">decrement_ref_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           <span class=\"token string\">\"... dlclose(root=\\\"%s\\\"@%p) ... not unloading - decrementing ref_count to %zd\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           root<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>           ref_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 执行核心 unload 操作</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">soinfo_unload_impl</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"do_dlclose\"><a class=\"anchor\" href=\"#do_dlclose\">#</a> do_dlclose</h3>\n<p>果不其然，是调用 <code>do_dlclose</code>  来进行卸载的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">do_dlclose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ScopedTrace <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dlclose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ProtectedDataGuard guard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> <span class=\"token function\">soinfo_from_handle</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>si <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">DL_OPEN_ERR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid handle: %p\"</span><span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token string\">\"dlclose(handle=%p, realpath=\\\"%s\\\"@%p) ...\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         handle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         si<span class=\"token operator\">-></span><span class=\"token function\">get_realpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 卸载 soinfo</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">soinfo_unload</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">LD_LOG</span><span class=\"token punctuation\">(</span>kLogDlopen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token string\">\"dlclose(handle=%p) ... done\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"__loader_dlclose\"><a class=\"anchor\" href=\"#__loader_dlclose\">#</a> __loader_dlclose</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//platform\\bionic\\linker\\dlfcn.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">__loader_dlclose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ScopedPthreadMutexLocker <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_dl_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">do_dlclose</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">__bionic_format_dlerror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dlclose failed\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">linker_get_error_buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"dlclose\"><a class=\"anchor\" href=\"#dlclose\">#</a> dlclose</h3>\n<p>最终来到了 <code>dlclose</code>  这个函数，但是因为 <code>dlclose</code>  的调用实在是太多了，我们很难去找到究竟是哪一个函数调用的 <code>dlclose</code>  来对这个 so 执行最终的卸载操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//E:\\android-platform\\bionic\\libdl\\libdl.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__weak__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">dlclose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">__loader_dlclose</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"注释中的矛盾点\"><a class=\"anchor\" href=\"#注释中的矛盾点\">#</a> 注释中的矛盾点</h3>\n<p>我们向前看看 android 开发者留给我们的注释</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\art\\runtime\\jni\\java_vm_ext.cc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">JavaVMExt</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LoadNativeLibrary</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                  jobject class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                  jclass caller_class<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                  std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">*</span> error_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 阶段二：加载 so</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// Open the shared library.  Because we're using a full path, the system</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// doesn't have to search through LD_LIBRARY_PATH.  (It may do so to</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// resolve this library's dependencies though.)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// Failures here are expected when java.library.path has several entries</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// and we have to hunt for the lib.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// dlopen) becomes zero from dlclose.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// Retrieve the library path from the classloader, if necessary.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ScopedLocalRef<span class=\"token operator\">&lt;</span>jstring<span class=\"token operator\">></span> <span class=\"token function\">library_path</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token function\">GetLibrarySearchPath</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> class_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  Locks<span class=\"token double-colon punctuation\">::</span>mutator_lock_<span class=\"token operator\">-></span><span class=\"token function\">AssertNotHeld</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path_str <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">bool</span> needs_native_bridge <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> nativeloader_error_msg <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 调用 dlopen 打开目标 so</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> android<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OpenNativeLibrary</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      env<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      runtime_<span class=\"token operator\">-></span><span class=\"token function\">GetTargetSdkVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      path_str<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      class_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">(</span>caller_location<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">:</span> caller_location<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      library_path<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token operator\">&amp;</span>needs_native_bridge<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token operator\">&amp;</span>nativeloader_error_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span>jni<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[Call to dlopen(\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\", RTLD_NOW) returned \"</span> <span class=\"token operator\">&lt;&lt;</span> handle <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Below we dlopen but there is no paired dlclose, this would be necessary if we supported class unloading. Libraries will only be unloaded when the reference count (incremented by dlopen) becomes zero from dlclose.</p>\n</blockquote>\n<p>当调用 <code>dlopen</code>  加载 so 时，会增加一次对 so 的引用计数，而当引用计数变成 0 之后，便会自动调用 <code>dlclose</code>  卸载 so</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//android-platform\\bionic\\linker\\linker.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> soinfo<span class=\"token operator\">*</span> <span class=\"token function\">find_library</span><span class=\"token punctuation\">(</span>android_namespace_t<span class=\"token operator\">*</span> ns<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rtld_flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                            <span class=\"token keyword\">const</span> android_dlextinfo<span class=\"token operator\">*</span> extinfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                            soinfo<span class=\"token operator\">*</span> needed_by<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  soinfo<span class=\"token operator\">*</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 加载 so 成功，so 的引用次数 + 1, 对应了 JavaVMExt::LoadNativeLibrary 中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//so 加载时 这一部分的注释↓</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Below we dlopen but there is no paired dlclose, this would be necessary if we supported</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  class unloading. Libraries will only be unloaded when the reference count (incremented by</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  dlopen) becomes zero from dlclose.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  si<span class=\"token operator\">-></span><span class=\"token function\">increment_ref_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以现在我们的目标从谁调用了 <code>dlclose</code>  变成了谁调用了 <code>soinfo::decrement_ref_count</code> , 但是在 <code>soinfo_unload</code>  中，不是已经调用过 <code>decrement_ref_count</code>  了吗，这段注释和实际的情况怎么看起来相互矛盾？我们期望的函数调用是 <code>anonymous_func-&gt;decrement_ref_count-&gt;dlclose</code> , 但是实际的调用流是 <code>dlclose-&gt;decrement_ref_count</code> , 这完全是相反的调用过程呀</p>\n<h2 id=\"编写demo观察卸载函数调用先后情况\"><a class=\"anchor\" href=\"#编写demo观察卸载函数调用先后情况\">#</a> 编写 demo 观察卸载函数调用先后情况</h2>\n<p>现在我们光从源码已经很难再逆向分析出最终是在哪一个函数中依次调用了 <code>JNI_OnUnload</code>  和 <code>call_destructors</code> , 所以我们需要实际动手写一个测试 demo, 通过打印日志的方式，通过 <code>logcat</code>  来观察实际的调用情况</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;jni.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dlfcn.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;android/log.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TAG</span> <span class=\"token string\">\"oacia_tag\"</span> <span class=\"token comment\">// 这个是自定义的 LOG 的标识</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">LOGD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">__android_log_print</span><span class=\"token punctuation\">(</span>ANDROID_LOG_DEBUG<span class=\"token punctuation\">,</span>TAG <span class=\"token punctuation\">,</span>__VA_ARGS__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>jint <span class=\"token function\">JNI_OnLoad</span><span class=\"token punctuation\">(</span>JavaVM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> reserved __unused<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JNI_OnLoad called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> JNI_VERSION_1_6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">__attribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before_main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"constructor called!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">__attribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>destructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after_main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"destructor called!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">JNI_OnUnload</span><span class=\"token punctuation\">(</span>JavaVM<span class=\"token operator\">*</span> vm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> reserved __unused<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">LOGD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JNI_OnUnload called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而当退出 app 时，不论 <code>JNI_OnUnload</code>  还是 <code>destructor</code>  均没有被调用，走到这里看起来已经进入死胡同了，可能这两个函数从未被调用… 那暂时先到此为止吧～要是未来有新的发现的话再继续卸载过程的分析</p>\n<p><img data-src=\"/android-load-so/image-20240711144153063.png\" alt=\"image-20240711144153063\" style=\"aspect-ratio:1122 / 63;\"></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Ryb3BzLnhtZDUuY29tL3N0YXRpYy9kcm9wcy90aXBzLTEyMTIyLmh0bWw=\">Android Linker 学习笔记</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndHRpYW5rYWkuZ2l0aHViLmlvLzIwMTgvMDEvMDMvYW5kcm9pZCVFNyVCMyVCQiVFNyVCQiU5RiVFNSU4QSVBMCVFOCVCRCVCRHNvJUU3JTlBJTg0JUU2JUJBJTkwJUU3JUEwJTgxJUU1JTg4JTg2JUU2JTlFJTkwLw==\">Android 系统加载 so 的源码分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zYW5mZW5nYW5kcm9pZC5naXRodWIuaW8vMjAyMS8wMS8xMC9tb2RpZnktbGlua2VyLXRvLWltcGxlbWVudC1wbHQtaG9vay8=\">Android 动态修改 Linker 实现 LD_PRELOAD 全局库 PLT Hook</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/wechat-mini-program-with-devtool/",
            "url": "https://oacia.dev/wechat-mini-program-with-devtool/",
            "title": "微信小程序devtool抓包+反编译wxapkg",
            "date_published": "2024-01-30T07:55:11.000Z",
            "content_html": "<p>今天闲来无事，上网冲浪，突然发现一个令我眼前一亮的项目<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmVsZXlRQVEvV2VDaGF0T3BlbkRldlRvb2xzLVB5dGhvbg==\"> WeChatOpenDevTools-Python</span>, 这这这，看 README 的介绍，我岂不是可以在小程序里面开 devtool 了吗！？</p>\n<p>想来 2022 年也有个小程序羊了个羊爆火那会儿，我也对小程序逆向分析玩了玩，然后做了个破解版的自娱自乐了一下 (当然也是算朋友圈排名滴), 当时拿 <code>UnpackMiniApp.exe</code>  解密了 <code>wxapkg</code>  格式的小程序，然后用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N5c3RlbS1jcHUvd3hhcHBVbnBhY2tlcg==\"> wxappUnpacker</span> 弄出了小程序的 js 源码来，审计一下找到修改的地方 patch 逻辑到最开始的 <code>wxapkg</code>  包就破解好了</p>\n<p>虽然但是，那时我就在想微信小程序既然用的是浏览器的内核，那么必定是有方法可以开启开发者工具的，不过由于当时在网上还没发现这样的技术所以也就只是一个想法了，现在正巧碰到了大佬开源了能够开启微信小程序的项目，于是我便想看看小程序 + devtool 逆向的感觉究竟是如何的呢～</p>\n<p>碰巧身边的人在玩咸鱼之王 (虽然我没玩过), 但是它毕竟是一个小程序，那就拿它来浅浅尝试一下 devtool 逆向的感觉是怎么样的咯 <code>^.^</code></p>\n<div class=\"note warning\">\n<p>让微信小程序开启 devtool 有被封号的风险，请务必使用<strong>小号</strong>登录电脑版微信！！！</p>\n</div>\n<h1 id=\"微信开启devtool\"><a class=\"anchor\" href=\"#微信开启devtool\">#</a> 微信开启 devtool</h1>\n<ol>\n<li>从 github 上下载项目</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/JaveleyQAQ/WeChatOpenDevTools-Python.git</pre></td></tr></table></figure><ol start=\"2\">\n<li>下载项目依赖</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt</pre></td></tr></table></figure><ol start=\"3\">\n<li>需要先打开电脑版微信并登录</li>\n<li>运行 <code>main.py</code></li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python main.py</pre></td></tr></table></figure><p>随便开一个小程序，出现下列信息则代表 devtool 开启成功</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201160604783.png\" alt=\"image-20240201160604783\" style=\"aspect-ratio:625 / 272;\"></p>\n<p>点一下小程序右上角的三个点</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201161923899.png\" alt=\"image-20240201161923899\" style=\"aspect-ratio:378 / 339;\"></p>\n<p>就可以开启 devtool 啦</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201161816680.png\" alt=\"image-20240201161816680\" style=\"aspect-ratio:1182 / 789;\"></p>\n<h1 id=\"反编译wxapkg\"><a class=\"anchor\" href=\"#反编译wxapkg\">#</a> 反编译 wxapkg</h1>\n<p>devtool 可以帮助我们更加方便的抓到小程序的包，但是我们还需要通过反编译 wxapkg 拿到小程序的源代码，因为在 devtool 的 source 里面，小程序的源码都被整合到了一个 js 里面很难看出代码的层次结构</p>\n<h2 id=\"提取-wxapkg\"><a class=\"anchor\" href=\"#提取-wxapkg\">#</a> 提取 wxapkg</h2>\n<p>Windows 默认小程序的存放路径为</p>\n<p><code>C:\\Users\\&#123;系统用户名&#125;\\Documents\\WeChat Files\\Applet\\&#123;小程序的AppID&#125;\\</code></p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201164655557.png\" alt=\"image-20240201164655557\" style=\"aspect-ratio:653 / 129;\"></p>\n<h2 id=\"解密-wxapkg\"><a class=\"anchor\" href=\"#解密-wxapkg\">#</a> 解密 wxapkg</h2>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVyZGFzaHUvcGNfd3hhcGtnX2RlY3J5cHRfcHl0aG9u\"> pc_wxapkg_decrypt_python</span> 来解密 wxapkg</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python .<span class=\"token punctuation\">\\</span>main.py <span class=\"token parameter variable\">--wxid</span> wx0840558555a454ed <span class=\"token parameter variable\">--file</span> .<span class=\"token punctuation\">\\</span>__APP__.wxapkg <span class=\"token parameter variable\">--output</span> dec.wxapkg</pre></td></tr></table></figure><p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201165508082.png\" alt=\"image-20240201165508082\" style=\"aspect-ratio:1633 / 106;\"></p>\n<h2 id=\"解包-wxapkg\"><a class=\"anchor\" href=\"#解包-wxapkg\">#</a> 解包 wxapkg</h2>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N5c3RlbS1jcHUvd3hhcHBVbnBhY2tlcg==\"> wxappUnpacker</span> 来解包 wxapkg</p>\n<p>由于咸鱼之王小程序的包是有子包的，所以需要使用 - s 参数</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.<span class=\"token punctuation\">\\</span>bingo.bat .<span class=\"token punctuation\">\\</span>dec.wxapkg <span class=\"token parameter variable\">-s</span><span class=\"token operator\">=</span>_subpackages_game_.wxapkg</pre></td></tr></table></figure><p>解包成功～</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201170202775.png\" alt=\"image-20240201170202775\" style=\"aspect-ratio:1275 / 857;\"></p>\n<p>简单看了一下文件结构，这游戏看起来是用 coco2djs 写的，而且这 js 也没有加密全是源码，hmmm 再逆下去不就变成代码审计了吗… 那就到此为止咯：)</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201190634245.png\" alt=\"image-20240201190634245\" style=\"aspect-ratio:270 / 543;\"></p>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<p>就这样结束似乎有点太潦草了，所以这里是我别的一些想法</p>\n<p>既然咸鱼之王用的是 coco2djs, 而在官网的描述中，coco2d 是跨平台的，那我要是开发人员，肯定在安卓上用的也是 coco2d</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201191145377.png\" alt=\"image-20240201191145377\" style=\"aspect-ratio:417 / 458;\"></p>\n<p>果不其然，下了一个 apk 版的咸鱼之王解包之后，真的在里面发现了 <code>libcocos2djs.so</code></p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201191250448.png\" alt=\"image-20240201191250448\" style=\"aspect-ratio:521 / 216;\"></p>\n<p>有趣的是在 <code>assets</code>  目录下有 <code>libjiagu.so</code> , 这明显是套了一个 360 加固想要为难逆向的人呀</p>\n<p>但 360 加固的是 dex, 但是 coco2d 的源码不全是 js 写的嘛？唯一的作用应该就是防止重打包了吧</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201191325364.png\" alt=\"image-20240201191325364\" style=\"aspect-ratio:791 / 416;\"></p>\n<p>而且这个源代码甚至连 <code>coco2dx-js</code>  内置的把源码加密成 <code>jsc</code>  的功能都没有，这下连密钥都不用找了…</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/image-20240201194515519.png\" alt=\"image-20240201194515519\" style=\"aspect-ratio:813 / 184;\"></p>\n<p>那顺便记录一下加密成 jsc 类似下图的样子该如何应对吧</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/o3kwTv9h8S6nqCp.png\" alt=\"Jsc结构\" style=\"aspect-ratio:434 / 310;\"></p>\n<p>很简单， <code>010editor</code>  打开 <code>libcocos2djs.so</code>  全局搜索 <code>jsb-adapater</code> , 它前面那一串字符串就是 jsc 的密钥</p>\n<p><img data-src=\"/wechat-mini-program-with-devtool/EYTa4KC37WZMgdG.png\" alt=\"Hex下 key\" style=\"aspect-ratio:989 / 670;\"></p>\n<p>拿到了密钥，用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1Y2t5YWliaW4vY29jb3NjcmVhdG9yanNjZGVjcnlwdA==\"> cocoscreatorjscdecrypt</span> 就可以解密出源码来了</p>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/telegram-bot-develop/",
            "url": "https://oacia.dev/telegram-bot-develop/",
            "title": "telegram bot 初体验及云端部署",
            "date_published": "2023-12-31T13:08:18.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>为什么突然想要去做一个 <code>telegram bot</code>  了呢？</p>\n<p>这就要说到困扰我很久的一个小问题了，我在刷抖音的过程中，看到有意思的视频或者好看的图片，就很想要把它们给保存下来，作为壁纸或者和别人分享，但是有的时候 <code>保存本地</code> 这个选项是灰色的不让我去保存</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231221356758.png\" alt=\"image-20231231221356758\" style=\"aspect-ratio:1080 / 381;\"></p>\n<p>而且抖音在图片保存的过程中总是会打上水印，就像下面这个样子，倘若用作壁纸或者日常打开来看的时候就感觉十分的… 别扭</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231221840810.png\" alt=\"image-20231231221840810\" style=\"aspect-ratio:530 / 702;\"></p>\n<p>这个时候，我就会把抖音的视频或图文分享链接复制下来，打开微信小程序，找到一个可以抖音无水印下载的小程序，忍受几十秒广告的煎熬之后，终于可以成功的把图片保存到本地，听起来相当的不便吧，然而我已经进行上面的操作不知多少次了，所以亟需一个更加方便的方式来帮助我减少无意义时间的消耗</p>\n<p>而在<a href=\"https://oacia.dev/douyin-favorites-pic/\">抖音收藏夹图文批量获取</a>这篇 blog 中，我已经利用 python 代码下载到了抖音上的无水印的视频和图片，那么现在要做的就是如何便捷的运行这段 python 代码并返回视频或图片，这个时候我想到了 <code>telegram bot</code> , 因为 tg 我日常也是在用的，打开速度快，界面简洁都是我选择它的原因，而 telegram bot 算是 telegram 的特色吧，之前总是觉得 bot 是个神秘的存在，但是这两天的 bot 做下来，发现其实是相当的简单的，阅读纯英文文档，自我探索的过程也同样充满的乐趣！而且我认为之后我还可以向这个 bot 中加入更多的有创造力的，提高生活效率的功能，敬请期待～</p>\n<p>可以来玩玩这个 bot 噢～<span class=\"exturl\" data-url=\"aHR0cHM6Ly90Lm1lL29hY2lhX2JvdA==\">https://t.me/oacia_bot</span></p>\n<p>bot 的源代码发布在 github 上面<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29hY2lhL29hY2lhX2JvdA==\"> https://github.com/oacia/oacia_bot</span></p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231230233851.png\" alt=\"image-20231231230233851\" style=\"aspect-ratio:568 / 390;\"></p>\n<h1 id=\"tg-bot-python库选择\"><a class=\"anchor\" href=\"#tg-bot-python库选择\">#</a> tg bot python 库选择</h1>\n<p>既然我们选定了核心代码是用 python 编写的，那么选择一个简单易上手的 telegram bot 集成库就显得非常有必要啦，他们封装了 telegram 官方的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb3JlLnRlbGVncmFtLm9yZy9ib3RzL2FwaQ==\"> bot api</span>, 我们只需要调用 python 库作者集成的函数就可以方便的使用 bot api 的各种功能，现在主流的 tg bot python 库分别是</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xvbmFtaVdlYnMvVGVsZXRob24=\">telethon</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0ZXJubm9pci9weVRlbGVncmFtQm90QVBJ\">telebot</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi10ZWxlZ3JhbS1ib3QvcHl0aG9uLXRlbGVncmFtLWJvdA==\">python-telegram-bot</span></li>\n</ul>\n<p>我最终选择的库是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xvbmFtaVdlYnMvVGVsZXRob24=\"> telethon</span>, 原因很简单，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnRlbGV0aG9uLmRldi9lbi9zdGFibGUv\"> 官方文档</span>写的实在是太详细了！而<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0ZXJubm9pci9weVRlbGVncmFtQm90QVBJ\"> telebot</span> 我也尝试了，然而 API 的变化实在是太大了，网上使用旧版本的 telebot 所展示的代码完全没有参考价值，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi10ZWxlZ3JhbS1ib3QvcHl0aG9uLXRlbGVncmFtLWJvdA==\">python-telegram-bot</span> 用法很复杂，官方文档写的也不是很详细导致我用起来相当痛苦…</p>\n<h1 id=\"telegram-bot\"><a class=\"anchor\" href=\"#telegram-bot\">#</a> telegram bot</h1>\n<p>什么是 telegram bot? 这是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb3JlLnRlbGVncmFtLm9yZy9ib3Rz\">官方文档</span>中的介绍</p>\n<blockquote>\n<p>Bots are <strong>small applications</strong> that run entirely within the Telegram app. Users interact with bots through <strong>flexible interfaces</strong> that can support <strong>any kind of task or service</strong>.</p>\n</blockquote>\n<p>它其实本质上是基于 Telegram 客户端的第三方程序，我们给机器人发送消息，机器人通过代码处理我们发送的消息之后，再发送回消息给我们，类似于下面我和我的 bot 的简单交互</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231223732245.png\" alt=\"image-20231231223732245\" style=\"aspect-ratio:641 / 1280;\"></p>\n<h1 id=\"bot实现简单的交互\"><a class=\"anchor\" href=\"#bot实现简单的交互\">#</a> bot 实现简单的交互</h1>\n<p>大家可以看到上方我们刚刚实现了一个简单的交互，接下来我们用 telethon 来实现一下吧～</p>\n<p>首先安装 telethon</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> telethon</pre></td></tr></table></figure><p>代码长这个样子的，一眼看上去是不是很简单呢～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> telethon <span class=\"token keyword\">import</span> TelegramClient<span class=\"token punctuation\">,</span> events</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>api_id <span class=\"token operator\">=</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>api_hash <span class=\"token operator\">=</span> <span class=\"token string\">\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bot_token<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1234567890:aaaaaaaaaaaaaaaaa-bbbbbbbbbbbbbbbbbb\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>session<span class=\"token punctuation\">:</span> <span class=\"token string\">\"oacia_bot\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7890</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>client <span class=\"token operator\">=</span> TelegramClient<span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> api_id<span class=\"token punctuation\">,</span> api_hash<span class=\"token punctuation\">,</span> proxy<span class=\"token operator\">=</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span>bot_token<span class=\"token operator\">=</span>bot_token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token decorator annotation punctuation\">@client<span class=\"token punctuation\">.</span>on</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>NewMessage<span class=\"token punctuation\">(</span>pattern<span class=\"token operator\">=</span><span class=\"token string\">'(.*)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>get_entity<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>peer_id<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">await</span> event<span class=\"token punctuation\">.</span>reply<span class=\"token punctuation\">(</span><span class=\"token string\">\"bot has received your message!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>send_message<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"wow!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, you say </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>event<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>client<span class=\"token punctuation\">.</span>run_until_disconnected<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里的 <code>api_id</code> , <code>api_hash</code>  和 <code>bot_token</code>  我将会介绍获取的方法</p>\n<div class=\"note warning\">\n<p><code>api_id</code> , <code>api_hash</code>  和 <code>bot_token</code> <strong> 千万不要泄漏给其他人，千万不要！！</strong></p>\n</div>\n<h2 id=\"api_id-api_hash\"><a class=\"anchor\" href=\"#api_id-api_hash\">#</a> api_id api_hash</h2>\n<p>首先前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly9teS50ZWxlZ3JhbS5vcmcv\"> https://my.telegram.org/</span>, 输入手机号，在 telegram 上接收到 <code>login code</code>  后进入</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231224259408.png\" alt=\"image-20231231224259408\" style=\"aspect-ratio:1380 / 619;\"></p>\n<p>随后点击这里的 <code>API development tools</code>  去创建一个 app, 这里的数据随便填也是没问题的，如果网页一直报错 <code>ERROR</code> , 那么百分之九十是代理的问题，一直换代理直到成功创建 app</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231224449272.png\" alt=\"image-20231231224449272\" style=\"aspect-ratio:743 / 293;\"></p>\n<p>在 <code>App configuration</code>  的位置就可以得到<strong> api_id</strong> 和<strong> api_hash</strong></p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231224749993.png\" alt=\"image-20231231224749993\" style=\"aspect-ratio:932 / 316;\"></p>\n<h2 id=\"bot_token\"><a class=\"anchor\" href=\"#bot_token\">#</a> bot_token</h2>\n<p>想要创建 telegram bot, 我们需要发送消息给<span class=\"exturl\" data-url=\"aHR0cHM6Ly90Lm1lL0JvdEZhdGhlcg==\"> botfather</span>, 通过 <code>/newbot</code>  命令，输入 bot 的 <code>name</code>  和 <code>username</code>  之后，我们的 bot 就被创建好啦～红框框里面的 token 就是我们的 <code>bot_token</code></p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231225759299.png\" alt=\"image-20231231225759299\" style=\"aspect-ratio:454 / 912;\"></p>\n<p>之后将上面获取到的三个参数填入代码，运行 python 脚本，访问 <code>t.me/[username]</code> , 就可以和我们创建的机器人交互啦</p>\n<h1 id=\"bot云端部署\"><a class=\"anchor\" href=\"#bot云端部署\">#</a> bot 云端部署</h1>\n<p>因为本人从未拥有过一台属于自己的服务器 (二进制根本不需要服务器滴！😄), 所以就将目光转向了网上免费的云服务部署上，经过下面那么多云服务的尝试，我最终选择将服务部署在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW5kZXIuY29tLw==\"> render</span> 上面了</p>\n<h2 id=\"google-colab\"><a class=\"anchor\" href=\"#google-colab\">#</a> google colab</h2>\n<p>一开始我是在 google 的 colab 上面执行 bot 代码的，直接在 google 云端硬盘里面创建一个 ipynb 文件并点击就可以进入 colab 了，但是 colab 只能连续运行 12 个小时，pass</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231230811161.png\" alt=\"image-20231231230811161\" style=\"aspect-ratio:389 / 738;\"></p>\n<h2 id=\"github-codespace\"><a class=\"anchor\" href=\"#github-codespace\">#</a> github codespace</h2>\n<p>后来我把 bot 代码放到 github 的 codespace 里面运行，没想到只能运行几十分钟就断开了 qaq</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231230904330.png\" alt=\"image-20231231230904330\" style=\"aspect-ratio:1337 / 774;\"></p>\n<h2 id=\"vercel\"><a class=\"anchor\" href=\"#vercel\">#</a> vercel</h2>\n<p>之后我又想到了<span class=\"exturl\" data-url=\"aHR0cHM6Ly92ZXJjZWwuY29tLw==\"> vercel</span>, 毕竟之前就有过 vercel 部署静态网站的经验，并且去看了 vercel 的官方文档，是可以支持 python 的运行时的，<span class=\"exturl\" data-url=\"aHR0cHM6Ly92ZXJjZWwuY29tL2RvY3MvZnVuY3Rpb25zL3NlcnZlcmxlc3MtZnVuY3Rpb25zL3J1bnRpbWVzL3B5dGhvbiM=\">Using the Python Runtime with Serverless Functions</span></p>\n<p>但是它只能通过访问相应的 api 路由来触发函数的执行，而 telethon 使用的是 MTProto 协议直接和 telegram 服务器建立连接，并不需要对外开放一个路由，这就意味着 telethon 在 vercel 上将无法使用</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb3JlLnRlbGVncmFtLm9yZy9tdHByb3Rv\">MTProto</span> is Telegram’s own protocol to communicate with their API when you connect to their servers.</p>\n<p>Telethon is an alternative MTProto-based backend written entirely in Python and much easier to setup and use.</p>\n</blockquote>\n<p>因此我又去阅读了 telebot 的官方文档，照着<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5ZmJzZGs1OS9GbGFzay1DaGF0R1BULVRlbGVncmFtQm90LVZlcmNlbA==\"> Flask-ChatGPT-TelegramBot-Vercel</span> 里面的代码重构了原本的脚本</p>\n<p>这里我们就需要使用 telegram 的 webhook 功能</p>\n<blockquote>\n<p>什么是 webhook?</p>\n<p>简单的说就是将 telegram 服务器发送给 bot 的 message 同时也转发到设定的一个 url 上，消息的 json 格式如下方所示，我们可以处理这个消息并返回给发送消息方相应的消息</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ok<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             update_id<span class=\"token operator\">:</span> <span class=\"token number\">11223344</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             message<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  message_id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             from<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  id<span class=\"token operator\">:</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  is_bot<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  first_name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  username<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  language_code<span class=\"token operator\">:</span> <span class=\"token string\">\"en\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             chat<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                  id<span class=\"token operator\">:</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                  first_name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                  username<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                  type<span class=\"token operator\">:</span> <span class=\"token string\">\"private\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>             date<span class=\"token operator\">:</span> <span class=\"token number\">1558784616</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             text<span class=\"token operator\">:</span> <span class=\"token string\">\"My first message to this bot\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>设置 webhook 方法很简单，浏览器访问这个网站就可以了 <code>https://api.telegram.org/bot&#123;$token&#125;/setWebhook?url=&#123;$webhook_url&#125;</code></p>\n<p>这样做了之后确实是可以进行简单的交互的，但是当我让 bot 执行下载抖音图片这种耗时任务的时候，vercel 免费版的弊端就体现出来了，<strong> 一个函数最长只能执行 10 秒，10 秒后这个函数将会被强制停止</strong>，太艰难了，只能重新找找其他方法咯</p>\n<h2 id=\"render\"><a class=\"anchor\" href=\"#render\">#</a> render</h2>\n<p>最终我的 bot 代码是部署在 render 上面的，免费版每个月 750 小时完全够用了 (要知道一个月最长也就 744 小时呢)</p>\n<p>首先我们去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW5kZXIuY29tLw==\"> render</span> 上注册一个账号</p>\n<p>然后在右上角点击 <code>New</code> , 并创建一个 Web Service</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231234329521.png\" alt=\"image-20231231234329521\" style=\"aspect-ratio:751 / 548;\"></p>\n<p>选择 <code>Build and deploy from a Git repository</code>  并点击 <code>Next</code></p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231234639194.png\" alt=\"image-20231231234639194\" style=\"aspect-ratio:1024 / 647;\"></p>\n<p>你可以将<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29hY2lhL29hY2lhX2JvdA==\"> oacia_bot</span> fork 到你的仓库里面，或者直接用 bot 仓库的 git 链接来创建 <code>https://github.com/oacia/oacia_bot</code></p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231234712486.png\" alt=\"image-20231231234712486\" style=\"aspect-ratio:1117 / 291;\"></p>\n<p>之后就是设定运行的环境了，名称不重复就可以了，region 表示服务器，哪个服务器离你近就选哪个</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231234819187.png\" alt=\"image-20231231234819187\" style=\"aspect-ratio:1646 / 572;\"></p>\n<p>接下来这个 Start Command 需要填入 <code>python main.py</code> , 服务器示例选择免费就够用了</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231234859286.png\" alt=\"image-20231231234859286\" style=\"aspect-ratio:1604 / 836;\"></p>\n<p>再往下看，我们要设定这四个环境变量，前面三个我们之前就获取过了，填入即可，这个 <code>RENDER_NAME</code>  是我们刚刚创建的 <code>Web Service</code>  的名称</p>\n<p><img data-src=\"/telegram-bot-develop/image-20231231235238966.png\" alt=\"image-20231231235238966\" style=\"aspect-ratio:1624 / 590;\"></p>\n<p>这个 <code>RENDER_NAME</code>  的作用是给 bot 设置 webhook 用的，为什么要这样做呢？</p>\n<p>因为 render 的免费云服务同样有一个限制，就是如果 15 分钟内没有流量访问我们创建的 web 服务，那么这个服务将会被暂停，直到有流量经过 web 服务时，这个服务才会被重新启动，而我所使用的是 telethon, 要直到服务关了可就是真关了，telethon 创建的 client 也因此无法和 telegram 服务器通信了</p>\n<p>所以我的做法是给 bot 设置了一个 webhook</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>render_name <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"RENDER_NAME\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> render_name<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"https://api.telegram.org/bot</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>bot_token<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/setWebhook?url=https://</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>render_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.onrender.com/webhook\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> requests<span class=\"token punctuation\">.</span>status_codes <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set webhook successful\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>并用 flask 开放了一个 webhook 的路由</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># render 必须得起一个 http 服务，否则就会断开连接....</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/webhook'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">webhook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'ok'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当有人给 bot 发消息时，telegram 服务器同时也会给我们设置的 webhook 网址发送一个 post 的 http 请求，这样我们的 render 服务即使因为 15 分钟没有流量经过而被暂停了，也会因为 telegram 服务器的流量经过而被重启，telethon 就可以再次成功的和 telegram 服务器通讯啦，这也就意味着 bot 可以一直在 render 上面运行 <code>~♪(^∇^*)</code></p>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/two-way-SSL/",
            "url": "https://oacia.dev/two-way-SSL/",
            "title": "(doing)https双向认证及绕过方法",
            "date_published": "2023-12-14T10:00:32.000Z",
            "content_html": "<p>日常的 APP 为了不被别人通过抓包软件抓取与服务器通信的流量，所以会在流量的安全传输上做文章，最安全的做法当然是使用私有协议 (即协议格式不公开的协议), 例如抖音的 quic 协议，咸鱼的 spdy 协议等等，利用这些私有协议包装流量，从而使抓包工具无法识别出这串流量的实际内容是什么，所以就只能放行这段流量，面对私有协议倘若利用 <code>reqable</code> , <code>fiddler</code> , <code>charles</code>  等去抓包是抓不到的，而唯一能够抓到这段流量的就是 <code>wireshark</code> , 并且还需要对这段流量编写特定的脚本解析才可以知道这段流量所携带的实际数据</p>\n<p>除了私有协议之外，想让流量上的安全还可以使用 <code>SSL pinning</code>  的方法来阻止中间人抓包的发生，如何进行 HTTPS 双向认证以及使用 frida 对 <code>SSL pinning</code>  进行绕过是本文所要讨论的重点</p>\n<h1 id=\"ssl-pinning\"><a class=\"anchor\" href=\"#ssl-pinning\">#</a> SSL pinning</h1>\n<p>虽然 HTTPS 采用了公钥和证书的加密和验证方式，但依然存在 MIM (中间人攻击) 的可能性，因为证书颁发机构可能被黑客入侵，而 HTTPS 只验证了证书的合法性，并没有验证当前服务器是否是我们要访问的服务器，所以需要客户端去验证服务端证书的合法性，这就是 <code>SSL pinning</code> , 它还是 HTTPS 单向认证的范畴之内。</p>\n<p>我们可以看一下目前抓包工具 <code>Charles</code>  所采取的抓包方法</p>\n<p><img data-src=\"/two-way-SSL/640.png\" alt=\"图片\" style=\"aspect-ratio:700 / 483;\"></p>\n<p>为了保证我们当前访问的服务器就是我们需要访问的服务器，防止中间人攻击的发生，需要通过 <code>SSL pinning</code>  的方式来实现，其包括 Certificate Pinning 和 Public Key Pinning 两种。</p>\n<h2 id=\"证书锁定\"><a class=\"anchor\" href=\"#证书锁定\">#</a> 证书锁定</h2>\n<p>证书锁定需要把服务器的证书提前下载并内置到客户端中，当请求发起时，通过比对证书内容来确定连接的合法性，但由于证书存在过期时间，因此当服务器端证书更换时，需同时更换客户端证书。</p>\n<p>既然是要锁定证书，那么我们客户端上应该事先存在一个证书，我们才能锁定这个证书来验证我们真正的服务端，而不是代理工具伪造的服务端。</p>\n<p>如果是锁定证书，那通常情况下会将证书放置在 <code>app/asset</code>  目录下。</p>\n<p>具体操作：将 APP 代码内置仅接受指定域名的证书，而不接受操作系统或者浏览器内置的 CA 根证书对应的任何证书。</p>\n<p>通过这种授权方式，保障了 APP 与服务端通信的唯一性和安全性，因此移动端 APP 与服务端（例如 API 网关）之间的通信可以保证绝对的安全。</p>\n<h2 id=\"公钥锁定\"><a class=\"anchor\" href=\"#公钥锁定\">#</a> 公钥锁定</h2>\n<p>公钥锁定则需提取证书中的公钥内置到客户端中，通过比对公钥值来验证连接的合法性，由于证书更换依然可以保证公钥一致，所以公钥锁定不存在客户端频繁更换证书的问题，并且之后我们所使用的 <code>SSL pinning</code>  也同样是公钥锁定。</p>\n<h1 id=\"https双向认证原理\"><a class=\"anchor\" href=\"#https双向认证原理\">#</a> HTTPS 双向认证原理</h1>\n<p>双向验证，顾名思义就是客户端验证服务器端证书的正确性，服务器端也验证客户端的证书正确性，即</p>\n<ul>\n<li>服务端使用 <code>ca.crt</code>  校验客户端的 <code>client.crt</code>  和 <code>client.key</code></li>\n<li>客户端使用 <code>ca.crt</code>  校验服务端的 <code>server.crt</code>  和 <code>server.key</code></li>\n</ul>\n<p><img data-src=\"/two-way-SSL/ca-2way-auth-2.png\" alt=\"img\" style=\"aspect-ratio:301 / 271;\"></p>\n<p>详细的 HTTPS 连接过程如下图所示，其中的 <code>root.crt</code>  即 <code>ca.crt</code></p>\n<p><img data-src=\"/two-way-SSL/p620909.png\" alt=\"image\" style=\"aspect-ratio:1492 / 1190;\"></p>\n<ol>\n<li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务端；</li>\n<li>服务器端将本机的公钥证书（server.crt）发送给客户端；</li>\n<li>客户端读取公钥证书（server.crt），取出了服务端公钥；</li>\n<li>客户端将客户端公钥证书（client.crt）发送给服务器端；</li>\n<li>服务器端使用根证书（root.crt）解密客户端公钥证书，拿到客户端公钥；</li>\n<li>客户端发送自己支持的加密方案给服务器端；</li>\n<li>服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；</li>\n<li>客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；</li>\n<li>服务端用自己的私钥去解密这个密文，得到了密钥 R</li>\n<li>服务端和客户端在后续通讯过程中就使用这个密钥 R 进行通信了。</li>\n</ol>\n<h1 id=\"自签名证书\"><a class=\"anchor\" href=\"#自签名证书\">#</a> 自签名证书</h1>\n<h2 id=\"证书准备\"><a class=\"anchor\" href=\"#证书准备\">#</a> 证书准备</h2>\n<p>在制作证书前，我们先来了解一下每一个证书的格式</p>\n<ul>\n<li>JKS：数字证书库。JKS 里有 KeyEntry 和 CertEntry，在库里的每个 Entry 都是靠别名（alias）来识别的。</li>\n<li>P12：是 PKCS12 的缩写。同样是一个存储私钥的证书库，由 .jks 文件导出的，用户在 PC 平台安装，用于标示用户的身份。</li>\n<li>CER：俗称数字证书，目的就是用于存储公钥证书，任何人都可以获取这个文件 。</li>\n<li>BKS：由于 Android 平台不识别 .keystore 和 .jks 格式的证书库文件，因此 Android 平台引入一种新的证书库格式，BKS。</li>\n</ul>\n<p>整个双向认证的流程需要六个证书文件：</p>\n<ul>\n<li>服务器端公钥证书：server.crt</li>\n<li>服务器端私钥文件：server.key</li>\n<li>根证书：root.crt</li>\n<li>客户端公钥证书：client.crt</li>\n<li>客户端私钥文件：client.key</li>\n<li>客户端集成证书（包括公钥和私钥，用于安卓访问场景）：client.bks</li>\n</ul>\n<h2 id=\"证书制作\"><a class=\"anchor\" href=\"#证书制作\">#</a> 证书制作</h2>\n<p>因为自签名证书完全免费，所以这里我们使用自签名证书来作为我们的客户端 / 服务端证书</p>\n<p><img data-src=\"/two-way-SSL/p620908.png\" alt=\"image\" style=\"aspect-ratio:1448 / 706;\"></p>\n<h3 id=\"生成自签名根证书\"><a class=\"anchor\" href=\"#生成自签名根证书\">#</a> 生成自签名根证书</h3>\n<ol>\n<li>创建根证书私钥：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl genrsa <span class=\"token parameter variable\">-out</span> root.key <span class=\"token number\">1024</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建根证书请求文件：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-out</span> root.csr <span class=\"token parameter variable\">-key</span> root.key</pre></td></tr></table></figure><p>这一步以及下面生成服务器请求文件和客户端请求文件的过程都都要注意以下两点：</p>\n<ul>\n<li>根证书的 Common Name 填写 root 就可以，所有客户端和服务器端的证书这个字段需要填写域名，一定要注意的是，根证书的这个字段和客户端证书、服务器端证书<strong>不能一样</strong></li>\n<li>其他所有字段的填写，根证书、服务器端证书、客户端证书需保持一致最后的密码可以直接<strong>回车跳过</strong>。</li>\n</ul>\n<ol start=\"3\">\n<li>创建根证书：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-in</span> root.csr <span class=\"token parameter variable\">-out</span> root.crt <span class=\"token parameter variable\">-signkey</span> root.key <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">3650</span></pre></td></tr></table></figure><p>经过上面三个命令行，我们最终可以得到一个签名有效期为 10 年的根证书 root.crt，后面我们可以用这个根证书去颁发服务器证书和客户端证书。</p>\n<h3 id=\"生成自签名服务器端证书\"><a class=\"anchor\" href=\"#生成自签名服务器端证书\">#</a> 生成自签名服务器端证书</h3>\n<ol>\n<li>生成服务器端证书私钥：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl genrsa <span class=\"token parameter variable\">-out</span> server.key <span class=\"token number\">1024</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-out</span> server.csr <span class=\"token parameter variable\">-key</span> server.key</pre></td></tr></table></figure><ol start=\"3\">\n<li>生成服务器端公钥证书</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-in</span> server.csr <span class=\"token parameter variable\">-out</span> server.crt <span class=\"token parameter variable\">-CA</span> root.crt <span class=\"token parameter variable\">-CAkey</span> root.key <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">3650</span></pre></td></tr></table></figure><p>经过上面的三个命令，我们得到：</p>\n<ul>\n<li>\n<p>server.key：服务器端的密钥文件</p>\n</li>\n<li>\n<p>server.crt：有效期十年的服务器端公钥证书，使用根证书和服务器端私钥文件一起生成</p>\n</li>\n</ul>\n<h3 id=\"生成自签名客户端证书\"><a class=\"anchor\" href=\"#生成自签名客户端证书\">#</a> 生成自签名客户端证书</h3>\n<ol>\n<li>生成客户端证书密钥：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl genrsa <span class=\"token parameter variable\">-out</span> client.key <span class=\"token number\">1024</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>生成客户端证书请求文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-out</span> client.csr <span class=\"token parameter variable\">-key</span> client.key</pre></td></tr></table></figure><ol start=\"3\">\n<li>生客户端证书</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-in</span> client.csr <span class=\"token parameter variable\">-out</span> client.crt <span class=\"token parameter variable\">-CA</span> root.crt <span class=\"token parameter variable\">-CAkey</span> root.key <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">3650</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>生客户端 bks 格式证书</li>\n</ol>\n<p>我们首先查看自己的 java 版本，例如我现在的 java 版本是 jdk1.7</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>oacia<span class=\"token operator\">></span> <span class=\"token function\">java</span> <span class=\"token parameter variable\">--version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token number\">17.0</span>.8 <span class=\"token number\">2023</span>-07-18 LTS</pre></td></tr></table></figure><p>然后前往 [https://www.bouncycastle.org/latest_releases.html) 下载对应版本的 <code>bcprov</code> , 我的 jdk1.7 应该下载的 jar 包是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm91bmN5Y2FzdGxlLm9yZy9kb3dubG9hZC9iY3Byb3YtamRrMTV0bzE4LTE3Ny5qYXI=\"> bcprov-jdk15to18-177.jar</span></p>\n<p>随后输入下列命令即可将 crt 格式的证书转换为 bks 格式的证书</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keytool <span class=\"token parameter variable\">-import</span> <span class=\"token parameter variable\">-alias</span> client <span class=\"token parameter variable\">-file</span> .<span class=\"token punctuation\">\\</span>client.crt <span class=\"token parameter variable\">-keystore</span> .<span class=\"token punctuation\">\\</span>client.bks <span class=\"token parameter variable\">-storetype</span> BKS <span class=\"token parameter variable\">-provider</span> org.bouncycastle.jce.provider.BouncyCastleProvider <span class=\"token parameter variable\">-providerpath</span> .<span class=\"token punctuation\">\\</span>bcprov-jdk15to18-177.jar <span class=\"token parameter variable\">-storepass</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><p>同理，我们可以将将根证书 <code>root.crt</code>  也转换为 <code>root.bks</code> , 因为在 Android 中智能识别 bks 格式的证书</p>\n<p>##　总结</p>\n<p>通过上述过程自定义证书的制作，我们已经得到了所需要的证书</p>\n<ul>\n<li>android 客户端\n<ul>\n<li><code>client.bks</code> : 这是客户端证书，需要发送给服务端进行校验</li>\n<li><code>root.bks</code> : 这是根证书，用来校验服务端证书的合法性</li>\n</ul>\n</li>\n<li>python 服务端\n<ul>\n<li><code>server.crt</code>  和 <code>server.key</code> : 这是服务端证书，需要发送给客户端进行校验</li>\n<li><code>root.crt</code> : 这是根证书，用来校验客户端证书的合法性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"android客户端\"><a class=\"anchor\" href=\"#android客户端\">#</a> Android 客户端</h2>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20venBjaGNiZC9wLzEzNzA5NjkwLmh0bWw=\">关于单向认证与双向认证 </span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vemgvYXBpLWdhdGV3YXkvdXNlci1ndWlkZS9tdXR1YWwtdGxzLWF1dGhlbnRpY2F0aW9uI3NlY3Rpb24tajhyLWFmeC03MTk=\">阿里云 HTTPS 双向认证</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/blog-domain/",
            "url": "https://oacia.dev/blog-domain/",
            "title": "这两个月关于域名的二三事",
            "date_published": "2023-12-12T16:59:22.000Z",
            "content_html": "<p>今天刚在 <code>namesilo</code>  购买了一个新的域名 <code>oacia.dev</code> , 要是有人来过我的博客的话，应该记得这个博客曾经的域名是 <code>oacia.cc</code> , 当然了我也非常喜欢 <code>cc</code>  这个顶级域名，这个域名是我一年前注册的，不过不幸的是在今年九月份的时候，我的域名过期了，当时我看到 75 块的续费价格还纳闷为什么变贵了，因为去年的时候我记得非常清楚续费只需要三十多元的，随后就看到了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vbm90aWNlbGlzdC9hcnRpY2xlaWQvMTA2MTg3MDMwMi5odG1s\">阿里云的公告</span>说 <code>cc</code>  域名要涨价了…</p>\n<p><img data-src=\"/blog-domain/image-20231213011214762.png\" alt=\"image-20231213011214762\" style=\"aspect-ratio:1453 / 396;\"></p>\n<p>唉太难受了，随后我就去腾讯云和华为云都去搜了一下 <code>cc</code>  这个顶级域名的价格，随后惊讶的发现华为云只需要 35 元 / 年，当时我想那我直接把域名转到华为云不就好了，转移注册商应该是很方便的事情吧，随后我尝试一下才发现，<strong> 域名过期之后就不能再转移域名了</strong>，而我又不是很想在贵了接近 50％价格的阿里云续费域名，所以我想的是域名应该很快就会被删除了吧，结果呢，又去网上看了一下，cc 域名要等 30 天的续费宽限期和 29 天的赎回期之后才会被完全删除开放注册.</p>\n<p><img data-src=\"/blog-domain/image-20231213011944646.png\" alt=\"image-20231213011944646\" style=\"aspect-ratio:1182 / 722;\"></p>\n<p>这就意味着我需要等到两个月之后 (也就是 12 月份), 这个域名才能重新购买，所以这段时间域名过期了之后我也就没有再管了，想着我只要等到 12 月份的时候再重新在华为云把 <code>oacia.cc</code>  这个域名买回来不就行了</p>\n<p>于是等呀等呀等呀等呀，终于熬到了十二月份，说实话这两个月博客无法访问的时间让我发现我的博客对我来说有多么的重要。这两个月我总是无心研究，整天不知道怎么的时间就过去了，然后就到晚上了，然后就睡觉睡到第二天中午起来继续消磨时间，这种感觉就和我当时高考完之后在家无所事事的感觉特别相似，那一种一整天没有目标的感觉让我感觉特别的不舒服.</p>\n<p>一个博客不仅能让我即时记录下现在学到的知识，我想这更是一种督促我去做自己想要做的事情的方式，因为博客是放在互联网上大家都可以看到，所以我就会在内心暗暗努力要好好去研究，写一些真正干货的文章给大家看.</p>\n<p>当上周我发现域名已经进入等待删除期，即域名终于要被注册局删除，我可以重新到华为云注册的时候，我每一天，整天整天的去看 <code>oacia.cc</code>  的 whois 信息，期待着那一天我重新注册到 <code>oacia.cc</code>  这个域名，就在今天，12 月 12 号，当域名终于被注册局删除之后，当我满心欢喜的登录华为云准备买回域名的时候，我愕然发现，这个域名在十几分钟前，就在今天下午五点就被其他人抢先注册了</p>\n<p><img data-src=\"/blog-domain/image-20231213012749593.png\" alt=\"image-20231213012749593\" style=\"aspect-ratio:635 / 655;\"></p>\n<p>要说不难受肯定是假的，当时我愣在了电脑前很久，心想着这一定是假的，我之前搜索过这个二级域名，只有 <code>com</code>  是被注册的，其他的顶级域名都是没有被注册过的，照理来说相当的冷门才对，不过有点遗憾呢， <code>oacia.cc</code>  这个陪伴了我整整一年的域名就离我而去了，发了一条推特之后我也只能暗自苦笑着，谁让我慢人一步呢，或许有人比我更需要这个域名呢～</p>\n<p>不过我的博客的域名还等着定下来呢，整理了一下心情，我去外面走了走，出门吃了完牛丼饭，想着究竟用什么新域名好呢，但是在阿里云上下翻看，我还是对我那逝去的老域名念念不忘。我看到了 <code>oacia.life</code> , 这或许意为新生. <code>oacia.co</code> , 和我之前的域名长的可真像呢，但是我不由得伤感了起来，算了看到 <code>co</code>  容易联想到失去的 <code>cc</code> , 还是换一个罢。随后我想着不如买一个 com 域名，这个顶级域名听起来就相当的专业呐，但是 <code>oacia.com</code>  这个域名已经被注册掉了，想着后面加几个数字怎么样？不过我一看到这个域名，感觉英文 + 数字不太好看，所以也就 pass 掉了</p>\n<p>然后我就去研究了一下别人的域名维术大佬的博客 <code>weishu.me</code> , <code>oacia.me</code>  这个域名看起来不错，但是我在阿里云，腾讯云，华为云都找不到这个顶级域名，我猜应该是已经下架了吧，因为我查询了一下维术大佬的博客的 whois 信息，发现是在阿里云注册的.</p>\n<p>后来我看到了 seeflower 大佬的博客 <code>seeflower.dev</code> , 这个 dev 听起来好专业呐，而且感觉也非常契合我作为 <code>developer</code>  的自我定位，同时我觉得这个域名应该也谕示着我的 blog 的内容发展的越来越丰富，蒸蒸日上！组合了一下域名， <code>oacia.dev</code> , 天呐这个域名一听就超级 coooooooool</p>\n<p>但是在阿里云，腾讯云，华为云都不能购买这个域名，随后我将目光转向了全球的域名注册商，godaddy 也不知道是什么原因无法进入</p>\n<p><img data-src=\"/blog-domain/image-20231213014614390.png\" alt=\"image-20231213014614390\" style=\"aspect-ratio:1035 / 599;\"></p>\n<p>这该怎么办呢，我目前为止唯一知道的全球域名注册商就是 godaddy 了，这个时候又轮到 whois 查询派上用场了，我发现 <code>seeflower.dev</code>  是在 <code>namesilo</code>  注册的，而更加深入的了解之后，我发现 <code>namesilo</code>  竟然可以使用支付宝就能支付，去搜索了一下， <code>oacia.dev</code>  这个域名还没有被注册呢！于是我花了 12 刀，实际付了 86 块把域名买回来了，今晚配好 CNAME 之后，等一两天后 dns 域名解析同步完成之后，我的博客终于能再次被访问到了！</p>\n<p>回过头来，兜兜转转两个月，为了省下每年 30 多元域名的费用，不仅博客停摆了两个月之久，我感觉自己也似乎颓废了两个月，同时我也失去了 <code>oacia.cc</code>  这个陪伴我一年的域名，并且花了比在阿里云续费 <code>oacia.cc</code>  域名 (需要每年 75 元) 高了十多元的价格，在 <code>namesilo</code>  又重新购买了新的域名 <code>oaica.dev</code>  (每年 12 刀，约合 86 元), 现在想来真是一段的神奇的经历，只有真正失去的时候，才会发现它曾经对我来说有多么的重要.</p>\n<p>人生不过是一次路过，何必什么都抓住不放，用心享受途中的风景就好.</p>\n<p>Bye, <strong>oacia.cc</strong></p>\n<p>Hello, <strong>oacia.dev</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://oacia.dev/douyin-favorites-pic/",
            "url": "https://oacia.dev/douyin-favorites-pic/",
            "title": "抖音收藏夹图文批量获取",
            "date_published": "2023-11-09T13:24:38.000Z",
            "content_html": "<p>最近想给自己的博客多增加些好看的图片当背景图，正好这段时间刷抖音看到了好多好看的图片，也把他们保存在收藏夹里面，但是正当我兴致勃勃的想把我收藏夹里面的图片下载下来时，发现工作量真的真的好大！所以索性就写个小脚本来让生活更加轻松咯～</p>\n<p>首先我们打开网页版抖音，来到收藏夹，然后疯狂向下拉直到收藏夹的底部</p>\n<p><img data-src=\"/douyin-favorites-pic/image-20231109212615660.png\" alt=\"image-20231109212615660\" style=\"aspect-ratio:1920 / 987;\"></p>\n<p>然后在网页上 <code>右键-&gt;另存为...</code>  把这个 html 保存为 <code>mhtml</code>  格式</p>\n<p><img data-src=\"/douyin-favorites-pic/image-20231109212735019.png\" alt=\"image-20231109212735019\" style=\"aspect-ratio:622 / 417;\"></p>\n<p>接下来写个简单的小爬虫，抖音里面收藏的图片就下载到电脑上啦～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>header <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Mobile Safari/537.36\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">douyin_pic</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 获取 json 数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p_id <span class=\"token operator\">=</span> <span class=\"token string\">\"https://m.douyin.com/web/api/v2/aweme/iteminfo/?reflow_source=reflow_page&amp;item_ids=&#123;&#125;&amp;a_bogus=\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># print(p_id)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    p_rs <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>p_id<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># print(p_rs)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># 拿到 images 下的原图片</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    images <span class=\"token operator\">=</span> p_rs<span class=\"token punctuation\">[</span><span class=\"token string\">'item_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'images'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 创建 pic 文件夹</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'douyin/pic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token string\">'douyin/pic'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 下载无水印照片 (遍历 images 下的数据)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> im <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># 每一条数据下面都有四个原图链接这边用的是第一个</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        p_req <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>im<span class=\"token punctuation\">[</span><span class=\"token string\">'url_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\"># print(p_req)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\"># 保存图片</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 拿到文件的长度，并把 total 初始化为 0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        total <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p_req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'content-length'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\"># 打开当前目录的 fname 文件 (名字你来传入)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\"># 初始化 tqdm，传入总数，文件名等数据，接着就是写入，更新等操作了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'douyin/pic/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>pid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.jpg'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> tqdm<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                total<span class=\"token operator\">=</span>total<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                unit<span class=\"token operator\">=</span><span class=\"token string\">'iB'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                desc<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>pid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 第</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">张图片\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                unit_scale<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                unit_divisor<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> bar<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> p_req<span class=\"token punctuation\">.</span>iter_content<span class=\"token punctuation\">(</span>chunk_size<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                size <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                bar<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my.mhtml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>pic <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'https://www.douyin.com/note/(\\d+)'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> pic<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        douyin_pic<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"pid </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>p<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> went wrong!!!\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://oacia.dev/hina-AI-voice/",
            "url": "https://oacia.dev/hina-AI-voice/",
            "title": "I wanna hear your voice, hina",
            "date_published": "2023-11-06T09:31:57.000Z",
            "content_html": "<blockquote>\n<p>很喜欢日奈的声音，所以用自己的电脑训练了 hina 的声音模型，并让她唱了一首歌</p>\n</blockquote>\n<div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src=\"[{&quot;name&quot;:&quot;单相思&quot;,&quot;url&quot;:&quot;/audio/hina_DanXiangSi.mp3&quot;}]\"></div></div>\n<h1 id=\"python虚拟环境搭建\"><a class=\"anchor\" href=\"#python虚拟环境搭建\">#</a> python 虚拟环境搭建</h1>\n<p>这里我使用的 Python 版本为 <code>Python3.9</code></p>\n<p><strong>安装 virtualenv</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> virtualenv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pip <span class=\"token function\">install</span> virtualenvwrapper  <span class=\"token comment\"># 这是对 virtualenv 的封装版本，一定要在 virtualenv 后安装</span></pre></td></tr></table></figure><p><strong>创建虚拟环境</strong></p>\n<p>这里我创建了名为 <code>hina</code>  的虚拟环境</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS E:<span class=\"token punctuation\">\\</span>virtualenvs<span class=\"token operator\">></span> virtualenv hina</pre></td></tr></table></figure><p><strong>进入虚拟环境</strong></p>\n<p>命令行前面有 <code>(hina) </code> 说明我们已经进入了这个虚拟环境</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS E:<span class=\"token punctuation\">\\</span>virtualenvs<span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> .<span class=\"token punctuation\">\\</span>hina<span class=\"token punctuation\">\\</span>Scripts<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PS E:<span class=\"token punctuation\">\\</span>virtualenvs<span class=\"token punctuation\">\\</span>hina<span class=\"token punctuation\">\\</span>Scripts<span class=\"token operator\">></span> .<span class=\"token punctuation\">\\</span>activate</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>hina<span class=\"token punctuation\">)</span> PS E:<span class=\"token punctuation\">\\</span>virtualenvs<span class=\"token punctuation\">\\</span>hina<span class=\"token punctuation\">\\</span>Scripts<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"pytorch安装\"><a class=\"anchor\" href=\"#pytorch安装\">#</a> pytorch 安装</h1>\n<p>首先进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRvcmNoLm9yZy9nZXQtc3RhcnRlZC9sb2NhbGx5Lw==\"> pytorch 官网</span></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106202001467.png\" alt=\"image-20231106202001467\" style=\"aspect-ratio:1009 / 375;\"></p>\n<p>然后输入 <code>nvidia-smi</code>  命令查看 N 卡 (必须是 N 卡！A 卡是不行的) 支持的最大 CUDA 版本，我这里是 <code>12.2</code></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106202106566.png\" alt=\"image-20231106202106566\" style=\"aspect-ratio:1154 / 112;\"></p>\n<p>然后运行 <code>Run this Command</code>  中显示的命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 <span class=\"token function\">install</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121</pre></td></tr></table></figure><h1 id=\"so-vits-svc-50环境搭建\"><a class=\"anchor\" href=\"#so-vits-svc-50环境搭建\">#</a> so vits svc 5.0 环境搭建</h1>\n<p><strong>下载源码</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/PlayVoice/so-vits-svc-5.0.git <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p><strong>安装项目依赖</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> .<span class=\"token punctuation\">\\</span>requirements.txt</pre></td></tr></table></figure><p><strong>下载其他必要文件</strong></p>\n<p>因为有文件需要从 <code>google drive</code>  下载，所以记得挂好代理哦</p>\n<p>首先下载 <code>gdown</code>  和 <code>wget</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> gdown, <span class=\"token function\">wget</span></pre></td></tr></table></figure><p>然后在项目文件夹内新建 <code>download.py</code></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106195353674.png\" alt=\"image-20231106195353674\" style=\"aspect-ratio:797 / 382;\"></p>\n<p>并将下面的代码 (我写的 XD) 复制到 <code>download.py</code>  中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gdown</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> wget</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>File_DICT <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># folder:https://drive.google.com/drive/folders/15oeBYf6Qn1edONkVLXe82MzdIi3O_9m3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># we only need best_model.pth.tar according to README.md</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"Speaker-Encoder\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"best_model.pth.tar\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1UPjQ2LVSIt3o-9QMKMJcdzT8aZRZCI-E\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"output_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"speaker_pretrain/best_model.pth.tar\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"gdrive\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">\"whisper-large-v2\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"large-v2.pt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://openaipublic.azureedge.net/main/whisper/models/81f7c96c852ee8fc832187b0132e569d6c3065a3252ed18e56effd0b6a73e524/large-v2.pt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"output_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"whisper_pretrain/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"gdrive\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"hubert_soft model\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hubert-soft-0d54a1f4.pt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"output_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hubert_pretrain/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"gdrive\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token string\">\"crepe full\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"full.pth\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/maxrmorrison/torchcrepe/raw/master/torchcrepe/assets/full.pth\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token string\">\"output_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"crepe/assets\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token string\">\"gdrive\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">\"pretrain model\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"sovits5.0.pretrain.pth\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/PlayVoice/so-vits-svc-5.0/releases/download/5.0/sovits5.0.pretrain.pth\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"output_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"vits_pretrain/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"gdrive\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    REPO_PATH <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> File_DICT<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>REPO_PATH<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">[</span><span class=\"token string\">\"output_path\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Downloading &#123;&#125; to &#123;&#125;...\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">[</span><span class=\"token string\">\"gdrive\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                gdown<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span>value<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span>path<span class=\"token punctuation\">,</span> quiet<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                wget<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> out<span class=\"token operator\">=</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDone!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[!] Exception in download_binaries\\n&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>随后在虚拟环境中运行 <code>download.py</code>  就可以啦</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>hina<span class=\"token punctuation\">)</span> PS E:<span class=\"token punctuation\">\\</span>AI<span class=\"token punctuation\">\\</span>so-vits-svc-5.<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> python .<span class=\"token punctuation\">\\</span>download.py</pre></td></tr></table></figure><p>运行如下命令测试环境是否搭建成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python svc_inference.py <span class=\"token parameter variable\">--config</span> configs/base.yaml <span class=\"token parameter variable\">--model</span> ./vits_pretrain/sovits5.0.pretrain.pth <span class=\"token parameter variable\">--spk</span> ./configs/singers/singer0001.npy <span class=\"token parameter variable\">--wave</span> test.wav</pre></td></tr></table></figure><p>在当前目录下出现 <code>svc_out.wav</code>  就说明可以正常使用啦</p>\n<p><img data-src=\"/hina-AI-voice/image-20231106203257692.png\" alt=\"image-20231106203257692\" style=\"aspect-ratio:819 / 566;\"></p>\n<h1 id=\"获取hina的声音\"><a class=\"anchor\" href=\"#获取hina的声音\">#</a> 获取 hina 的声音</h1>\n<h2 id=\"从gamekee中获取\"><a class=\"anchor\" href=\"#从gamekee中获取\">#</a> 从 gamekee 中获取</h2>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYS5nYW1la2VlLmNvbS84MzcyOS5odG1s\"> gamekee</span> 中，我们可以获取 hina 的音频，我们只需要写一个非常 easy 的 python 代码来把 hina 的声音下载下来</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> wget</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>HINA <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"hina_water\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"https://ba.gamekee.com/83729.html\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#日奈 - 水着</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"hina\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"https://ba.gamekee.com/59934.html\"</span><span class=\"token comment\">#日奈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> HINA<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    data <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    voices <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'src=\"//(.*?\\.(?:mp3|wav))\"'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> voices<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        wget<span class=\"token punctuation\">.</span>download<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://\"</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"download </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> success\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"从游戏资源中获取\"><a class=\"anchor\" href=\"#从游戏资源中获取\">#</a> 从游戏资源中获取</h2>\n<p>由于 hina 是蔚蓝档案中的角色，所以我们需要将 hina 的音频资源从游戏文件中提取出来，首先要做的就是在模拟器从谷歌商店中下载蔚蓝档案，这里我使用的模拟器是雷电模拟器</p>\n<p>然后在 <code>设置-&gt;其他设置</code> 中开启 <code>ROOT权限</code></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106214153128.png\" alt=\"image-20231106214153128\" style=\"aspect-ratio:718 / 572;\"></p>\n<p>然后我们在侧边栏找到 <code>更多-&gt;共享文件-&gt;打开安卓文件夹</code> ，找到安卓共享文件夹文件名为 <code>/mnt/shared/Pictures</code></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106214504493.png\" alt=\"image-20231106214504493\" style=\"aspect-ratio:551 / 122;\"></p>\n<p>随后安装<span class=\"exturl\" data-url=\"aHR0cDovL29hY2lhLmdpdGh1Yi5pby9oaW5hLUFJLXZvaWNlL01UJUU3JUFFJUExJUU3JTkwJTg2JUU1JTk5JUE4XzIuMTEuOC5hcGs=\"> MT 管理器</span>并打开，在右侧边栏进入 <code>mnt/shared/Pictures</code></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106214608077.png\" alt=\"image-20231106214608077\" style=\"aspect-ratio:554 / 984;\"></p>\n<p>在左侧边栏进入 <code>/storage/emulated/0/Android/data</code> , 找到文件夹名称为 <code>com.nexon.bluearchive</code> , 这个文件夹是蔚蓝档案全部音频图片资源文件的所在位置，长按该文件夹，并选择 <code>复制-&gt;</code></p>\n<p><img data-src=\"/hina-AI-voice/image-20231106214839294.png\" alt=\"image-20231106214839294\" style=\"aspect-ratio:554 / 984;\"></p>\n<p>等到复制完成之后，在侧边栏点击 <code>更多-&gt;共享文件-&gt;打开电脑文件夹</code> 即可找到保存到电脑上的蔚蓝档案资源文件～</p>\n<p>随后我们进入到 <code>com.nexon.bluearchive\\files\\PUB\\Resource\\GameData\\MediaResources\\Audio\\VOC_JP\\JP_Hina</code> , 这里就是 hina 的全部音频啦</p>\n<p><img data-src=\"/hina-AI-voice/image-20231106215532353.png\" alt=\"image-20231106215532353\" style=\"aspect-ratio:1507 / 813;\"></p>\n<p>由于获取到的是 <code>ogg</code>  格式的文件，所以我们需要使用格式工厂把 <code>ogg</code>  文件全部转换成 <code>wav</code>  文件</p>\n<p>然后在新建一个 <code>so-vits-svc-5.0\\dataset_raw\\JP_Hina</code>  文件夹，并将我们转换完成的 hina 的音频复制到这个文件夹中</p>\n<h1 id=\"数据预处理\"><a class=\"anchor\" href=\"#数据预处理\">#</a> 数据预处理</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python svc_preprocessing.py <span class=\"token parameter variable\">-t</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>-t：指定线程数，必须是正整数且不得超过 CPU 总核心数，一般写 2 就可以了</p>\n<p><strong>进阶命令</strong></p>\n<ol>\n<li>重采样</li>\n</ol>\n<p>生成采样率 16000Hz 音频，存储路径为：./data_svc/waves-16k</p>\n<blockquote>\n<p>python prepare/preprocess_a.py -w ./dataset_raw -o ./data_svc/waves-16k -s 16000</p>\n</blockquote>\n<p>生成采样率 32000Hz 音频，存储路径为：./data_svc/waves-32k</p>\n<blockquote>\n<p>python prepare/preprocess_a.py -w ./dataset_raw -o ./data_svc/waves-32k -s 32000</p>\n</blockquote>\n<ol start=\"2\">\n<li>使用 16K 音频，提取音高</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_crepe.py -w data_svc/waves-16k/ -p data_svc/pitch</p>\n</blockquote>\n<ol start=\"3\">\n<li>使用 16k 音频，提取内容编码</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_ppg.py -w data_svc/waves-16k/ -p data_svc/whisper</p>\n</blockquote>\n<ol start=\"4\">\n<li>使用 16k 音频，提取内容编码</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_hubert.py -w data_svc/waves-16k/ -v data_svc/hubert</p>\n</blockquote>\n<ol start=\"5\">\n<li>使用 16k 音频，提取音色编码</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_speaker.py data_svc/waves-16k/ data_svc/speaker</p>\n</blockquote>\n<ol start=\"6\">\n<li>提取音色编码均值；用于推理，也可作为发音人统一音色用于生成训练索引（数据音色变化不大的情况下）</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_speaker_ave.py data_svc/speaker/ data_svc/singer</p>\n</blockquote>\n<ol start=\"7\">\n<li>使用 32k 音频，提取线性谱</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_spec.py -w data_svc/waves-32k/ -s data_svc/specs</p>\n</blockquote>\n<ol start=\"8\">\n<li>使用 32k 音频，生成训练索引</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_train.py</p>\n</blockquote>\n<ol start=\"9\">\n<li>训练文件调试</li>\n</ol>\n<blockquote>\n<p>python prepare/preprocess_zzz.py</p>\n</blockquote>\n<h1 id=\"训练\"><a class=\"anchor\" href=\"#训练\">#</a> 训练</h1>\n<ol>\n<li>\n<p>参数调整<br>\n如果基于预训练模型微调，需要下载预训练模型<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BsYXlWb2ljZS9zby12aXRzLXN2Yy01LjAvcmVsZWFzZXMvdGFnLzUuMA==\"> sovits5.0.pretrain.pth</span> 并且放在项目根目录下面<br>\n并且修改 <code>configs/base.yaml</code>  的参数 <code>pretrain: &quot;./vits_pretrain/sovits5.0.pretrain.pth&quot;</code> ，并适当调小学习率（建议从 5e-5 开始尝试）<br>\n<strong>learning_rate &amp; batch_size &amp; accum_step 为三个紧密相关的参数，需要仔细调节</strong><br>\n<strong> batch_size 乘以 accum_step 通常等于 16 或 32，对于低显存 GPU，可以尝试 batch_size = 4，accum_step = 4</strong></p>\n</li>\n<li>\n<p>开始训练</p>\n<pre><code>python svc_trainer.py -c configs/base.yaml -n sovits5.0\n</code></pre>\n</li>\n<li>\n<p>恢复训练</p>\n<pre><code>python svc_trainer.py -c configs/base.yaml -n sovits5.0 -p chkpt/sovits5.0/sovits5.0_0***.pt\n</code></pre>\n</li>\n<li>\n<p>训练日志可视化</p>\n<pre><code>tensorboard --logdir logs/\n</code></pre>\n</li>\n</ol>\n<h1 id=\"人声伴奏分离\"><a class=\"anchor\" href=\"#人声伴奏分离\">#</a> 人声伴奏分离</h1>\n<p>想让 hina 唱出单相思，那么有伴奏是肯定不行滴，我们需要将人声和伴奏分离</p>\n<h2 id=\"uvr5\"><a class=\"anchor\" href=\"#uvr5\">#</a> UVR5</h2>\n<p>这里需要使用到的工具是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Fuam9rMDcvdWx0aW1hdGV2b2NhbHJlbW92ZXJndWk=\"> Ultimate Vocal Remover 5 (UVR5)</span>, 并下载对应的处理模型。</p>\n<p>可以前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdnNlcC5jb20vcXVhbGl0eV9jaGVja2VyL3N5bnRoX2xlYWRlcmJvYXJk\">这个网站</span>查看模型的得分</p>\n<p>一些推荐的处理模型和功能如下：</p>\n<ul>\n<li><code>Demucs | MDX23C</code> : 分离人声及伴奏</li>\n<li><code>VR Architecture - 5_HP-Karaoke-UVR</code> : 分离和声</li>\n<li><code>VR Architecture - UVR-DeEcho-DeReverb</code> : 去除混响和回声</li>\n</ul>\n<p>可以先使用 <code>Demucs | MDX23C</code>  来分离人声及伴奏，如果听到人声有和声的话，可以用 <code>VR Architecture - 5_HP-Karaoke-UVR</code>  来二次处理</p>\n<p>当然，为了方便也可以直接去 b 站找到别人分离好的人声用啦～</p>\n<h1 id=\"推理\"><a class=\"anchor\" href=\"#推理\">#</a> 推理</h1>\n<ol>\n<li>\n<p>导出推理模型：文本编码器，Flow 网络，Decoder 网络；判别器和后验编码器等只在训练中使用</p>\n<pre><code>python svc_export.py --config configs/base.yaml --checkpoint_path chkpt/sovits5.0/sovits5.0_0***.pt\n</code></pre>\n</li>\n<li>\n<p>推理</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>如果不想手动调整 f0，只需要最终的推理结果，运行下面的命令即可</p>\n<pre><code>python svc_inference.py --config configs/base.yaml --model sovits5.0.pth --spk ./data_svc/singer/修改成对应的名称.npy --wave test.wav --shift 0\n</code></pre>\n</li>\n<li>\n<p>如果需要手动调整 f0，依据下面的流程操作</p>\n<ul>\n<li>\n<p>使用 whisper 提取内容编码，生成 test.ppg.npy</p>\n<pre><code>python whisper/inference.py -w test.wav -p test.ppg.npy\n</code></pre>\n</li>\n<li>\n<p>使用 hubert 提取内容编码，生成 test.vec.npy</p>\n<pre><code>python hubert/inference.py -w test.wav -v test.vec.npy\n</code></pre>\n</li>\n<li>\n<p>提取 csv 文本格式 F0 参数，用 Excel 打开 csv 文件，对照 Audition 或者 SonicVisualiser 手动修改错误的 F0</p>\n<pre><code>python pitch/inference.py -w test.wav -p test.csv\n</code></pre>\n</li>\n<li>\n<p>最终推理</p>\n<pre><code>python svc_inference.py --config configs/base.yaml --model sovits5.0.pth --spk ./data_svc/singer/修改成对应的名称.npy --wave test.wav --ppg test.ppg.npy --vec test.vec.npy --pit test.csv --shift 0\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>一些注意点<br>\n当指定–ppg 后，多次推理同一个音频时，可以避免重复提取音频内容编码；没有指定，也会自动提取</p>\n<p>当指定–vec 后，多次推理同一个音频时，可以避免重复提取音频内容编码；没有指定，也会自动提取</p>\n<p>当指定–pit 后，可以加载手工调教的 F0 参数；没有指定，也会自动提取</p>\n<p>生成文件在当前目录 svc_out.wav</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">args</th>\n<th style=\"text-align:center\">–config</th>\n<th style=\"text-align:center\">–model</th>\n<th style=\"text-align:center\">–spk</th>\n<th style=\"text-align:center\">–wave</th>\n<th style=\"text-align:center\">–ppg</th>\n<th style=\"text-align:center\">–vec</th>\n<th style=\"text-align:center\">–pit</th>\n<th style=\"text-align:center\">–shift</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">配置文件</td>\n<td style=\"text-align:center\">模型文件</td>\n<td style=\"text-align:center\">音色文件</td>\n<td style=\"text-align:center\">音频文件</td>\n<td style=\"text-align:center\">ppg 内容</td>\n<td style=\"text-align:center\">hubert 内容</td>\n<td style=\"text-align:center\">音高内容</td>\n<td style=\"text-align:center\">升降调</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>去噪后处理</p>\n</li>\n</ol>\n<pre><code>python svc_inference_post.py --ref test.wav --svc svc_out.wav --out svc_out_post.wav\n</code></pre>\n",
            "tags": []
        }
    ]
}